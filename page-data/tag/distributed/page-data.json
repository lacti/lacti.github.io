{"componentChunkName":"component---src-templates-tag-tsx","path":"/tag/distributed/","webpackCompilationHash":"dff243b0bb0545126dc2","result":{"data":{"allMarkdownRemark":{"totalCount":7,"edges":[{"node":{"excerpt":"이호규 / 발표자료왜기획 요구가 높아짐에 따라 성능 문제가 야기됨단일 머신으로 처리가 어려우니 분산으로 간다! network traffic, cpu, memory 등어떻게scale out기능 분리 서버상점 서버, 퀘스트 서버, … 이런 식으로 분리예외 처리도 어렵고 transaction 구성도 어렵다. 그냥 이렇게 안 하는게 좋겠다.통합 독립 서버role…","fields":{"date":"May 28, 2014","slug":"/2014/05/28/ndc14-build-distributed-system/"},"frontmatter":{"title":"분산서버 구축의 ABC - 대규모 분산 시스템을 구축하기 위한 실용적 예와 그 원칙들","tags":["ndc14","distributed"]}}},{"node":{"excerpt":"https://www.slideshare.net/sublee/spof-mmorpg이흥섭요약gevent를 믿고 ØMQ를 통해 객체/서버 시야 개념을 바탕으로 서버간 정보 동기화를 한다.정보가 동기화되었으니 서버가 다중화되었다고 치고, 서버 말고는 다 튼튼하니 SPOF가 없다. (ELB 튼튼, couchbase 튼튼)하지만 무중단 패치나 서버 다운으로 인한 client의 server connection…","fields":{"date":"May 28, 2014","slug":"/2014/05/28/ndc14-distributed-mmorpg-server-without-spof/"},"frontmatter":{"title":"프로젝트K 서버 아키텍처 - SPOF 없는 분산 MMORPG 서버","tags":["ndc14","python","distributed"]}}},{"node":{"excerpt":"뭐라도 좋으니 간단한 분산 시스템을 구현해보자!단일 시스템과 비교하여 성능 혹은 가용성을 높이기 위해 분산 시스템을 설계해야 하는 것이니 일단 네트워크 프로그래밍은 필수이다. 효율을 높이기 위해 얼마나 작업을 잘 쪼개고 합치는가도 고민해야 하고, 장애가 발생했을 때 얼마나 복구될 수 있는지도 고민해야 한다.angdev님의 시스템풀씨 프로그래밍 대회 채점 서버를 nodejs/c++로 구현했다. aws…","fields":{"date":"August 27, 2013","slug":"/2013/08/27/distributed-system-implementation-homework/"},"frontmatter":{"title":"분산 시스템 구현 과제 정리","tags":["distributed","study"]}}},{"node":{"excerpt":"Concurrency Pattern부터 Distributed System까지! 근데 대충함 …Concurrency pattern대충 정리해보자.Wiki: Active ObjectActive Object는 Actor Model 구현하면서 써봤다. asynchronous method invocation과 request scheduling이 관건이다. 지난 글에서는 함수 요청을 functor로 만들어서 요청을 queueing…","fields":{"date":"August 26, 2013","slug":"/2013/08/26/concurrency-pattern-and-distributed-system-study/"},"frontmatter":{"title":"concurrency pattern과 분산 시스템 스터디","tags":["distributed","concurrency","study"]}}},{"node":{"excerpt":"Github: DistWork - simpler지난 글에서 예고한 RpcWork와 Dll 전달 방법에 대해 알아보자.(원래는 WorkGroup까지 보려고 했는데 자세한 구현은 귀찮으니 나중에 기회가 되면 쓰도록 하겠다)RPC 구현RpcWork는 다음의 방법으로 쉽게 구현할 수 있다.원격지에서 수행할 함수를 담는 RpcWork class와 그 수행 결과를 담아 다시 돌려줄 ReturnWork class…","fields":{"date":"June 08, 2013","slug":"/2013/06/08/simple-distributed-system-implementation-3/"},"frontmatter":{"title":"분산 처리 환경 구현 3","tags":["distributed","c#","rpc"]}}},{"node":{"excerpt":"Github: DistWork - simplest지난 번 글에서는 분산 처리 환경에 대한 구조를 대충 알아봤다. 이번 글에서는 대충 알아본 것 중 하나를 선택해서 C#으로 구현을 해볼 것이다.가장 간단해보이는 M-S 모델 (master-slave)을 C#으로 구현해보자.일단 구현하기에 앞서 간단히 설계도를 살펴보자.master에는 여러 slave가 연결한다. 각 연결된 slave는 master…","fields":{"date":"May 07, 2013","slug":"/2013/05/07/simple-distributed-system-implementation-2/"},"frontmatter":{"title":"분산 처리 환경 구현 2","tags":["distributed","c#"]}}},{"node":{"excerpt":"잉여 컴퓨팅 자원을 십분 활용하여 처리량을 늘리기 위한 분산 처리 환경을 구축해보자.\n(hadoop, incredibuild 같은 프로그램을 만드려면 어떤 고민이 필요한지 생각해볼 수 있겠다.)자세하게 파고들면 밑도 끝도 없을테니 간단하게 살펴보자.분산 처리 환경을 구축할 때 적어도 다음의 항목에 대한 고민이 필요하다.플랫폼은 무엇을 사용할 것인가?언어는 무엇을 사용할 것인가?p2p로 만들 것인가, master-slave…","fields":{"date":"April 22, 2013","slug":"/2013/04/22/simple-distributed-system-implementation-1/"},"frontmatter":{"title":"분산 처리 환경 구현 1","tags":["distributed","c#"]}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"distributed"}}}