{"componentChunkName":"component---src-templates-page-tsx","path":"/2019/08/16/actor-model-on-aws-lambda/","webpackCompilationHash":"fe0540f452ea4d417b3b","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>천성이 백엔드 개발자라서 그런지 개인적으로 토이 프로젝트를 해도 꼭 서버가 들어가는 경우가 더 많다. 이런 시스템들을 단순히 코드 형태로 GitHub에만 보관하는 것은 아무래도 좀 아쉬워서 혹시 생각날 때 바로 접속해볼 수 있게 늘 띄워놓고 싶은데 아무래도 비용이 만만치 않다. Docker로 구워두고 필요할 때마다 <code>compose up</code>해서 사용할 수도 있겠지만 역시 이를 위한 환경이 필요하다는 점에서 아쉽다.</p>\n<p>이런 이유로 서버리스에 빠지게 되었고, 이제는 거의 대부분의 프로젝트를 서버리스로 진행하고 있다. 대부분의 경우에는 한 달에 한 번이나 요청이 있을까 말까 하기 때문에 서버리스로 배포된 프로젝트는 요금 최적화 측면에서 굉장히 흡족하다. 사실상 요금이 없기 때문이다.</p>\n<p>하지만 이러한 서비스들에서 만약 state를 관리해야 할 일이 생긴다면 좀 곤란해진다. 왜냐하면 DynamoDB는 RCU/WCU를 관리해야 하는데 예측하기 어렵거나 비용이 생각보다 너무 나오고, MySQL이나 Redis는 dedicated instance를 띄워놓아야 하기 때문에 비용이 너무 많이 나오기 때문이다. 이에 비해 S3는 꽤 괜찮은 선택지처럼 보인다. Lambda에서 S3로부터 파일을 읽어서 적당히 수정해서 다시 S3에 쓰는 것이다. 어차피 요청이 거의 없을 것이기 때문에 S3 request 수도 별로 없을 것이므로 요금도 사실상 거의 안 나올 것이다.</p>\n<p>하지만 가장 큰 문제는 concurrent update다. 예를 들어 게임 내에서 유저의 상태를 변경하는 API가 거의 동시에 요청되어 그걸 처리하기 위한 Lambda instance가 동시에 실행되었다면, 그 둘 모두 S3에서 파일을 가져와서 수정하고 업데이트하는 작업을 <em>동시에</em> 수행하게 될 것이다. 즉, 운이 나쁘면, 한 Lambda instance에서 작업한 내용은 다른 Lambda instance의 덮어쓰기에 의해 완전히 소실될 것이다.</p>\n<p>이를 해결하기 위해 여러 적절한 방법들이 있을지 모르겠지만, 이 글에서는 개인적으로 좋아하는 <a href=\"https://en.wikipedia.org/wiki/Actor_model\">Actor model</a>을 사용하여 문제를 해결해보고자 한다.</p>\n<h3>Actor model</h3>\n<p><a href=\"https://lacti.github.io/2011/08/11/synchronize-function-execution-in-each-object/\">예전에도 다룬 적</a>이 있는데, Actor model의 가장 큰 장점은, actor 내에서 처리되는 메시지의 동시 실행을 막을 수 있다는 것이다. 이를 위해 간단히</p>\n<ul>\n<li>각 actor마다 queue를 가지고 있고,</li>\n<li>어떤 actor에게 처리를 요청할 때에는 그 정보를 message에 담아 queue로 보내고,</li>\n<li>actor를 담당하는 thread가 queue에 message가 도착하면 그걸 처리한다.</li>\n</ul>\n<p>actor를 담당하는 thread가 있기 때문에 한 actor를 여러 thread가 접근하지 않아 actor 내 상태의 동시 수정 문제를 막을 수 있다. 그리고 이 때 thread를 효율적으로 사용하기 위해 다음과 같은 구조를 사용할 수 있다.</p>\n<ul>\n<li>actor의 <code>messageCount</code>를 <code>atomicInc</code>한다.</li>\n<li>이 때 결과가 1이 아니라면 다른 thread가 처리를 하고 있다는 것이므로 message만 enqueue하고 나간다.</li>\n<li>만약 결과가 1이라면 이 actor에 첫 message를 넣은 것이므로 책임지고 처리를 시작한다. 일단 가져온 message를 queue에 enqueue한다.</li>\n<li>\n<p>queue가 empty될 때까지 dequeue해서 처리한다. 그리고 이 때의 개수를 X라고 해보자. 이제 <code>compareAndSwap</code>으로 <code>messageCount</code>가 <code>X</code>면 <code>0</code>으로 바꿔보자.</p>\n<ul>\n<li>성공했다면 처리하는 동안에 아무도 message를 넣지 않은 것이므로 actor를 다른 thread가 필요할 때 처리해줄 수 있도록 놔준다.</li>\n<li>실패했다면 그 사이 누군가 queue에 message를 넣었다는 것이다. <code>messageCount</code>에서 <code>X</code>만큼 <code>atomicDec</code>를 해주고 다시 queue를 처리하러 간다.</li>\n</ul>\n</li>\n</ul>\n<p>이제 message를 actor에 넣는 순간 thread가 할당되어 그 actor로 전달되는 message를 소진할 때까지 처리하는 구조가 된다. 이는 actor마다 thread를 가지고 계속 queue를 polling하거나 blocking wait을 하는 것보다 좀 더 효율적인 시스템을 구성할 수 있게 된다. 게다가 준비물도 <code>atomicInc</code>, <code>atomicDec</code>, <code>compareAndSwap</code>와 <code>ConcurrentQueue</code>나 <code>ConcurrentStack</code> 정도로 매우 간단하므로 쉽게 구축할 수 있다.</p>\n<h3><a href=\"https://github.com/yingyeothon/nodejs-toolkit/tree/master/packages/actor-system\">분산 Actor model</a></h3>\n<p>그럼 만약 이걸 분산으로 만든다면 어떻게 될까? 간단히 모든 준비물이 분산 환경을 지원하면 되겠다. 즉,</p>\n<ul>\n<li><code>atomic</code> <code>+</code>, <code>-</code> 그리고 <code>CAS</code>를 지원하고, <code>concurrent</code> <code>queue</code>나 <code>stack</code> 자료구조를 지원하는 저장소와,</li>\n<li>이 저장소로 적절히 <code>message</code>를 <code>serialize</code> <code>deserialize</code>하며 주고 받기 좋은 언어 런타임이 있으면 되겠다.</li>\n</ul>\n<p>이를 위해,</p>\n<ul>\n<li><code>MySQL</code> 같은 RDBMS에 <code>transaction</code>과 <code>stored procedure</code>를 사용하여 위 연산을 모두 만들어볼 수도 있고,</li>\n<li><code>CAS</code>가 조금 아쉽기는 하지만 그래도 쓸만한 <code>Redis</code>를 사용해볼 수도 있고,</li>\n<li>아니면 위 연산을 지원하는 싸고 튼튼하고 효율 좋은 시스템을 직접 구축해볼 수도 있겠다.</li>\n</ul>\n<p>물론 이는 단순히 위에서 이야기한 actor간 message 교환과 효율적 처리만을 위한 구조이므로, 에러 처리나 요청 추적, actor 다중화 등을 고려하면 좀 더 고민해야 할 것이 많다. 하지만 이 글에서는 <del>조금은 부족하지만</del> <code>Redis</code>를 사용하여 AWS Lambda에 올리기 좋은 분산 Actor model을 만들어볼 것이다.</p>\n<h3><a href=\"https://github.com/yingyeothon/nodejs-toolkit/tree/master/packages/actor-system-redis-support\">Redis를 사용한 Actor model</a></h3>\n<p>위 방법에서는,</p>\n<ul>\n<li><code>messageCount</code>로 보장되는 <code>mutex</code> 구간과,</li>\n<li><code>dump</code> 가능한 <code>concurrent</code> 자료구조를 통해 처리된 <code>messageCount</code>를 한 번에 <code>CAS</code>해보는</li>\n</ul>\n<p>방법을 사용했다. 하지만 <code>Redis</code>에서는 <code>dump</code> 가능한 <code>concurrent</code> 자료구조도 딱히 없고, <code>CAS</code>는 더더욱 없기 때문에, 조금은 더 비효율적이지만 <code>lock</code>을 사용하는 간단한 방법으로 문제를 다시 풀어보자. 다음과 같이 정리해볼 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">enqueue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">while</span><span class=\"mtk1\"> (!(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isEmpty</span><span class=\"mtk1\">()) &amp;&amp; (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tryAcquire</span><span class=\"mtk1\">())) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">null</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> ((</span><span class=\"mtk12\">message</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">dequeue</span><span class=\"mtk1\">()) != </span><span class=\"mtk4\">null</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dispatch</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">release</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><del>await이 풍년이다.</del></p>\n<ol>\n<li>queue에 message를 넣었는데.</li>\n<li>queue가 비어있지 않고 actor의 lock을 획득했을 때에만 처리하러 간다. 만약 다른 thread가 <em>이미 처리했다면</em> queue가 <em>이미 비었을</em> 수도 있고, 혹은 <em>아직 처리는 안 했지만</em> actor는 <em>점유했을</em> 수도 있기 때문이다.</li>\n<li>우여곡절 끝에 actor를 점유했다면, queue를 소진할 때까지 다 처리해본다.</li>\n<li>다 처리가 된 것 같으니까 lock을 풀어보자. <strong>물론 queue가 비어있다고 판단한 시점부터 lock을 푼 시점 사이에는 엄청난 concurrent event가 발생할 수 있다.</strong> 예를 들어 다른 thread가 queue에 새로운 message를 넣었는데 lock이 안 풀려서 점유를 못했고, 원래 처리하던 thread는 그 message 못 보고 lock 풀고 나갈 수 있다.</li>\n<li>그러니까 다시 처음으로 돌아가보자. 만약 lock 풀고도 queue가 비어있다면, 정말 다 비었거나 아니면 다른 thread가 처리하고 있다는 뜻이다. queue가 안 비었어도 lock을 잡을 수 있냐 없냐로 결판이 난다.</li>\n</ol>\n<p>재미있는 점은 이 actor model에 concurrency 수준에 따라 조금 더 최적화해볼 수 있다는 점이다. queue와 lock은 모두 <code>Redis</code>로 구현되는 외부 시스템이므로 이 자원에 접근하기 위해서는 적어도 network latency를 감수해야 한다. <code>queue.isEmpty</code>나 <code>lock.tryAcquire</code>는 이런 비용을 야기할 수 있으므로 다음과 같은 지점을 고민하여 코드 순서를 변경해 좀 더 나은 효율을 추구해볼 수 있다.</p>\n<ol>\n<li>concurrency가 높은 경우 message를 막 넣었어도 다른 thread에 의해 처리될 확률이 더 높을 수도 있다. 이 경우 lock을 걸고 queue의 empty를 확인하면 이미 queue가 empty일 확률이 높다. 따라서 이 경우는 차라리 queue empty 검사하고 lock 거는 것이 더 낫다.</li>\n<li>concurrency가 정말 낮아서 다른 thread가 처리할 가능성이 굉장히 낮은 경우에는 방금 message를 넣었는데 queue가 empty일리가 없다. 때문에 바로 lock 걸로 <em>dequeue</em> 해서 처리하고 unlock한 뒤 queue empty를 검사하는 것이 조금이라도 비용을 더 아낄 수 있다.</li>\n</ol>\n<p>위 코드에서는 별 고민없이 바로 <code>dequeue</code>를 해서 처리를 시도했는데 사실 처리 도중 프로세스 강제 종료와 같은 불의의 사고를 당하면 그 메시지는 소실되어 버린다. 이를 안전하게 보호해주려면 다음과 같이 <code>peek-dequeue</code> 구조를 만들어주는게 차라리 더 낫다. 물론 이 때문에 network latency를 한 번 더 감수해야 함은 어쩔 수가 없다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">null</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">while</span><span class=\"mtk1\"> ((</span><span class=\"mtk12\">message</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">peek</span><span class=\"mtk1\">()) != </span><span class=\"mtk4\">null</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dispatch</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">dequeue</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h4><a href=\"https://github.com/yingyeothon/nodejs-toolkit/blob/master/packages/actor-system-redis-support/src/queue.ts\"><code>Redis</code>로 만드는 <code>queue</code></a></h4>\n<p><code>Redis</code>는 <code>RPUSH</code>와 <code>LPOP</code> 명령을 지원한다. 이는 value type이 collection인 경우 right-push로 새 element를 추가하다가 left-pop으로 첫 번째 element를 가져오는 명령이다.</p>\n<p>물론 <code>LPUSH</code>와 <code>RPOP</code>으로도 구성할 수 있지만 peek을 위해 <code>LINDEX</code>를 쓰려고 <code>RPUSH</code>, <code>LPOP</code>을 사용하였다. <code>LLEN</code>을 써서 queue의 길이를 잴 수 있고, 이것으로 queue empty 여부를 확인할 수 있다.</p>\n<h4><a href=\"https://github.com/yingyeothon/nodejs-toolkit/blob/master/packages/actor-system-redis-support/src/lock.ts\"><code>Redis</code>로 만드는 <code>lock</code></a></h4>\n<p><code>GETSET</code> 명령을 사용하면 된다. 이 명령은 예전 값을 가져오고 지정된 값을 쓰는 <code>atomicExchange</code> 명령어다. 이 값을 사용해서 특정 Key에 대한 값을 1로 바꿨을 때</p>\n<ul>\n<li>반환 값이 0이거나 null이면 lock에 성공한 것이고,</li>\n<li>반환 값이 1이면 이미 누군가 값을 1로 바꿔놓은 상태이므로 lock 실패다.</li>\n</ul>\n<p>unlock을 수행했을 때에는 다시 <code>GETSET</code>을 써서 0으로 바꿔줄 수도 있지만 굳이 <code>Redis</code>에 0으로 기록된 lock tuple을 많이 남겨봐야 좋을게 없으므로 깔끔하게 <code>DEL</code>로 지워주면 되겠다.</p>\n<p>물론 분산 Lock이므로 누가 Lock을 걸었는지 등을 기록해서 추적이 편하게 만들어주는 것도 중요하고, 혹시 lock은 했는데 unlock은 못 한 상태로 thread가 죽은 경우를 대비하기 위해 lock에 TTL을 도입하는 방법도 고민해볼 수 있겠지만 여기서는 간단하게 구현했다.</p>\n<h3><a href=\"https://github.com/yingyeothon/nodejs-toolkit/tree/master/packages/actor-system-aws-lambda-support\">AWS Lambda에서의 Actor model</a></h3>\n<p>AWS Lambda는 최대 수행 시간이 API Gateway에 연동된 경우 30초, 기타 다른 비동기 이벤트에 의해 기동될 경우 최대 900초이다. 이 제약으로 인해 위 actor model을 그대로 쓸 수가 없고 timeout으로 instance가 끝나기 전에 점유한 actor를 놓아주고 나올 필요가 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isAlive</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">Date</span><span class=\"mtk1\">.</span><span class=\"mtk11\">now</span><span class=\"mtk1\">() - </span><span class=\"mtk12\">lambdaEpoch</span><span class=\"mtk1\"> &lt; (</span><span class=\"mtk12\">fromAPI</span><span class=\"mtk1\"> ? </span><span class=\"mtk7\">5</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1000</span><span class=\"mtk1\"> : </span><span class=\"mtk7\">899</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">100</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">enqueue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">isAlive</span><span class=\"mtk1\">() &amp;&amp;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  !(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isEmpty</span><span class=\"mtk1\">()) &amp;&amp;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tryAcquire</span><span class=\"mtk1\">())</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">null</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">isAlive</span><span class=\"mtk1\">() &amp;&amp; (</span><span class=\"mtk12\">message</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">peek</span><span class=\"mtk1\">()) != </span><span class=\"mtk4\">null</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dispatch</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">dequeue</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">release</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk11\">isAlive</span><span class=\"mtk1\">()) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">AWS</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Lambda</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    .</span><span class=\"mtk11\">invoke</span><span class=\"mtk1\">({</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">FunctionName:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">process</span><span class=\"mtk1\">.</span><span class=\"mtk12\">env</span><span class=\"mtk1\">.</span><span class=\"mtk12\">BOTTOM_HALF_LAMBDA_NAME</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">InvocationType:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;Event&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">Qualifier:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">functionVersion</span><span class=\"mtk1\"> || </span><span class=\"mtk8\">&quot;$LATEST&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">Payload:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stringify</span><span class=\"mtk1\">(</span><span class=\"mtk3\">/* something for next generation */</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    .</span><span class=\"mtk11\">promise</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Lambda가 시작될 때의 <code>Date.now()</code> 값을 어딘가 기록해두고, <code>isAlive</code> 함수에서 기대 생존 시간과 비교해서 아직 처리를 더 할 수 있는지 확인한다. 그리고 더 처리할게 남았는데 <code>isAlive</code>하지 않아서 종료된 경우 다음 Lambda를 실행해서 작업을 이어서 처리할 수 있게 해준다. 예를 들어 <code>actorName</code> 같은 것을 넘기면 작업을 이어서 처리할 수 있을 것이다. 이 구조가 커널의 interrupt 처리와 비슷하기 때문에 이름을 <code>BOTTOM_HALF_LAMBDA</code>라고 붙여주었다. 물론 <code>isAlive</code> 실패에 의해 loop가 종료된 것인지는 좀 더 조건을 구분해야 하지만 이 글에서는 그 부분을 심각하게 여기지 않고 대충 넘어갔다.</p>\n<p><code>BOTTOM_HALF_LAMBDA_NAME</code>은 <code>process.env</code>를 통해 전달되는 값인데 <code>serverless.yml</code>을 통해 다음과 같이 정해줄 수 있다. 물론 <code>serverless.yaml</code>에 <code>bottomHalf</code>라고 Lambda 함수를 등록해두었을 경우를 가정한 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"yaml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">environment</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">BOTTOM_HALF_LAMBDA</span><span class=\"mtk1\">: </span><span class=\"mtk8\">${self:service.name}-${self:provider.stage}-bottomHalf</span></span></code></pre>\n<p>당연한 이야기지만 API Gateway에 연결될 Lambda와 bottomHalf로 기동될 Lambda는 timeout이 다르므로 같은 Lambda를 사용할 수 없다. 때문에 조금은 귀찮지만 Lambda를 따로 등록해서 사용해야 한다.</p>\n<h3>한계</h3>\n<p>처음에 <code>Redis</code>가 dedicated라서 안 쓴다더니 lock과 queue 관리를 위해서 써버렸다. 사실 비용이 조금 더 나오긴 하지만 queue는 SQS로 대체할 수 있고, lock은 현재 딱히 좋은 비용 최적화의 대체제가 없다.</p>\n<p>하지만 다시 처음으로 돌아가서 보면(?) 이걸 하려는 목적 자체가 거의 요청되지 않는 서비스의 비용 최적화였다. 그럼 SQS 요청도 없을테니 비용도 거의 없을거고 lock만 어떻게 해결하면 되겠는데 이 때 보게 된 것이 AWS Lightsail의 1 vCPU, 512MB, 20GB SSD, 1TB network traffic 사양에 <em>3.50USD/month 요금인</em> instance 였다. 이거라면 위처럼 별로 복잡하지 않는 일을 처리하는 Redis는 정말 무난하게 돌아갈 것이다. 물론 여기에 MySQL을 띄우는 방법도 있겠지만 아무래도 managed가 아니다 보니 걱정되는 점이 좀 있다.</p>\n<p>actor의 lock과 queue라는 임시 상태를 관리하기 좋은 서버리스 서비스가 나오길 기대하면서 그 전까지는 한 달에 $3.5가 아깝지 않을 정도로 개인 프로젝트를 많이 띄워두자는 마음으로 현재 사용하고 있다.</p>\n<h3>응용</h3>\n<p>이제 AWS Lambda에서 actor model로 동일한 actor에 대한 처리는 하나의 Lambda instance에서만 수행됨을 보장할 수 있게 되었다. 이제 처음 이야기했던 서버리스 저장소가 가능해진다.</p>\n<ol>\n<li>API Gateway로부터 수정 요청이 들어온다.</li>\n<li>APIGatewayProxyEvent로부터 actor name을 적절히 결정하고, 수정을 위한 message를 만든다.</li>\n<li>actor에게 message를 보낸다.</li>\n<li>처리를 시도해본다. 만약 lock을 못 잡거나 queue가 empty라면 동시에 요청된 다른 Lambda에 의해 처리되고 있다는 것이다.</li>\n</ol>\n<p>4)에 의해 동시 수정에 의해 한 쪽의 변경점이 소실되는 문제는 막을 수 있다. 하지만 요청한 API의 결과로 바로 수정된 내용을 받아볼 수 없을 수는 있다. 때문에 다음의 한계를 고민해야 한다.</p>\n<ul>\n<li>수정을 요청한 API가 그것이 반영될 때까지 확인을 반복할텐데, 얼마씩 쉬면서 언제까지 기다려볼지 잘 조정해야 한다.</li>\n<li>확률적으로, APIGateway LambdaProxy에서 다른 요청들을 계속 처리해서, 그 API 요청을 기다리는 사용자는 남의 요청을 처리해주는 것을 계속 기다리게 될 수 있다. 남의 것을 얼마나 처리할 것인지 시간을 잘 조정해야 한다.</li>\n</ul>\n<p>즉 API Latency를 고민해서 적절한 time limit을 지정해야겠다. 이에 대한 자세한 내용은 추후 <strong>Leaderboard 만들기</strong> 에서 알아보고, WebSocket을 사용한 callback에 대해서는 <strong>여름 새벽 앱 개발기</strong> 에서 알아보기로 하겠다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"천성이 백엔드 개발자라서 그런지 개인적으로 토이 프로젝트를 해도 꼭 서버가 들어가는 경우가 더 많다. 이런 시스템들을 단순히 코드 형태로 GitHub…","fields":{"date":"August 16, 2019","shortdesc":""},"frontmatter":{"title":"AWS Lambda와 Actor model","tags":["aws","serverless","lambda","actor"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/08/16/actor-model-on-aws-lambda/"}}}