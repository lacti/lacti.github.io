{"version":3,"sources":["webpack:////home/lacti/tmp/lacti-blog/src/templates/tags.js","webpack:////home/lacti/tmp/lacti-blog/.cache/gatsby-browser-entry.js","webpack:////home/lacti/tmp/lacti-blog/.cache/public-page-renderer.js","webpack:////home/lacti/tmp/lacti-blog/.cache/public-page-renderer-prod.js","webpack:////home/lacti/tmp/lacti-blog/src/components/seo.js","webpack:////home/lacti/tmp/lacti-blog/src/utils/tags.js","webpack:////home/lacti/tmp/lacti-blog/src/components/header.js","webpack:////home/lacti/tmp/lacti-blog/src/components/layout.js","webpack:////home/lacti/tmp/lacti-blog/src/components/item.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","_components_item__WEBPACK_IMPORTED_MODULE_5__","Tags","_ref","pageContext","data","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","title","a","createElement","className","map","_ref2","_ref2$node","node","excerpt","_ref2$node$fields","fields","path","date","_ref2$node$frontmatte","frontmatter","tags","key","to","propTypes","PropTypes","shape","string","isRequired","number","arrayOf","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","React","createContext","object","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","pathname","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","asTagPath","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","Layout","children","_856328897","Fragment","header","paddingTop","Date","getFullYear","href","_utils_tags__WEBPACK_IMPORTED_MODULE_3__","Item"],"mappings":"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","file":"component---src-templates-tags-js-495fa52aad6a26c98563.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Item from \"../components/item\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const title = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <h3>{title}</h3>\n      <ul className=\"post-list\">\n        {edges.map(\n          ({\n            node: {\n              excerpt,\n              fields: { path, date },\n              frontmatter: { title, tags },\n            },\n          }) => {\n            return (\n              <Item\n                key={path}\n                excerpt={excerpt}\n                path={path}\n                date={date}\n                title={title}\n                tags={tags}\n              />\n            )\n          }\n        )}\n      </ul>\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string.isRequired,\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              tags: PropTypes.arrayOf(PropTypes.string).isRequired,\n            }),\n            fields: PropTypes.shape({\n              path: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 240)\n          fields {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n          }\n          frontmatter {\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/*\n * This function would be referenced from `gatsby-node.js`\n * so it cannot use ES6 module syntax to export.\n */\nmodule.exports.asTagPath = tag => {\n  switch (tag) {\n    case \"c++\":\n      return \"cplusplus\"\n    case \"c#\":\n      return \"csharp\"\n    default:\n      return tag\n  }\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ title, children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={title || data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\nimport { asTagPath } from \"../utils/tags\"\n\nconst Item = ({ excerpt, path, date, title, tags }) => (\n  <li className=\"post-item\">\n    <Link to={path} title={excerpt}>\n      <h1>{title}</h1>\n    </Link>\n    <div>\n      <h2 className=\"post-item-date\">{date}</h2>\n      {tags.map(tag => (\n        <div key={`${path}_${tag}`} className=\"chip\">\n          <Link to={`/tags/${asTagPath(tag)}`}>{tag}</Link>\n        </div>\n      ))}\n    </div>\n    <p>{excerpt}</p>\n  </li>\n)\n\nItem.propTypes = {\n  excerpt: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string).isRequired,\n}\n\nexport default Item\n"],"sourceRoot":""}