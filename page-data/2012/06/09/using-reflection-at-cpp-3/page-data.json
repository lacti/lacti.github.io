{"componentChunkName":"component---src-templates-page-tsx","path":"/2012/06/09/using-reflection-at-cpp-3/","webpackCompilationHash":"5db5254ab231d8fbde9d","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>지난 #2에서는 <code>class_t</code>, <code>field_t</code> 자체가 가상 함수를 갖고, <code>class_impl_t</code>와 <code>field_impl_t</code>가 이 class를 상속 받아서 구현하는 방식을 사용하였다. 사실 굳이 이 <code>impl_t</code> class 들은 노출될 필요가 없으므로 이를 감추도록 해보자.</p>\n<p>그리고 다 완성된 type을 register함에 있어, 따로 <code>register_class</code>, <code>register_field</code> 함수를 직접 불러서 등록을 하였는데, 이것을 <a href=\"https://en.wikipedia.org/wiki/X_Macro\">X-Macro pattern</a>을 사용하여 개선해보도록 하자.</p>\n<p><strong>C++ Template Metaprogramming</strong>의 형식 삭제(type erasure) 부분을 읽다보니, 굳이 <code>impl_t</code> class를 <code>class_t</code>, <code>field_t</code> 외부로 노출할 필요가 없다는 것을 깨달았다.<br>\n(물론 위 책에서 언급하는 예제는 복사 및 대입 가능한 대상이기 때문에 복사/대입/소멸 등도 고려되어 있지만, 본 글에서는 단지 <code>impl_t</code>를 숨기기 위한 용도 정도로만 사용한다.)</p>\n<p>type erasure에 대한 개념을 간단히 적어보면 reflection을 만든다는 것은 결국 runtime까지 type 정보를 유지한다는 것이다. type 정보를 코드 하나하나에 다 열거하는 것은 쓸데없는 노동력을 요구하므로 적절히 template을 써서 type 정보를 capture한다.</p>\n<p>문제는 이렇게 type capture를 한 template class는 일반 type으로 지칭할 수 없다는 귀찮은 점이 있다. 예를 들어서,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_t</span><span class=\"mtk1\"> {};</span></span></code></pre>\n<p>위와 같은 <code>class_t</code>에 대해, <code>class_t&#x3C;int></code>와 같은 type 정보를 넣어 template class를 구체화했다면, 이 class는 <code>class_t</code>가 아니고 <code>class_t&#x3C;int></code>이다. 좀 더 엄밀히 말하면 구체화되지 않은 <code>class_t</code>라는 class는 없는 것이다.</p>\n<p>때문에 지난 번에는 <code>class_t</code>와 그것을 상속받는 <code>class_impl_t</code>를 만들고, type 정보를 <code>class_impl_t</code>에만 국한시켜 실제 사용하는 <code>class_t</code>에서는 따로 type 정보 없이 사용할 수 있는 것이다.</p>\n<p>하지만 외부 register 함수에서 <code>class_impl_t</code>, <code>field_impl_t</code> 객체를 직접 생성해서 <code>class_t</code>, <code>field_t</code>에 넣어주는 영 좋지 못한 구조를 보였다. 이를 함수 template을 사용하여 보다 나은 방법으로 개선해보자.</p>\n<p>변경된 <code>class_t</code>는 다음과 같다. (<code>class_impl_t</code>는 삭제되었다, 그리고 지난 번과 중복되는 내용은 삭제한다.)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">class_t</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> typeinfo&lt;_Ty&gt;&amp;, std::string </span><span class=\"mtk12\">name</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">inf</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">impl_t</span><span class=\"mtk1\">&lt;_Ty&gt;), </span><span class=\"mtk11\">class_name</span><span class=\"mtk1\">(name) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Class</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    _Class* </span><span class=\"mtk11\">new_instance</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">reinterpret_cast</span><span class=\"mtk1\">&lt;_Class*&gt;(</span><span class=\"mtk12\">inf</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">new_instance</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">interface_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\">* </span><span class=\"mtk11\">new_instance</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">impl_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">interface_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\">* </span><span class=\"mtk11\">new_instance</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> new _Ty; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::shared_ptr&lt;</span><span class=\"mtk10\">interface_t</span><span class=\"mtk1\">&gt; inf;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>지난 번과 동일한 부분을 과감히 생략하고 변경된 부분만 모아보면 위와 같다.</p>\n<ul>\n<li><code>class_t</code> 내부에 <code>interface_t</code>와 <code>impl_t</code>가 들어갔다.</li>\n<li><code>impl_t</code>는 template을 사용하여 실 type 정보를 capture할 class이고,</li>\n<li><code>interface_t</code>는 <code>impl_t</code>를 일반적으로 접근하기 위한 interface class이다.</li>\n</ul>\n<p><code>class_t</code>의 생성자가 type 정보를 직접 받기 위해 template 함수로 작성되었다. 재밌는 점은 함수 template 생성자에 type 정보를 넘기기 위해 <code>&#x3C;></code>으로 명시해주는 것은 쓸 수가 없어 이를 적당히 회피하기 위해 type 정보를 컴파일러에게 알려주기 위해 class 하나를 추가한다는 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">typeinfo</span><span class=\"mtk1\"> {};</span></span></code></pre>\n<p>그래서 <code>class_t</code> 생성자는 <code>typeinfo&#x3C;_Ty></code> 객체를 인자로 받는 것이고, 이 인자를 통해 어떤 <code>_Ty</code>을 넘기려 하는 것인지 type 추론이 가능해진다. 그러면 해당 type으로 생성자가 구체화가 되고, 그 생성자에서는 <code>_Ty</code> 정보를 사용하여 <code>impl_t</code> 객체를 만들고, 이 객체를 <code>interface_t</code> 변수에 넣어두는 것이다. 그러면 기존 <code>class_t</code>의 virtual 함수를 non-virtual 함수로 만들고 수행에 대해서는 내부 <code>interface_t</code> 객체를 통해 적절히 delegate해주면 된다.</p>\n<p><code>field_t</code> 역시 위와 동일한 방법으로 개선하였다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">field_t</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_FieldTy</span><span class=\"mtk1\"> (_ObjTy::*</span><span class=\"mtk12\">Field</span><span class=\"mtk1\">), std::string </span><span class=\"mtk12\">name</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">inf</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">impl_t</span><span class=\"mtk1\">&lt;_ObjTy, _FieldTy&gt;(field)), </span><span class=\"mtk11\">field_name</span><span class=\"mtk1\">(name) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">interface_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\">* </span><span class=\"mtk11\">ptr</span><span class=\"mtk1\">(</span><span class=\"mtk4\">void</span><span class=\"mtk1\">* </span><span class=\"mtk12\">obj_addr</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> std::type_info&amp; </span><span class=\"mtk11\">type</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">impl_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">interface_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">impl_t</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_FieldTy</span><span class=\"mtk1\"> (_ObjTy::*</span><span class=\"mtk12\">Field</span><span class=\"mtk1\">)) : </span><span class=\"mtk11\">field</span><span class=\"mtk1\">(Field) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> std::type_info&amp; </span><span class=\"mtk11\">type</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> typeid(_FieldTy); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\">* </span><span class=\"mtk11\">ptr</span><span class=\"mtk1\">(</span><span class=\"mtk4\">void</span><span class=\"mtk1\">* </span><span class=\"mtk12\">obj_addr</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_FieldTy</span><span class=\"mtk1\"> (_ObjTy::*</span><span class=\"mtk12\">field</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::shared_ptr&lt;</span><span class=\"mtk10\">interface_t</span><span class=\"mtk1\">&gt; inf;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>생성자를 template 함수로 만드는 방법은 <code>class_t</code>와 똑같은데, 아까 만든 <code>typeinfo</code>를 사용하여 type 정보를 넘기지는 않는다.<br>\n기존의 <code>field_impl_t</code>에서 실제 field까지 template 인자로 받았던 것에 반해, 새로운 구조에서는 data member pointer를 생성 인자로 받기 때문에 <code>_FieldTy (_ObjTy::*Field)</code>이 인자를 통해서 충분한 type 유추가 가능하기 때문이다. (따라서 <code>impl_t</code>도 data member pointer를 인자로 갖도록 수정되었다.)</p>\n<p>그 이외에 <code>impl_t</code> 객체를 만들어서 <code>interface_t</code>로 지칭하는 것이나, <code>field_t</code>의 작업 함수들이 수행을 <code>interface_t</code> 객체로 위임하는 것은 위 <code>class_t</code>에서 언급했던 내용과 동일하다.</p>\n<p>이제 reflection 정보를 register하는 코드를 개선할 것이다. 기존에는 외부로 노출된 template 함수를 통해 직접 type 및 이름 정보를 입력하여 하나씩 정보를 등록하였다.</p>\n<p>하지만 각 field를 정의할 때마다 어떤 class에 대한 field인지 매번 써주는 것은 비효율적이므로, 이를 개선하기 위해 다음과 같이 register를 도와주면서 어떤 class에 대한 register인지 type 정보를 갖고 있는 class를 설계해보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection_register_helper_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> _ObjTy target_type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">register_class</span><span class=\"mtk1\">(std::string </span><span class=\"mtk12\">class_name</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">register_field</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_FieldTy</span><span class=\"mtk1\"> (_ObjTy::*</span><span class=\"mtk12\">Field</span><span class=\"mtk1\">), std::string </span><span class=\"mtk12\">field_name</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> reflection_register_helper_t&lt;</span><span class=\"mtk4\">_ObjTy</span><span class=\"mtk1\">&gt;::</span><span class=\"mtk11\">register_class</span><span class=\"mtk1\">(std::string </span><span class=\"mtk12\">class_name</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    reflection_base::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">().</span><span class=\"mtk11\">add_class_name</span><span class=\"mtk1\">(&amp;typeid(_ObjTy), class_name);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    reflection_base::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">().</span><span class=\"mtk11\">add_class</span><span class=\"mtk1\">(class_name,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">class_t</span><span class=\"mtk1\">(</span><span class=\"mtk11\">typeinfo</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">_ObjTy</span><span class=\"mtk1\">&gt;(), class_name));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> reflection_register_helper_t&lt;</span><span class=\"mtk4\">_ObjTy</span><span class=\"mtk1\">&gt;::</span><span class=\"mtk11\">register_field</span><span class=\"mtk1\">(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_FieldTy</span><span class=\"mtk1\"> (_ObjTy::*</span><span class=\"mtk12\">Field</span><span class=\"mtk1\">), std::string </span><span class=\"mtk12\">field_name</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char</span><span class=\"mtk1\">* class_name = reflection_base::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        .</span><span class=\"mtk11\">class_name_from_typeinfo</span><span class=\"mtk1\">(&amp;typeid(_ObjTy));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(class_name);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    reflection_base::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">().</span><span class=\"mtk11\">add_field</span><span class=\"mtk1\">(class_name, field_name,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">field_t</span><span class=\"mtk1\">(Field, field_name));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>reflection_register_helper_t</code> class는 template으로 type 정보를 받고 이를 유지한다. 따라서 <code>register_class()</code> 함수나 <code>register_field()</code> 함수는 따로 어떤 class에 대한 정보인지 type 정보를 받을 필요가 없다.</p>\n<p>이제 매크로를 통해 다음과 같이 대신 등록해주는 코드를 만들어볼 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REFLECTION_REGISTER_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">class_name</span><span class=\"mtk4\">)  </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static struct </span><span class=\"mtk10\">_register_</span><span class=\"mtk12\">##class_name</span><span class=\"mtk4\"> :</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            public reflection::</span><span class=\"mtk10\">reflection_register_helper_t</span><span class=\"mtk4\">&lt;class_name&gt; { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">       _register_</span><span class=\"mtk12\">##class_name</span><span class=\"mtk4\">() </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            </span><span class=\"mtk11\">register_class</span><span class=\"mtk4\">(#class_name);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REFLECTION_REGISTER_FIELD</span><span class=\"mtk4\">(</span><span class=\"mtk12\">type, field_name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            register_field</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">type</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\">(</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\">target_type::field_name, </span><span class=\"mtk12\">#field_name</span><span class=\"mtk4\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REFLECTION_REGISTER_END</span><span class=\"mtk4\">()  </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        } </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    } __AUTO_NAME;</span></span></code></pre>\n<p>(<code>__AUTO_NAME</code>은 <code>__COUNTER__</code>를 사용하여 겹치지 않는 아무 이름이나 만들어주는 매크로이다. <a href=\"%7B%25%20post_url%202012-05-12-lambda-and-raii-2%20%25%7D\">lambda 와 RAII #2</a>)</p>\n<p><code>REFLECTION_REGISTER_BEGIN</code>, <code>FIELD</code>, <code>END</code> 매크로를 사용하면 등록하고자 하는 class의 정보를 template argument로 갖는 reflection<em>register</em>helper<em>t에 대한 상속 class를 만든다. 그리고 생성자에서 class, field 정보를 등록하는 코드를 차례대로 만들어둔 뒤, <code>END</code> 매크로에서 이 `register</em>class`에 대한 변수를 하나 만들게 된다.</p>\n<p>만약 이 변수가 전역 변수로 선언된다면 프로그램이 실행될 때 해당 객체가 초기화되면서 생성자의 코드가 실행될 것이고, 그 때 해당 type에 대한 reflection 정보가 등록될 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">REFLECTION_REGISTER_BEGIN</span><span class=\"mtk1\">(</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">REFLECTION_REGISTER_FIELD</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, index)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">REFLECTION_REGISTER_FIELD</span><span class=\"mtk1\">(std::string, name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">REFLECTION_REGISTER_END</span><span class=\"mtk1\">()</span></span></code></pre>\n<p>(<code>reflection_register_helper_t</code> class가 <code>user_t</code>에 대한 type 정보를 <code>target_type</code>이라고 지칭할 수 있게 해주어서, <code>FIELD</code>를 등록할 때 다시 <code>user_t</code>를 언급할 필요가 없어졌다!)</p>\n<p>이제 <a href=\"https://en.wikipedia.org/wiki/X_Macro\">X-Macro pattern</a> 방법을 정의한 구조체에 대한 type 정보를 등록하는 것을 자동화해볼 것이다. 이 방법의 핵심은 구조체 선언을 매크로로 하고, 선언된 header 파일을 여러 번 incldue하고, 그 때마다 선언 매크로를 다른 것으로 치환(undef/define)하여 사용하는 것이다.</p>\n<p>먼저 선언을 위한 매크로를 정의해보면 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifndef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__DECLARE_TYPE_MACRO_DEFINED__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__DECLARE_TYPE_MACRO_DEFINED__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">DECLARE_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">class_name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    struct </span><span class=\"mtk10\">class_name</span><span class=\"mtk4\">; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    typedef std::shared_ptr</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">class_name</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> class_name</span><span class=\"mtk12\">##_ref</span><span class=\"mtk4\">; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    struct </span><span class=\"mtk10\">class_name</span><span class=\"mtk4\"> : public </span><span class=\"mtk10\">object_t</span><span class=\"mtk4\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">DECLARE_FIELD</span><span class=\"mtk4\">(</span><span class=\"mtk12\">type, field_name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        type field_name;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">DECLARE_END</span><span class=\"mtk4\">()   </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk14\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">class_name</span><span class=\"mtk4\">)        </span><span class=\"mtk11\">DECLARE_BEGIN</span><span class=\"mtk4\">(class_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_FIELD</span><span class=\"mtk4\">(</span><span class=\"mtk12\">type, field_name</span><span class=\"mtk4\">)  </span><span class=\"mtk11\">DECLARE_FIELD</span><span class=\"mtk4\">(type, field_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk4\">()                    </span><span class=\"mtk11\">DECLARE_END</span><span class=\"mtk4\">()</span></span></code></pre>\n<p>(본 글에서는 생략했지만 <code>DECLARE</code>로 정의된 모든 class는 <code>object_t</code>를 상속받고, <code>object_t</code>는 <code>reflection_class_t</code>를 상속받기 때문에 reflection 정보를 가질 수 있다.)</p>\n<p><code>STRUCT_BEGIN</code>, <code>FIELD</code>, <code>END</code> 매크로는 선언(declare) 단계에서는 <code>DECLARE_BEGIN</code>, <code>FIELD</code>, <code>END</code>를 사용하도록 작성이 되어있다.</p>\n<p>이제 다음과 같이 <code>user_t</code>를 정의하면 (user.h)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk1\">(</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">STRUCT_FIELD</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, index)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">STRUCT_FIELD</span><span class=\"mtk1\">(std::string, name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk1\">()</span></span></code></pre>\n<p>위 매크로에 의해 다음과 같이 번역될 것이다. (<code>STRUCT</code> -> <code>DECLARE</code>)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">user_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> index;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::string name;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>이제, <code>STRUCT_BEGIN</code>, <code>FIELD</code>, <code>END</code>를 reflection을 등록하기 위한 매크로로 치환한다. (type<em>register</em>macro.h)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_FIELD</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_FIELD</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">class_name</span><span class=\"mtk4\">)        </span><span class=\"mtk11\">REFLECTION_REGISTER_BEGIN</span><span class=\"mtk4\">(class_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_FIELD</span><span class=\"mtk4\">(</span><span class=\"mtk12\">type, field_name</span><span class=\"mtk4\">)  </span><span class=\"mtk11\">REFLECTION_REGISTER_FIELD</span><span class=\"mtk4\">(type, field_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk4\">()                    </span><span class=\"mtk11\">REFLECTION_REGISTER_END</span><span class=\"mtk4\">()</span></span></code></pre>\n<p>이제 다시 user.h 파일을 include하면, 이 때의 코드는 다음과 같이 번역될 것이다. (<code>STRUCT</code> -> <code>REFLECTION_REGISTER</code>)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">REFLECTION_REGISTER_BEGIN</span><span class=\"mtk1\">(</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">REFLECTION_REGISTER_FIELD</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, index)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">REFLECTION_REGISTER_FIELD</span><span class=\"mtk1\">(std::string, name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">REFLECTION_REGISTER_END</span><span class=\"mtk1\">()</span></span></code></pre>\n<p>이에 대한 전체적인 코드 구조는 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;object.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;user.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;type_register_macro.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;user.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argc</span><span class=\"mtk1\">, </span><span class=\"mtk4\">char</span><span class=\"mtk1\">* </span><span class=\"mtk12\">argv</span><span class=\"mtk1\">[]) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> reflection::</span><span class=\"mtk10\">class_t</span><span class=\"mtk1\">* clazz = reflection::class_t::</span><span class=\"mtk11\">from_name</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;user_t&quot;</span><span class=\"mtk1\">);</span></span></code></pre>\n<p><code>DECLARE</code> 매크로 정의를 포함한 object.h를 먼저 include하면, 그 뒤에 오는 user.h를 include하는 시점에는 구조체 선언이 이루어진다. 그리고 <code>REFLECTION_REGISTER</code> 매크로로 치환하는 type<em>register</em>macro.h를 include한 이후에 오는 user.h에서는 reflection 정보를 자동으로 등록하는 코드가 생성될 것이다.</p>\n<p>본 글에서는 <code>class_impl_t</code>, <code>field_impl_t</code>를 숨기는 작업과, 매크로 치환과 #include를 여러 번 하는 방법을 사용하여 type 정보를 자동으로 등록하는 방법에 대해 알아보았다.</p>\n<p>하지만 #include를 여러 번 하는 방법은, #pragma once나 #ifndef, #define ~ #endif을 통한 중복 include 방지를 사용할 수 없기 때문에 (혹은 사용한다고 하면 번거롭게 구조체 정의할 때마다 앞 뒤로 매크로 선언을 따로 해주어야 하기 때문에) include가 복잡하게 꼬이는 구조가 발생하면 여러 번 include 되어 문제가 발생할 수 있다.</p>\n<p>매크로 상태를 사용하여 이를 해결할 수는 있는데 이에 대해서는 다음 글에 알아보도록 하자.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"지난 #2에서는 class_t, field_t 자체가 가상 함수를 갖고, class_impl_t와 field_impl_t가 이 class를 상속 받아서 구현하는 방식을 사용하였다. 사실 굳이 이 impl_t class…","fields":{"date":"June 09, 2012"},"frontmatter":{"title":"c++에서 reflection 사용하기 3","tags":["c++","reflection"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/06/09/using-reflection-at-cpp-3/"}}}