{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/07/19/check-type-equality-and-assignablity-by-template/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<ul>\n<li>runtime에 <code>typeid</code>를 써서 객체 type의 동등성(Same)을 확인하고,</li>\n<li><code>dynamic_cast</code>를 써서 객체간의 대입가능성(Assignable)을 확인할 수 있다.</li>\n</ul>\n<p>하지만 이런 것을 확인하기 위해 runtime을 소모하는 것은 너무 아까운 일이다. 고로 template을 써보자.<br>\n아래의 예제는 두 class, C1과 C2를 통해 진행된다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">C1</span><span class=\"mtk1\"> {};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">C2</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">C1</span><span class=\"mtk1\"> {};</span></span></span></code></pre>\n<h3>동등성 확인</h3>\n<p>type 간의 동등성을 확인하는 것은 매우 간단하다. template의 specialization을 쓰면 된다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_Type1</span><span class=\"mtk1\">, </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_Type2</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IsSame</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">enum</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">value</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">template</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_Type1</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IsSame</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">_Type1</span><span class=\"mtk1\">, </span><span class=\"mtk10\">_Type1</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">enum</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">value</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p><code>IsSame</code>을 사용할 때, 비교하는 두 class의 type이 다르다면 위 template이 사용될 것이다. 여기의 value 값은 false다.<br>\n만약 두 type이 같다면, type이 같은 경우로 specialization 된 아래의 template이 사용된다. 따라서 value는 true이다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;%d %d %d %d</span><span class=\"mtk6\">\\n</span><span class=\"mtk8\">&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk10\">IsSame</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">C1</span><span class=\"mtk1\">, </span><span class=\"mtk10\">C1</span><span class=\"mtk1\">&gt;::value, </span><span class=\"mtk10\">IsSame</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">C1</span><span class=\"mtk1\">, </span><span class=\"mtk10\">C2</span><span class=\"mtk1\">&gt;::value,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                        </span><span class=\"mtk10\">IsSame</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">C2</span><span class=\"mtk1\">, </span><span class=\"mtk10\">C2</span><span class=\"mtk1\">&gt;::value, </span><span class=\"mtk10\">IsSame</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">C2</span><span class=\"mtk1\">, </span><span class=\"mtk10\">C1</span><span class=\"mtk1\">&gt;::value);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 수행 결과: 1 0 1 0</span></span></span></code></pre>\n<p>이 모든 것이 compile time에 compiler가 판단해주므로 runtime 부담이 없다.</p>\n<h3>대입 가능성 확인</h3>\n<p>대입 가능성(assignable)을 판단할 때는, 두 type을 from과 to로 나누어 생각하는게 편하다.<br>\nFROM is assignable TO 라는 개념으로 생각해볼 때, TO가 base class, FROM이 derive class가 되는 것이다.</p>\n<p>이걸 compiler가 판단해주려면 함수의 overloading 판정을 사용하면 된다.\ncompiler는 최대한 근접한 type의 인자를 갖는 함수를 호출해준다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_From</span><span class=\"mtk1\">, </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_To</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IsAssignable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char</span><span class=\"mtk1\"> IncorrectSize;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\">  CorrectSize;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_From</span><span class=\"mtk1\">         </span><span class=\"mtk11\">Instantiate</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">CorrectSize</span><span class=\"mtk1\">   </span><span class=\"mtk11\">Check</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_To</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IncorrectSize</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Check</span><span class=\"mtk1\">(...);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">enum</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">value</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(CorrectSize) == </span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Check</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Instantiate</span><span class=\"mtk1\">()))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>compiler가 compile time에 비교를 해야하므로 가장 만만한건 <code>sizeof</code> 연산자이다.<br>\n크기가 다른 두 type을 반환하도록 적절히 typedef를 걸어두고, From type이 <code>const To&#x26;</code> 를 인자로 받는 Check와 그게 아닌 경우 <code>...</code> 중 어느 것이 호출되어 반환 값이 결정되는가를 보는 것이다. 그 반환 값의 type, 그리고 그 type에 대한 <code>sizeof</code> 는 모두 compile time에 결정될 수 있기 때문에 대입 가능한 경우에는 적절히 value가 설정될 것이다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;%d %d %d %d</span><span class=\"mtk6\">\\n</span><span class=\"mtk8\">&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk10\">IsAssignable</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">C1</span><span class=\"mtk1\">, </span><span class=\"mtk10\">C1</span><span class=\"mtk1\">&gt;::value, </span><span class=\"mtk10\">IsAssignable</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">C1</span><span class=\"mtk1\">, </span><span class=\"mtk10\">C2</span><span class=\"mtk1\">&gt;::value,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                        </span><span class=\"mtk10\">IsAssignable</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">C2</span><span class=\"mtk1\">, </span><span class=\"mtk10\">C2</span><span class=\"mtk1\">&gt;::value, </span><span class=\"mtk10\">IsAssignable</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">C2</span><span class=\"mtk1\">, </span><span class=\"mtk10\">C1</span><span class=\"mtk1\">&gt;::value);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 수행 결과: 1 0 1 1</span></span></span></code></pre>\n<p>재밌는 것은 위 방법으로 Assignable을 판단할 경우 만능 <code>void*</code> 에 대해서는 모든 pointer type이 다 통과해버린다는 것인데, 그런 것은 위에서 구현한 <code>IsSame</code>과 적절히 섞어서 가려낼 수 있다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk6 { color: #D7BA7D; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"runtime에 typeid를 써서 객체 type의 동등성(Same)을 확인하고, dynamic_cast를 써서 객체간의 대입가능성(Assignable)을 확인할 수 있다. 하지만 이런 것을 확인하기 위해 runtime…","fields":{"date":"July 19, 2011","shortdesc":"","slug":"/2011/07/19/check-type-equality-and-assignablity-by-template/"},"frontmatter":{"title":"template을 사용한 type간 동등성, 대입가능성","tags":["c++","template"]}}},"pageContext":{"slug":"/2011/07/19/check-type-equality-and-assignablity-by-template/","older":{"slug":"/2011/07/13/generic-interface-implemented-by-template/","title":"template에 의한 generic interface 정의"},"newer":{"slug":"/2011/07/20/public-private-at-c++/","title":"class의 public과 private"}}},"staticQueryHashes":["848695393"]}