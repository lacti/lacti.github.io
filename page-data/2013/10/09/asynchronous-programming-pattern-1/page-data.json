{"componentChunkName":"component---src-templates-page-tsx","path":"/2013/10/09/asynchronous-programming-pattern-1/","webpackCompilationHash":"34e50d707ffb94014347","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>일련의 순서로 호출되어야 하는 비동기 함수들이 있다. 이 때 사용되는 method chaining을 사용한 async/then 패턴과 수행할 비동기 context를 갖고 직접 비동기 수행을 연쇄적으로 진행하는 async_worker 패턴을 알아보자.</p>\n<p>연속적인 비동기 작업을 처리할 때에는 동기적 프로그래밍과는 다르게 코드를 순차적으로 서술할 수 없다. 만약 아래와 같이 작성된다면, <code>async_work2</code>나 <code>async_work3</code>는 그 위의 <code>async_work1</code> 혹은 <code>async_work2</code>가 완료되기 전에 시작될 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">async_work1</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">async_work2</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">async_work3</span><span class=\"mtk1\">();</span></span></code></pre>\n<p>간단하게 생각해볼 수 있는 방법은 하나의 작업이 끝난 후에 다음 작업을 호출하도록 하는 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">entry_point</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">async_work1</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">async_work1</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// do something</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">async_work2</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>그런데 만약 <code>async_work1</code>이 끝난 후 <code>async_work2</code>가 아니라 다른 <em>일반적인 작업</em>을 수행하게 하고 싶을 경우에는 위와 같이 구현할 수 없다. 그래서 선택하는 방법이 callback이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">entry_point</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">async_work1</span><span class=\"mtk1\">(async_work2);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">async_work1</span><span class=\"mtk1\">(std::function&lt;</span><span class=\"mtk4\">void</span><span class=\"mtk1\">()&gt; </span><span class=\"mtk12\">callback</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// do something</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">callback</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>위와 같이 코드를 작성하는 것은 꽤 타당해 보인다. 하지만 처음 문제로 돌아가서 1, 2, 3을 순서대로 실행하려면 코드가 좀 복잡해진다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">async_work1</span><span class=\"mtk1\">([] () {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">async_work2</span><span class=\"mtk1\">([] () {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">async_work3</span><span class=\"mtk1\">(callback_none);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">});</span></span></code></pre>\n<p>즉 연쇄적인 작업을 수행하기 위해 callback에 callback을 넣는 형태로 코드를 작성하게 된다는 것이다.</p>\n<ul>\n<li>nodejs 계열에서 코드를 작성할 때에 위와 같이 작성하는 경향이 있다. nodejs는 비동기 io 기반이므로 간단한 서버 프로그래밍을 해도 중첩 callback에 의해 금새 tab depth가 깊어지는 것을 볼 수 있다.</li>\n<li>[angdev]님의 글을 보면 이를 해결하기 위한 라이브러리가 존재함을 볼 수 있다. 그 라이브러리는 아래 소개할 async/then 패턴을 nodejs에 적용한 것이라 볼 수 있겠다.</li>\n</ul>\n<p>async/then 패턴은 task continuation을 생각하면 좋다. 비동기 작업을 추상화한 객체가 있고, 그 객체의 method chaining으로 이후 할 작업을 연결하는 형태이다.</p>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/vstudio/ee372288.aspx\">MSDN: Continuation Tasks</a></li>\n<li><a href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3558.pdf\">A Standardized Representation of Asynchronous Operations</a></li>\n</ul>\n<p>즉 asynchronous하게 호출된 작업 뒤에 할 일을 이어서 붙이는 것이다.</p>\n<ul>\n<li><strong>c#</strong>의 경우 비동기 요청을 할 경우 <code>Task</code> 객체를 반환하는데, <code>Task</code>의 method인 <code>ContinueWith()</code>으로 다음 할 일을 잇는 형태이다.</li>\n<li><strong>c++</strong>의 경우 (표준이 의도한 바에 따르면) <code>std::async()</code>을 통해 비동기 요청을 수행하는데 이 때의 반환값은 <code>std::future</code>이다. 따라서 <code>future</code>에 <code>then()</code> method를 통해 다음 할 비동기 작업을 잇는다는 것이다.</li>\n</ul>\n<p>[doodoori2]님께서 질문해준 것과 같이 <code>async()</code>로 시작된 작업에 대해 <code>then()</code>으로 이어서 할 작업을 추가해줄 때 동시성 문제가 발생할 수 있기 때문에 이를 적절히 잘 제어해주는 것도 중요하다.\n<code>async()</code>로 시작된 작업에 <code>then()</code>을 추가할 때, 다음의 상태 중 하나일 수 있다.</p>\n<ol>\n<li>\n<p>다른 thread에 의해 작업이 시작된 상태</p>\n</li>\n<li>\n<p>작업이 완료된 상태</p>\n</li>\n<li>\n<p>작업이 취소된 상태</p>\n</li>\n<li>\n<p>2번(완료)일 경우 이미 완료되었으니 동시성 문제가 발생하지 않는다. <code>then()</code>을 연결하는 순간 그 callback을 실행해도 되고, 아니면 그 작업을 threadpool에 던져서 아무 thread나 수행(async)하게 만들어도 된다.</p>\n</li>\n<li>\n<p>3번(취소)일 경우 <code>then()</code>을 연결하는 순간 예외를 발생시키는 등 추가할 수 없다고 적절히 알려주면 되겠다.</p>\n</li>\n<li>\n<p>1번(진행)일 경우 동시성 문제가 발생할 수 있다. 간단히 then() 코드를 생각해보자.</p>\n</li>\n</ol>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">then</span><span class=\"mtk1\">(</span><span class=\"mtk10\">function_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">next</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    _next = next;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">execute</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// execute something</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (_next != </span><span class=\"mtk4\">nullptr</span><span class=\"mtk1\">) </span><span class=\"mtk11\">_next</span><span class=\"mtk1\">(_result);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>문제가 발생할 수 있는 부분은 _next를 대입하는 곳과 _next를 호출하는 부분이다. 이 부분만 lock으로 잘 감싸서 동시성 문제를 해결하면 되겠다. 아래 링크의 자료를 보면 vs2012 기준 future는 내부에 StateManger라는 객체가 lock으로 보호하는 구조로 작성되어 있다. 같은 방법으로 <code>then()</code>으로 연결할 함수도 보호해줄 수 있을 것이다.<br>\n<a href=\"https://www.slideshare.net/lactrious/synchronizing-concurrent-threads\">async, future, promise in c++</a></p>\n<p>async/then 패턴은 stateless한 일련의 비동기 작업을 서술할 때 편하다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">req_async</span><span class=\"mtk1\">(case1).</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(case1_1).</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(case1_2);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">req_async</span><span class=\"mtk1\">(case2).</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(case2_1);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">req_async</span><span class=\"mtk1\">(case3).</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(case3_1).</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(case3_2).</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(case3_3);</span></span></code></pre>\n<p><code>req_async()</code>에 의해 비동기로 수행되는 작업(task)들은 내부의 task-scheduler에 의해 적절한 thread를 할당받아 작업이 동시에 처리될 것이다(task-parallelism)</p>\n<p>만약 각 case에서 수행되는 작업들이 io-boundary 등의 system 작업들이라면 위 코드는 단일 thread에서도 동작할 수 있다. thread 하나가 모든 <code>req_async</code> 작업을 요청한 후 각각의 completion을 대기한 후 <code>case*_1</code> 함수를 이어서 불러주면 되기 때문이다(nginx 등)</p>\n<p>위 이야기에 이어, async 작업과 then 작업 간의 상태 공유에 대해서 알아보자.<br>\n<code>async</code>에서 <code>then</code>으로 상태를 전달하는 가장 기본적인 방법은 <em>반환값</em>을 사용하는 방법이다. 다른 방법으로는 lambda function에 의한 variable capture가 있겠다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"일련의 순서로 호출되어야 하는 비동기 함수들이 있다. 이 때 사용되는 method chaining을 사용한 async/then 패턴과 수행할 비동기 context를 갖고 직접 비동기 수행을 연쇄적으로 진행하는 async_worker…","fields":{"date":"October 09, 2013","shortdesc":""},"frontmatter":{"title":"비동기 프로그래밍 패턴 1","tags":["async","design"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2013/10/09/asynchronous-programming-pattern-1/"}}}