{"componentChunkName":"component---src-templates-page-tsx","path":"/2014/07/09/csharp-csv-to-binary/","webpackCompilationHash":"9650fe4e762d5ca857ae","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<h2>csv data</h2>\n<p>데이터 분석을 위해 데이터를 열심히 수집해서 몇 개의 csv 파일을 얻었고, 이 csv 파일들은 각각 약 1GB 정도로 조금 큰 수준이라고 해보자. 데이터베이스가 있으면 데이터를 넣고 적절한 쿼리를 넣으면 되니 편하게 작업을 진행할 수가 있다. 하지만 데이터베이스가 없는 시스템에서 이 데이터들을 분석하거나, 쿼리로는 데이터 분석을 하기가 좀 어려운 상황이라고 할 경우에는 적어도 다음의 방법을 사용하여 분석을 진행해 볼 것이다.</p>\n<ol>\n<li>csv를 parsing하여 메모리에 올린다.</li>\n<li>메모리에 올린 모델을 적절히 aggregation하여 원하는 결과를 찾아본다.</li>\n</ol>\n<p>각 부분에 대한 프로그램을 작성하는 것은 별로 큰 부담이 아니다. c#을 사용할 경우, 충분히 추상화된 io 함수와 문자열 라이브러리와 linq가 있기 때문이다.</p>\n<p>문제는 <strong>csv parsing</strong> 시간이 꽤 오래 걸린다는 것이다. 연산을 잘못하여 aggregation 로직을 수정할 경우 매번 csv parsing이 다시 일어나기 때문에 데이터 분석을 위한 시간은 계속 길어질 수 밖에 없다. 본 글에서는 이 과정을 빠르게 하기 위한 csv 데이터의 binary serialize 과정을 알아보도록 하겠다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">long</span><span class=\"mtk1\"> </span><span class=\"mtk12\">DbId</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">long</span><span class=\"mtk1\"> </span><span class=\"mtk12\">UserDbId</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Amount</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이라는 자료구조가 있다고 해보자. 이에 대한 테스트 데이터를 csv로 대충 만들기 위해 다음과 같은 generator를 만들었다. 별 의미 없이 random 값을 <code>ItemData</code>에 담아서 10M개의 데이터를 csv로 만들어주는 것이다. 약 362MB 정도이다. (timestamp로 정렬한 것은 그럴싸하게 만들기 위함이지 별다른 뜻은 없다.)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">items</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">random</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Random</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">= </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">10</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1024</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1024</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">items</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">random</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Next</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1404715000</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1404716000</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">DbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">random</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Next</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10000</span><span class=\"mtk1\">, </span><span class=\"mtk7\">30000</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">UserDbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">random</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Next</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">random</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Next</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1000</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4000</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">random</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Next</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">50</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">items</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Sort</span><span class=\"mtk1\">((</span><span class=\"mtk12\">left</span><span class=\"mtk1\">, </span><span class=\"mtk12\">right</span><span class=\"mtk1\">) =&gt; </span><span class=\"mtk12\">left</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">right</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Path</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Combine</span><span class=\"mtk1\">(</span><span class=\"mtk12\">workspace</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;item.csv&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">writer</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">StreamWriter</span><span class=\"mtk1\">(</span><span class=\"mtk10\">path</span><span class=\"mtk1\">, </span><span class=\"mtk10\">false</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">foreach</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">e</span><span class=\"mtk1\"> </span><span class=\"mtk10\">in</span><span class=\"mtk1\"> </span><span class=\"mtk10\">items</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">writer</span><span class=\"mtk1\">.</span><span class=\"mtk10\">WriteLine</span><span class=\"mtk1\">(</span><span class=\"mtk10\">string</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Join</span><span class=\"mtk1\">(&quot;,&quot;,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">e</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Timestamp</span><span class=\"mtk1\">, </span><span class=\"mtk10\">e</span><span class=\"mtk1\">.</span><span class=\"mtk10\">DbId</span><span class=\"mtk1\">, </span><span class=\"mtk10\">e</span><span class=\"mtk1\">.</span><span class=\"mtk10\">UserDbId</span><span class=\"mtk1\">, </span><span class=\"mtk10\">e</span><span class=\"mtk1\">.</span><span class=\"mtk10\">TemplateId</span><span class=\"mtk1\">, </span><span class=\"mtk10\">e</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Amount</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h3>csv reader 1</h3>\n<p>362MB의 csv 파일을 parsing하여 <code>ItemData</code>에 넣는 코드를 작성해보자. 간단하게</p>\n<ol>\n<li>csv 파일을 열고,</li>\n<li>줄 단위로 읽으면서</li>\n<li>comma 문자로 분리하고</li>\n<li>int나 long으로 Parse하는</li>\n</ol>\n<p>코드를 생각해볼 수 있겠다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">items</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reader</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">StreamReader</span><span class=\"mtk1\">(</span><span class=\"mtk10\">csvPath</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">BaseStream</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Position</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">BaseStream</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Length</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">parts</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadLine</span><span class=\"mtk1\">().</span><span class=\"mtk10\">Split</span><span class=\"mtk1\">(&#39;,&#39;);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">items</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">int</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">DbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">long</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">UserDbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">long</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">2</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">int</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">3</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">Amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">int</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">4</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>파일을 접근하기 위해 <code>StreamReader</code>를 열고, 한 줄씩 읽어서 <code>Split</code>한 후 <code>int.Parse</code>를 사용했다. 시간을 재보면 딱히 어떤 부분이 많이 걸리는 것 같지는 않다. 그냥 전체적으로 많이 호출되어서 느린 것 같아 보인다. 좀 더 자세히 보자.</p>\n<ul>\n<li><code>StreamReader</code>는 지정한 파일을 연 후 내부의 buffer를 갖고 파일을 읽을 수 있게 해주는 객체다.</li>\n<li><code>ReadLine()</code>은 <code>StreamReader</code> 내부 buffer에서 newline 문자를 찾고, 그 이전까지의 string을 반환한다. 만약 buffer에 newline이 없다면, 파일에 다시 접근하여 파일을 좀 더 읽는다.</li>\n<li><code>int.Parse()</code>나 <code>long.Parse()</code>는 입력받은 문자열이 올바른 숫자 형태인지 검사한 후, 그것을 적절히 int나 long type으로 변환(convert)해서 반환하는 함수이다.</li>\n</ul>\n<p>많이 불린 것은 맞지만 결국 모든 부분이 느리기 때문에 전체적으로 느려지는 것이다.</p>\n<h3>csv reader 2</h3>\n<p>일단 <code>StreamReader</code>에 의해 파일을 여러 번 접근하는 부분을 개선해보자. 즉, <code>File.ReadAllLines()</code> 함수를 써서 파일을 한 번에 모두 읽은 후 각 line 별로 접근하도록 해보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">items</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">foreach</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">line</span><span class=\"mtk1\"> </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">File</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ReadAllLines</span><span class=\"mtk1\">(</span><span class=\"mtk12\">csvPath</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">parts</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Split</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;,&#39;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">items</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">int</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">DbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">long</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">UserDbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">long</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">2</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">int</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">3</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">int</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Parse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">parts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">4</span><span class=\"mtk1\">]),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>코드가 좀 더 간단해졌다. <code>File.ReadAllLines()</code> 함수는 파일을 한 번에 다 읽어놓은 뒤 <code>IEnumerable&#x3C;string></code> 형태로 각 line을 반환해주는 c# 내장 함수이다. 따라서 위와 같이 수행해보면 <code>File.ReadAllLInes()</code>에서 걸리는 시간이 좀 길게 측정되지만 전체적으로는 첫 번째 예제보다 빨라진다.</p>\n<p>재미있는 점은 위 프로그램을 두 번째 실행할 때에는 <code>File.ReadAllLines()</code> 수행이 꽤 빨라진다는 것이다. 그 이유는 첫 번째 수행 시 csv 파일이 io cache에 들어가서 두 번째 실행 시에는 상대적으로 io 부담이 줄어들기 때문이다. 이 성능 차이는 ssd보다 io 비용이 비싼 hdd에서 테스트할 때 보다 확실히 느낄 수 있다.</p>\n<h2>binary serialize</h2>\n<p>io 비용을 줄이기 위해 조금씩 io를 여러 번 부르는 것보다는 한 번에 다 읽어놓고 작업하는게 더 빠르다는 것을 알았다. (물론 메모리가 허용할 때의 이야기이다. 메모리가 허용하지 않는다면 <code>StreamReader</code>를 써야한다.)</p>\n<p>이제 newline을 찾는 비용과 <code>int.Parse()</code> 비용을 줄이기 위한 방법을 생각해보자. 간단하다. <code>ItemData</code>는 고정 크기의 데이터이므로 데이터 그 자체를 binary로 쓰는 것이다. (c++에서는 보다 손쉽게 memory를 file로 dump할 수 있지만 c#은 vm 기반이므로 그렇지 않다.)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">binPath</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Path</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Combine</span><span class=\"mtk1\">(</span><span class=\"mtk12\">workspace</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;item.bin&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">fileStream</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">FileStream</span><span class=\"mtk1\">(</span><span class=\"mtk10\">binPath</span><span class=\"mtk1\">, </span><span class=\"mtk10\">FileMode</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Create</span><span class=\"mtk1\">, </span><span class=\"mtk10\">FileAccess</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Write</span><span class=\"mtk1\">, </span><span class=\"mtk10\">FileShare</span><span class=\"mtk1\">.</span><span class=\"mtk10\">None</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">writer</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">BinaryWriter</span><span class=\"mtk1\">(</span><span class=\"mtk10\">fileStream</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">foreach</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">item</span><span class=\"mtk1\"> </span><span class=\"mtk10\">in</span><span class=\"mtk1\"> </span><span class=\"mtk10\">items</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">writer</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk10\">item</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Timestamp</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">writer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk12\">item</span><span class=\"mtk1\">.</span><span class=\"mtk12\">DbId</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">writer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk12\">item</span><span class=\"mtk1\">.</span><span class=\"mtk12\">UserDbId</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">writer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk12\">item</span><span class=\"mtk1\">.</span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">writer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk12\">item</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Amount</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>FileStream</code>으로 내보낼 파일에 대한 stream을 만들고 <code>BinaryWriter</code>를 사용해서 각 field 별로 <code>Write()</code>를 해주면 된다. 이제 item.bin 파일에는 순서대로, timestamp / dbid / userdbid / templateid / amount가 기록된다. 한 row의 크기가 28(4+8+8+4+4)인 고정 크기의 record가 연속적으로 기록된 binary 파일이라고 생각하면 된다.</p>\n<p>이렇게 작성된 bin 파일의 크기는 280MB이다. 비록 고정 길이 record이지만 newline과 comma 문자가 빠져서 득을 많이 보았다. 이제 읽어보자.</p>\n<h3>binary reader 1</h3>\n<p>간단히 구현해보면, csv 파일을 읽을 때와 동일한 구조가 나온다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">items</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">fileStream</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">File</span><span class=\"mtk1\">.</span><span class=\"mtk10\">OpenRead</span><span class=\"mtk1\">(</span><span class=\"mtk10\">binPath</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reader</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">BinaryReader</span><span class=\"mtk1\">(</span><span class=\"mtk10\">fileStream</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">fileStream</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Position</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk10\">fileStream</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Length</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">items</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">Timestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt32</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">DbId</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt64</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">UserDbId</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt64</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">TemplateId</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt32</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">Amount</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt32</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>단지 <code>ReadLine()</code>과 <code>Parse()</code> 대신 <code>BinaryReader</code> 객체를 사용하여 해당 파일을 다 읽을 때까지 각 field의 크기에 맞게 byte를 읽어주는 것이 다르다.</p>\n<p>두 번째 예제에 비해 속도 향상이 있기는 하지만 큰 차이는 아니다. 그 이유는 <code>FileStream</code>이 내부 buffer를 사용하는 구조이므로 첫 번째 예제와 동일하게 io를 여러 번 발생시키기 때문이다. 이 구조를 좀 더 개선해보자.</p>\n<h3>binary reader 2</h3>\n<p>방법은 간단하다. 미리 binary bytes를 다 읽어두고 <code>FileStream</code> 대신 <code>MemoryStream</code>을 사용하는 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">items</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">File</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ReadAllBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">binPath</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memoryStream</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MemoryStream</span><span class=\"mtk1\">(</span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reader</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">BinaryReader</span><span class=\"mtk1\">(</span><span class=\"mtk10\">memoryStream</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">memoryStream</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Position</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk10\">memoryStream</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Length</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">items</span><span class=\"mtk1\">.</span><span class=\"mtk10\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">Timestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt32</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">DbId</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt64</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">UserDbId</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt64</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">TemplateId</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt32</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">Amount</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">reader</span><span class=\"mtk1\">.</span><span class=\"mtk10\">ReadInt32</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>File.ReadAllBytes()</code>는 c# 내장 라이브러리로 지정된 파일의 모든 bytes를 한 번에 읽어 메모리로 올린다. <code>BinaryReader</code>는 Stream 객체를 필요로 하므로 이 bytes를 Stream으로 만들어주기 위한 <code>MemoryStream</code>을 사용하는 것이다. io 비용을 처음 한 번에 다 지불하기 때문에 세 번째 예제에 비해 속도가 크게 향상된다.</p>\n<p><code>BinaryReader</code> 때문이지만 필요하지도 않은 <code>MemoryStream</code> 객체를 만들어서 굳이 비용을 더 지불할 필요는 없다. 왜냐하면 <code>BitConverter</code>가 있기 때문이다. 좀 더 개선해보자.</p>\n<h3>binary reader 3</h3>\n<p><code>BitConverter</code>는 지정된 byte 배열의 위치(offset)로부터 지정된 형(type)으로 값을 읽어주는 c# 내장 라이브러리이다. 이를 사용하면 코드를 다음과 같이 작성할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">items</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">File</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ReadAllBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">binPath</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rowSize</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">sizeof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">int</span><span class=\"mtk1\">) + </span><span class=\"mtk11\">sizeof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">long</span><span class=\"mtk1\">) + </span><span class=\"mtk11\">sizeof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">long</span><span class=\"mtk1\">) + </span><span class=\"mtk11\">sizeof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">int</span><span class=\"mtk1\">) + </span><span class=\"mtk11\">sizeof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">int</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">rowSize</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">items</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">DbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt64</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">4</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">UserDbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt64</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">12</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">20</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">24</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>ItemData</code>는 고정 길이 record이기 때문에 미리 row-size를 계산해둘 수 있다. 따라서 메모리에 다 읽어둔 byte 배열을 row-size만큼 증가시키면서 각 위치의 field를 적절히 변환해서 <code>ItemData</code> 객체에 넣어주면 되는 것이다. 이렇게 작성하면 네 번째 예제보다 (미약하지만) 성능 개선 효과를 얻을 수 있다.</p>\n<h2>왜 c#인가</h2>\n<p>사실 c++로 작성한다면 위 과정이 훨씬 간단해진다. 단순히 <code>ItemData</code> 배열을 할당한 다음 <code>fwrite()</code> 함수의 인자로 <code>ItemData</code> 배열의 주소를 넘겨서 dump를 하고, 읽을 때에는 file-size만큼 다 읽은 뒤 <code>ItemData*</code>로 casting해서 접근하면 되기 때문이다.</p>\n<p>그럼에도 불구하고 c#을 고집한 이유는 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk12\">items</span><span class=\"mtk1\">.</span><span class=\"mtk11\">GroupBy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">e</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk12\">e</span><span class=\"mtk1\">.</span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\">).</span><span class=\"mtk11\">Select</span><span class=\"mtk1\">(</span><span class=\"mtk12\">e</span><span class=\"mtk1\"> =&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">e</span><span class=\"mtk1\">, </span><span class=\"mtk12\">SumOfAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">e</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Sum</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Amount</span><span class=\"mtk1\">) }).</span><span class=\"mtk11\">Dump</span><span class=\"mtk1\">();</span></span></code></pre>\n<p>위 코드는 TemplateId 별 Amount의 총량을 구해서 보여주는 LINQ 코드이다. (<code>Dump()</code> 함수는 <a href=\"https://www.linqpad.net/\">LINQPad</a>에서 지원하는 함수로 쿼리 수행 결과를 테이블로 이쁘게 보여주는 함수이다.)</p>\n<p>물론 c++에 비해 다소 속도가 느리고 메모리가 많이 필요할 수는 있지만 데이터의 쿼리를 날리기에는 LINQ를 쓸 수 있는 c#이 c++에 비해 훨씬 작업하기가 좋다.</p>\n<h2>속도 비교</h2>\n<p>위 예제의 속도를 비교해보자. 속도는 내 컴퓨터(i5-4200U, 8GB) LinqPad AnyCPU를 기준으로 대충 측정하였다.</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>time (sec)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>csv #1</td>\n<td>28</td>\n</tr>\n<tr>\n<td>csv #2</td>\n<td>17</td>\n</tr>\n<tr>\n<td>bin #1</td>\n<td>14</td>\n</tr>\n<tr>\n<td>bin #2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>bin #3</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>고작 362MB의 데이터지만 충분한 속도 상승 효과가 나오고 있는 것을 볼 수 있다.</p>\n<h2>마무리</h2>\n<p>대용량의 csv 파일을 읽어서 작업해야 할 일이 있을 경우 그 구조가 간단하다고 해도 io 비용과 parsing 비용 때문에 loading 시간이 만만치 않다. 이 경우 위처럼 csv을 미리 parsing 해둔 binary 파일을 만들어서 보다 빠르게 작업을 진행할 수 있다.</p>\n<p>하지만 여전히 문제가 있다.</p>\n<ul>\n<li>훨씬 더 큰 양의 데이터를 다뤄야할 때에는 vm에서 허용해주는 메모리의 한계를 넘을 수도 있는데 위 구조를 적용할 수 있을까?</li>\n<li>loading 시간을 단축했지만 그조차도 클 경우에 사용할만한 좀 더 좋은 방법이 없을까?</li>\n<li>매번 다른 자료구조에 대해서 매번 binary로 serialize해주고 deserialize해주는 코드를 작성해야 할까?</li>\n</ul>\n<p>이에 대해서는 추후 글에서 알아보도록 하자.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"csv data 데이터 분석을 위해 데이터를 열심히 수집해서 몇 개의 csv 파일을 얻었고, 이 csv 파일들은 각각 약 1GB…","fields":{"date":"July 09, 2014","shortdesc":""},"frontmatter":{"title":"c# binary 파일을 사용해 csv 파일 빨리 읽기","tags":["c#","data"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2014/07/09/csharp-csv-to-binary/"}}}