{"version":3,"sources":["webpack:////home/lacti/tmp/lacti-blog/src/templates/blog.js","webpack:////home/lacti/tmp/lacti-blog/.cache/gatsby-browser-entry.js","webpack:////home/lacti/tmp/lacti-blog/.cache/public-page-renderer.js","webpack:////home/lacti/tmp/lacti-blog/.cache/public-page-renderer-prod.js","webpack:////home/lacti/tmp/lacti-blog/src/components/seo.js","webpack:////home/lacti/tmp/lacti-blog/src/utils/tags.js","webpack:////home/lacti/tmp/lacti-blog/src/components/header.js","webpack:////home/lacti/tmp/lacti-blog/src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Template","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","_utils_tags__WEBPACK_IMPORTED_MODULE_4__","_ref","markdownRemark","data","fields","frontmatter","html","title","tags","a","createElement","className","map","tag","key","to","asTagPath","date","dangerouslySetInnerHTML","__html","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","React","createContext","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","propTypes","shape","pathname","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","arrayOf","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","Layout","children","_856328897","Fragment","header","paddingTop","Date","getFullYear","href","node"],"mappings":"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","file":"component---src-templates-blog-js-91d574f497a79da194a8.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n// import Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport { asTagPath } from \"../utils/tags\"\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { fields, frontmatter, html } = markdownRemark\n  const { title, tags } = frontmatter\n  return (\n    <Layout title={title}>\n      <SEO title={title} />\n      <div className=\"blog-post-container\">\n        <div className=\"blog-post\">\n          <div className=\"blog-meta\">\n            {tags.map(tag => (\n              <div key={`tag_${tag}`} className=\"chip\">\n                <Link to={`/tags/${asTagPath(tag)}`}>{tag}</Link>\n              </div>\n            ))}\n            <h2 className=\"blog-post-date\">{fields.date}</h2>\n          </div>\n          <div\n            className=\"blog-post-content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(fields: { path: { eq: $path } }) {\n      html\n      fields {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n      }\n      frontmatter {\n        title\n        tags\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/*\n * This function would be referenced from `gatsby-node.js`\n * so it cannot use ES6 module syntax to export.\n */\nmodule.exports.asTagPath = tag => {\n  switch (tag) {\n    case \"c++\":\n      return \"cplusplus\"\n    case \"c#\":\n      return \"csharp\"\n    default:\n      return tag\n  }\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ title, children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={title || data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n}\n\nexport default Layout\n"],"sourceRoot":""}