{"componentChunkName":"component---src-templates-blog-js","path":"/2009/10/18/how-to-function-returning-value-with-assembly","webpackCompilationHash":"b97af647db8cc3cf2682","result":{"data":{"markdownRemark":{"html":"<p>함수에서의 값 반환이 실제로 기계어 수준에서는 어떻게 이루어지는지 알아보자.</p>\n<h2>참고</h2>\n<p>assembly 정도는 알고 있어야 무얼 이야기하고자 하는지 알 수 있다.\n아래의 코드들은 <code>gcc((Debian 4.3.4-5) 4.3.4)</code> + <code>gdb(6.8.50.20090628-cvs-debian)</code>인 curs-server에서 실험한 것이다.\nvs환경에서 해보면 좀 다를 것 같다.</p>\n<h2>본문</h2>\n<p>함수는 1-2 공전계 시간에 배우고, 함수 호출 원리는 2-1 컴퓨터시스템 시간에 PC 조작과 스택에 return address를 어떻게 넣고 불러오느냐로 배우고, 그걸 직접 짜보는 것은 3-1 CA 시간에 해보았지만,</p>\n<p>의외로 함수 값 반환 방법은 자세히 배워본 적이 없다.</p>\n<p>보통 우리가 알고 있는 함수 값 반환 방식은 <code>eax</code>에다 반환할 값을 넣고 함수 코드를 <code>ret</code>하면 호출지점 코드에서 <code>eax</code>에 있는 값을 가져오는 것이다.<br>\n하지만 <code>eax</code>는 IA32 register로 그 크기가 32bit, 즉 4byte인데 <strong>이 크기를 넘어가는 걸 반환하는건 어떻게 할 것인가</strong>가 이 글에서 확인해보려는 점이다.<br>\n(실제로 이건 내가 무슨 세미나인가를 할 때 참관한 선배님께서 질문해주신 건데, 모른다고 하셨으나 분명히 알고 계셨을것이라, 당시에는 대충 포인터로 넘겨서 어디선가 복사하겠죠, 라고 대답했는데 갑자기 생각나서 해당 코드를 만들어 disassemble)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;stdio.h&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;string.h&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> Me</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">char</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">[</span><span class=\"mtk7\">12</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> age;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> Me </span><span class=\"mtk11\">me</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> Me m;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">strncpy</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">m.name</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;lacti&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">12</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">m.age</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">23</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> m;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> Me m = </span><span class=\"mtk11\">me</span><span class=\"mtk1\"> ();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">printf</span><span class=\"mtk1\"> (</span><span class=\"mtk8\">&quot;name = %s, age = %d</span><span class=\"mtk6\">\\n</span><span class=\"mtk8\">&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">m.name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">m.age</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이런 코드가 있다.\n여기서 main의 첫째줄 코드와 me() 함수의 값 반환 코드를 보면 될것이다.</p>\n<p>gdb를 써줘서 disassemble 코드를 보자. [gdb, disassemble main]</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048420</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">44</span><span class=\"mtk1\">&gt;:     mov    -</span><span class=\"mtk7\">0x14</span><span class=\"mtk1\">(%ebp),%eax</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048423</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">47</span><span class=\"mtk1\">&gt;:     mov    %eax,(%ebx)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048425</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">49</span><span class=\"mtk1\">&gt;:     mov    -</span><span class=\"mtk7\">0x10</span><span class=\"mtk1\">(%ebp),%eax</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048428</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">52</span><span class=\"mtk1\">&gt;:     mov    %eax,</span><span class=\"mtk7\">0x4</span><span class=\"mtk1\">(%ebx)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x0804842b</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">55</span><span class=\"mtk1\">&gt;:     mov    -</span><span class=\"mtk7\">0xc</span><span class=\"mtk1\">(%ebp),%eax</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x0804842e</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">58</span><span class=\"mtk1\">&gt;:     mov    %eax,</span><span class=\"mtk7\">0x8</span><span class=\"mtk1\">(%ebx)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048431</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">61</span><span class=\"mtk1\">&gt;:     mov    -</span><span class=\"mtk7\">0x8</span><span class=\"mtk1\">(%ebp),%eax</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048434</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">64</span><span class=\"mtk1\">&gt;:     mov    %eax,</span><span class=\"mtk7\">0xc</span><span class=\"mtk1\">(%ebx)</span></span></code></pre>\n<p>반환 부분 코드다.</p>\n<p><code>-0x14(%ebp)</code>부터 지역변수 <code>struct Me m</code>의 시작인데, 이게 <code>-0x08(%ebp)</code>까지해서 총 4byte(왜냐하면 struct Me는 char[12] + int이니까)를 차례대로 <code>%ebx</code>의 0x00부터 0x0c까지 집어넣는것이다.\n즉 memcpy.</p>\n<p>그리고</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048437</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">67</span><span class=\"mtk1\">&gt;:     mov    %ebx,%eax</span></span></code></pre>\n<p>그 <code>ebx</code> 값, 즉 메모리 주소인데 어떤 메모리 주소냐하면 지역변수 <code>m</code>에 담긴 정보가 <strong>복사</strong>된 곳의 메모리 주소가 <code>eax</code>에 담겨서 반환된다는 것이다.<br>\n여기까지 한줄로 요약하면 <strong>지역변수가 반환될 때 메모리에 복사되어 그 주소값이 eax로 넘어간다</strong>가 되는 것이다.</p>\n<p>지역변수가 왜 지역변수냐? 하면 함수 호출이 끝나고 다 없어지기 때문이다. 어떻게 없어지나 하면</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x080483f5</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">1</span><span class=\"mtk1\">&gt;:      mov    %esp,%ebp</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x080483f8</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">4</span><span class=\"mtk1\">&gt;:      sub    $</span><span class=\"mtk7\">0x24</span><span class=\"mtk1\">,%esp</span></span></code></pre>\n<p>처음에 쓸 만큼 stack pointer를 계산해두고, <code>ebp</code>에 stack 시작점을 담아서, <code>ebp</code>부터 <code>esp</code>까지의 영역을 지역변수를 사용하는 공간으로 쓰다가,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048439</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">69</span><span class=\"mtk1\">&gt;:     add    $</span><span class=\"mtk7\">0x24</span><span class=\"mtk1\">,%esp</span></span></code></pre>\n<p>함수가 끝날 때 stack pointer를 다시 복원하면서, 아까 사용하는 공간을 폐기하는 것이다. 그래서 함수가 반환될 때 공간이 폐기되므로 반환 시 그 값을 <strong>복사</strong> 한 것이다.</p>\n<p>그렇다면 <code>ebx</code>는 어디를 가리키고 있단 말인가?</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x080483fb</span><span class=\"mtk1\"> &lt;me+</span><span class=\"mtk7\">7</span><span class=\"mtk1\">&gt;:      mov    </span><span class=\"mtk7\">0x8</span><span class=\"mtk1\">(%ebp),%ebx</span></span></code></pre>\n<p>이 코드를 보면 <code>ebx</code>는 <code>ebp</code>의 <code>+0x08</code> 지점을 가리키고 있는데, 또 그럼 여기가 어디냐라는 문제가 있다만 간단히 생각해보면\n지역변수를 사용할 때는 보통 ebp에 -값을 더해서 썼다. 즉 <code>-0x14(%ebp)</code> 등과 같이 썼다는 것이다.<br>\n즉, <code>esp = ebp - 0x24</code>였으므로 <code>ebp</code>부터 <code>ebp - 0x24</code>까지가 지역변수 영역이라 지역변수는 다 <code>ebp</code> 기준으로 - 영역에 있는 것이다. 근데 저건 + 이니까 지역변수가 아니란 말씀.</p>\n<p>그럼 어디냐? <em><code>me()</code> 함수를 호출한 main의 영역</em>이다.</p>\n<p>여기서 이제</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk7\">0x08048452</span><span class=\"mtk1\"> &lt;main+</span><span class=\"mtk7\">17</span><span class=\"mtk1\">&gt;:   lea    -</span><span class=\"mtk7\">0x14</span><span class=\"mtk1\">(%ebp),%eax</span></span></code></pre>\n<p>이 코드를 통해\n<code>me()</code> 함수 내에서의 <code>%ebx</code> 값이 <code>main()</code> 함수에서 설정한 <code>-0x14(%ebp)</code>의 주소로 결국 main() 함수의 지역변수 영역이라는 것만 설명하면 될텐데 집에서 점심먹으러 나간다고 빨리 준비하란다</p>\n<p>그래서 일단 정지</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","fields":{"date":"October 18, 2009","path":"/2009/10/18/how-to-function-returning-value-with-assembly"},"frontmatter":{"title":"함수 값 반환 방법[어셈블리]","tags":["c"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}