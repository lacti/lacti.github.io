{"componentChunkName":"component---src-templates-page-tsx","path":"/2012/02/23/thread-unsafety-problem-in-circular-queue/","webpackCompilationHash":"dff243b0bb0545126dc2","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>어떤 자원에 대한 환형큐가 있다고 해보자. size는 2의 자승이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk10\">resource_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">res</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> index = </span><span class=\"mtk11\">atomic_inc32</span><span class=\"mtk1\">(&amp;rear_) &amp; (size_ - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">array</span><span class=\"mtk1\">[index] = res;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">resource_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pop</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> index = </span><span class=\"mtk11\">atomic_inc32</span><span class=\"mtk1\">(&amp;front_) &amp; (size_ - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">array</span><span class=\"mtk1\">[index];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>위 코드는 당연히 thread safety 하지 않다. 하지만 문제가 발생하지 않도록 나름 머리를 써서 다음과 같이 위 코드를 사용한다고 해보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">work</span><span class=\"mtk1\">(</span><span class=\"mtk10\">resource_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">old</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">push</span><span class=\"mtk1\">(old);  </span><span class=\"mtk3\">// release old resource</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">resource_t</span><span class=\"mtk1\"> newone = </span><span class=\"mtk11\">pop</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// acquire new on</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// do some work</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>예전 자원을 반환하고, 새로운 자원을 할당받아 그것으로 무슨 작업을 하는 것이다.<br>\n이렇게 되면 pop 을 부르는 시점의 thread 는 적어도 자신이 push 한 자원 1개가 반드시 존재함을 보장할 수 있으니까 문제가 생기지 않는다.</p>\n<p>라고 생각하면 함정.</p>\n<p>thread 4개가 동시에 work 함수를 수행한다고 해보자.</p>\n<ul>\n<li>push를 수행했으니까 <code>rear_</code>는 4만큼 증가한다.</li>\n<li>가장 마지막으로 <code>rear_</code>를 증가시킨 thread만 <code>array</code>에 <code>resource_t</code>를 대입하였고,</li>\n<li>나머지 thread들은 아직 <code>array</code>에 대입하기 전이다.</li>\n<li>그러면 <code>index</code>만 증가해있고, 실제 배열은 비어있다.</li>\n<li>그래서 마지막 thread가 <code>pop</code>을 할 때 access violation으로 프로그램이 사망한다.</li>\n</ul>\n<p>즉, <code>index</code>의 증가는 atomic함을 보장하지만 그것이 배열에 자원이 대입되었음을 보장해주지 못하므로 사망한다.</p>\n<p>척 봐도 당연한 소리를 여기에 쓰고 있는 이유는, 이걸 직접 당해보고도 몇 달 지나니까 다시 이 사실을 까먹기 때문이다(…)</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"어떤 자원에 대한 환형큐가 있다고 해보자. size는 2의 자승이다.위 코드는 당연히 thread safety…","fields":{"date":"February 23, 2012","shortdesc":""},"frontmatter":{"title":"환형큐의 thread unsafety 문제","tags":["concurrency","c++"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/02/23/thread-unsafety-problem-in-circular-queue/"}}}