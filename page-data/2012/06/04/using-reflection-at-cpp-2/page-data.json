{"componentChunkName":"component---src-templates-page-tsx","path":"/2012/06/04/using-reflection-at-cpp-2/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>지난 번 글의 문제점은 다음과 같다.</p>\n<ul>\n<li>class 정보가 없다. 따라서 이름으로부터 class에 대한 객체를 생성할 수가 없다.</li>\n<li>field에 대한 정보가 구체 class에 묶여있다. 따라서 그 class를 모르면 field 정보를 얻어올 수 없다.</li>\n</ul>\n<p>그래서 이번에는 다음의 기능을 중점으로 구현하였다.</p>\n<ul>\n<li>이름(문자열)로 class 정보 찾기</li>\n<li>class 정보는 class 객체를 생성할 수 있어야 함</li>\n<li>class 정보는 field 정보를 이름(문자열)로 찾을 수 있어야 함</li>\n<li>field 정보는 객체의 주소로부터 field 값을 가져오거나 설정할 수 있어야 함</li>\n</ul>\n<p>마지막 항목은 지난 글에서 구현했던 내용이니, 앞의 세 항목을 어떻게 구현했는지 보도록 하자.\n(본 글에서는 글 읽는 흐름과 상관없는 별로 안 중요한 코드는 생략한다.)</p>\n<p>먼저 class 정보에 대응되는 class를 만들어보자. 요구사항에서 언급했듯이, 얘는 자신의 type정보로 객체를 생성 가능해야하며, 이름으로 특정 field를 찾을 수 있어야 한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">class_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_field</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add_field</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk10\">field_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_Class</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">_Class</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">new_instance</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">reinterpret_cast</span><span class=\"mtk1\">&lt;_Class*&gt;(</span><span class=\"mtk11\">new_instance_impl</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">new_instance_impl</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::map&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string, </span><span class=\"mtk10\">field_t</span><span class=\"mtk1\">*&gt; </span><span class=\"mtk10\">field_map_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">field_map_t</span><span class=\"mtk1\"> field_map;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p><code>field_t*</code>에 대한 map을 가지고 <code>add_field()</code>/<code>get_field()</code> 할 수 있는 간단한 class이다. <code>add_field()</code>와 <code>get_field()</code> 함수 모두 public으로 공개되어 있으니 class 정보를 접근할 때 실행 도중에 field를 <code>add_field()</code> 할 수 있는 위험이 있지 않을까? 하는 생각이 들 수도 있는데, 일단 <code>class_t</code> 객체를 사용할 때는 무조건 <code>const class_t*</code>를 사용하게 하면 <code>add_field()</code> 함수는 const가 아니니까 적당히 괜찮지 않을까 싶다.</p>\n<p>재밌는 부분은 객체를 생성하는 부분이다. 이 역시 class<em>t 자체에는 type 정보가 없으므로(`field</em>t<code>와 동일한 이유) 구체 class에게 생성을 맡긴다. 하지만 구체 class가 뭘 생성할지 모르므로</code>void*<code>로 일단 받고 casting해서 반환하는 대범함을 보인다. (</code>field<em>t<code>때와 마찬가지로</code>new</em>instance()` 함수에 type 인자를 잘못 주면 안드로메다를 보게 된다.)</p>\n<p>구체 class는 <code>field_impl_t</code>보다 훨씬 간단하다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_impl_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">class_impl_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">new_instance_impl</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> _ObjTy;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>구체 class는 어차피 자기가 어떤 class에 대한 것인지 type 정보를 template으로 받고 있으므로 그에 대해 new 해서 돌려주면 그만이다. 물론 기본 생성자가 없다면 컴파일 에러가 난다.</p>\n<p>이는 <a href=\"/2012/05/31/xml-mapping-using-java-annotation-and-reflection/\">java annotation과 reflection을 사용한 xml mapping</a>에서 <code>Class#newInstance()</code>와 기본생성자에 관해 이야기했던 것과 동일한 이유라고 보면 된다.\n기본 생성자가 아닌 생성자에 대해서도 고려해주려면 method에 대한 reflection도 만들어주어야 하는데 variadic template을 지원하지 않는 MSVC10에서는 별로 구현하고 싶지 않다(…)</p>\n<p>이제 class의 이름과 <code>class_t</code>를 관리해줄 관리자 class를 만들어야 한다. class의 이름은 <code>std::type_info.name()</code>을 쓰면 좋겠지만 이 이름이 그닥 적절하지 못하다.</p>\n<p>예를 들어 <code>struct user_t {}</code>라는 구조체가 있다면 <code>typeid(user_t).name()</code>은 MSVC 기준으로 <code>\"struct user_t\"</code>가 된다. 이 경우 이름을 통해 <code>class_t</code>를 찾아올 때 영 좋지 못할 수가 있으니 직접 이름을 등록할 수 있도록 할 것이다.</p>\n<p>이 때 문제가 될 수 있는 것은, 어떤 객체에 대한 <code>class_t</code>를 가져올 때, 그 객체의 class의 이름을 뭐라고 등록했는지 찾아야 한다는 것이다. 때문에 관리자 class는 사용자 지정 이름과 <code>class_t</code>만을 관리하는 것이 아니라, 그 객체의 <code>std::type_info*</code>와 사용자 지정 이름도 관리해야 각 객체들은 자신의 <code>class_t</code>를 적절히 찾아올 수 있게 될 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">instance</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_class</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_field</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">class_name</span><span class=\"mtk1\">, </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field_name</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add_class</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk10\">class_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">class_impl</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add_field</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">class_name</span><span class=\"mtk1\">, </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field_name</span><span class=\"mtk1\">, </span><span class=\"mtk10\">field_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field_impl</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add_class_name</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">type_info</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">typeinfo</span><span class=\"mtk1\">, </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">class_name</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">class_name_from_typeinfo</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">type_info</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">typeinfo</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">reflection_base</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">reflection_base</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">operator</span><span class=\"mtk1\">= (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::map&lt;</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::type_info*, </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string&gt; </span><span class=\"mtk10\">class_name_map_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::map&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string, </span><span class=\"mtk10\">class_t</span><span class=\"mtk1\">*&gt; </span><span class=\"mtk10\">class_map_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">class_name_map_t</span><span class=\"mtk1\"> class_name_map;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">class_map_t</span><span class=\"mtk1\"> class_map;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>singleton pattern의 <code>reflection_base</code> class는 <code>type_info</code>와 사용자 지정 이름, 사용자 지정 이름과 <code>class_t</code>에 대한 map을 갖는다. 그리고 이를 등록하고 찾아서 반환할 수 있도록 한다. (어차피 내부 구현 코드는 map에 대한 insert, find이니 자세한 코드는 생략한다.)</p>\n<p>이제 <code>class_t</code>를 관리하고 찾을 수 있는 방법이 생겼으니, 특정 객체에 대해 다른 class들이 <code>class_t</code>를 얻을 수 있도록 helper격의 class를 하나 만들어보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection_class_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">~reflection_class_t</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">type_name</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> typeid(*</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk11\">name</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">class_name</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk1\">::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            .</span><span class=\"mtk11\">class_name_from_typeinfo</span><span class=\"mtk1\">(&amp;typeid(*</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_class</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_t</span><span class=\"mtk1\">::</span><span class=\"mtk11\">from_name</span><span class=\"mtk1\">(</span><span class=\"mtk11\">class_name</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>이제 <code>reflection_class_t</code>를 상속받는 class들은 <code>get_class()</code> 함수를 통해 자신의 <code>class_t*</code>를 가져올 수 있게 된다.</p>\n<p>마지막으로 <code>reflection_base</code>에 <code>class_t</code>와 <code>field_t</code>를 등록하는 함수를 만들어보자. 이는 지난 번 글에서 사용했던 매크로와 유사한 코드이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">register_class</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">class_name</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk1\">::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">().</span><span class=\"mtk11\">add_class_name</span><span class=\"mtk1\">(&amp;typeid(_ObjTy), class_name);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk1\">::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">().</span><span class=\"mtk11\">add_class</span><span class=\"mtk1\">(class_name,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_impl_t</span><span class=\"mtk1\">&lt;_ObjTy&gt;(class_name));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">::*Field)&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">register_field</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field_name</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char</span><span class=\"mtk1\">* class_name = </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk1\">::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        .</span><span class=\"mtk11\">class_name_from_typeinfo</span><span class=\"mtk1\">(&amp;typeid(_ObjTy));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(class_name);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">reflection_base</span><span class=\"mtk1\">::</span><span class=\"mtk11\">instance</span><span class=\"mtk1\">().</span><span class=\"mtk11\">add_field</span><span class=\"mtk1\">(class_name, field_name,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_impl_t</span><span class=\"mtk1\">&lt;_ObjTy, _FieldTy, Field&gt;(field_name));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>register_class()</code> 함수는 특정 class type에 대해 지정한 이름으로 <code>class_impl_t</code> 객체를 만들어서 등록한다. 이 때 해당 class의 type과 사용자 지정 이름을 <code>class_name_map</code>에 같이 등록해준다.</p>\n<p><code>register_field()</code> 함수는 특정 class를 찾아서, 그 <code>class_t</code>가 관리하는 <code>field_map</code>에 <code>field_impl_t</code> 객체를 만들어서 등록한다.</p>\n<p>이제 위에서 작성한 코드는 다음과 같이 사용될 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">using</span><span class=\"mtk1\"> </span><span class=\"mtk4\">namespace</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">base_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">reflection_class_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">~base_t</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">user_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">base_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> index;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string name;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_tmain</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argc</span><span class=\"mtk1\">, </span><span class=\"mtk10\">_TCHAR</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argv</span><span class=\"mtk1\">[])</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">register_class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk8\">&quot;user_t&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">register_field</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, &amp;</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">::</span><span class=\"mtk10\">index</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk8\">&quot;index&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">register_field</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">, </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\">, &amp;</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">::</span><span class=\"mtk10\">name</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk8\">&quot;name&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">class_t</span><span class=\"mtk1\">* clazz = </span><span class=\"mtk10\">class_t</span><span class=\"mtk1\">::</span><span class=\"mtk11\">from_name</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;user_t&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::cout &lt;&lt; </span><span class=\"mtk12\">clazz</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">name</span><span class=\"mtk1\">() &lt;&lt; </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">clazz</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">enumerate_fields</span><span class=\"mtk1\">([&amp;] (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::cout &lt;&lt; </span><span class=\"mtk8\">&quot;</span><span class=\"mtk6\">\\t</span><span class=\"mtk8\">&quot;</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk12\">field</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">name</span><span class=\"mtk1\">() &lt;&lt; </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">base_t</span><span class=\"mtk1\">* ptr = </span><span class=\"mtk12\">clazz</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">new_instance</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">base_t</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(clazz == </span><span class=\"mtk12\">ptr</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">get_class</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">delete</span><span class=\"mtk1\"> ptr;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>user_t</code>에 대해 reflection을 등록한다.\n(이 부분은 딱히 답이 없는데, 편하게 하려면 code generator를 사용한다던가 하는 수 밖에 없어보인다.\n아니면 [if1live]님이 했던 것처럼 매크로로 구조체를 만들도록 하든가.)</p>\n<p><code>class_t::from_name()</code> 함수를 사용해 이름으로 <code>class_t</code> 객체를 가져왔다. 그리고 <code>enumerate_fields()</code> 함수(본 문에서는 생략됨)를 사용하여 <code>class_t</code>가 가지고 있는 모든 field에 대한 이름을 출력해볼 수 있다.</p>\n<p>그리고 <code>new_instance()</code> 함수로 객체를 생성할 수 있는데, 이 때 type을 부모의 type(<code>base_t</code>)으로 명시해준다. 하지만 실제 <code>class_t</code>는 <code>user_t</code>에 대한 <code>class_t</code>이므로, 이 때 생성되는 객체는 <code>user_t</code>에 대한 객체이다. 그렇기 때문에 <code>clazz</code> 변수와 <code>ptr->get_class()</code> 변수가 모두 <code>user_t</code>에 대한 <code>class_t</code>로 일치하는 것이다.</p>\n<p>그냥 map 등록/참조이기 때문에 새로울 것이 없는 내용이다. 성능 문제야 당연히 있겠지만 map을 hash_map으로 바꾸는 것 이외에는 그닥 좋은 방법이 떠오르지 않는다. 오히려 register를 좀 자동으로 해줄 수 있는 방법이 없을까 하는 것이 더 고민이다.</p>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","excerpt":"지난 번 글의 문제점은 다음과 같다. class 정보가 없다. 따라서 이름으로부터 class에 대한 객체를 생성할 수가 없다. field에 대한 정보가 구체 class에 묶여있다. 따라서 그 class를 모르면 field…","fields":{"date":"June 04, 2012","shortdesc":"","slug":"/2012/06/04/using-reflection-at-cpp-2/"},"frontmatter":{"title":"c++에서 reflection 사용하기 2","tags":["c++","reflection"]}}},"pageContext":{"slug":"/2012/06/04/using-reflection-at-cpp-2/","older":{"slug":"/2012/06/03/using-reflection-at-cpp-1/","title":"c++에서 reflection 사용하기 1"},"newer":{"slug":"/2012/06/09/using-reflection-at-cpp-4/","title":"c++에서 reflection 사용하기 4"}}}}