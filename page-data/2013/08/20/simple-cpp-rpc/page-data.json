{"componentChunkName":"component---src-templates-page-tsx","path":"/2013/08/20/simple-cpp-rpc/","webpackCompilationHash":"3ce7c6393293ba3d24f1","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>generic한 rpc를 간단히 구현해보자.</p>\n<p>원래 의도는 asio를 사용하여 가벼운 덧셈 rpc 정도를 구현해보자는 것이었는데 왠지 모르게 스터디 친구들이 spec을 안드로메다로 보내버려서 <a href=\"https://c2.com/cgi/wiki?EmbeddedDomainSpecificLanguage\">DSEL</a>을 통한 rpc stub, skeleton 생성 코드를 구현해보도록 하겠다.</p>\n<p>양이 좀 많기 때문에 개요부터 설명하겠다.</p>\n<ul>\n<li>rpc 메시지을 주고 받기 위한 <strong>buffer</strong>를 먼저 설계하고, 메시지을 처리할 <strong>handler</strong>를 선언한다.</li>\n<li>이를 기반으로 하나의 연결(connection)을 처리할 <strong>session</strong>을 구현하고, 이 위에 <code>rpc_server</code>와 <code>rpc_client</code>을 구현할 것이다.</li>\n<li>마지막으로 구현된 기반 라이브러리를 바탕으로 <strong>DSEL</strong>을 만들어서 실제 사용할 rpc를 구현해볼 것이다.</li>\n</ul>\n<h2>buffer</h2>\n<p>네트워크로 byte를 주고 받기 위한 buffer는 다음과 같이 쉽게 구현할 수 있다. 다만 매번 복사되는 것을 막기 위해 shared_ptr 형태도로 사용할 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> std::vector&lt;</span><span class=\"mtk4\">char</span><span class=\"mtk1\">&gt; </span><span class=\"mtk10\">buffer_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> boost::shared_ptr&lt;</span><span class=\"mtk10\">buffer_t</span><span class=\"mtk1\">&gt; buffer_ref;</span></span></code></pre>\n<p>buffer로부터 데이터를 읽고 쓰는 class를 구현해보자. template만 있으면 primitive type에 대해서는 쉽게 구현할 수가 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">buffer_reader_t</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char</span><span class=\"mtk1\">* </span><span class=\"mtk12\">buffer</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_buffer</span><span class=\"mtk1\">(buffer) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">friend</span><span class=\"mtk1\"> </span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk1\">&amp; operator &gt;&gt; (</span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">reader</span><span class=\"mtk1\">, _Ty&amp; </span><span class=\"mtk12\">value</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        value = *</span><span class=\"mtk4\">reinterpret_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> _Ty*&gt;(</span><span class=\"mtk12\">reader._buffer</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reader._buffer</span><span class=\"mtk1\"> += </span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(_Ty);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> reader;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char</span><span class=\"mtk1\">* _buffer;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">buffer_writer_t</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_buffer</span><span class=\"mtk1\">(boost::make_shared&lt;</span><span class=\"mtk10\">buffer_t</span><span class=\"mtk1\">&gt;()) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">friend</span><span class=\"mtk1\"> </span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk1\">&amp; operator &lt;&lt; (</span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">writer</span><span class=\"mtk1\">, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> _Ty&amp; </span><span class=\"mtk12\">value</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char</span><span class=\"mtk1\">* byte_begin = </span><span class=\"mtk4\">reinterpret_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char</span><span class=\"mtk1\">*&gt;(&amp;value);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char</span><span class=\"mtk1\">* byte_end = byte_begin + </span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(value);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        std::</span><span class=\"mtk11\">copy</span><span class=\"mtk1\">(byte_begin, byte_end, std::</span><span class=\"mtk11\">back_inserter</span><span class=\"mtk1\">(*</span><span class=\"mtk12\">writer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_buffer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get</span><span class=\"mtk1\">()));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> writer;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    buffer_ref </span><span class=\"mtk11\">buffer</span><span class=\"mtk1\">() { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> _buffer; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    buffer_ref _buffer;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p><code>buffer_writer_t</code> 객체는 여기저기 복사되어 전달될 수 있다. 그 때마다 buffer가 복사되면 자원이 아까우니 <code>shared_ptr</code> 형태인 buffer_ref를 사용하도록 하였다.</p>\n<h2>handler</h2>\n<p><code>buffer_reader_t</code>와 <code>buffer_writer_t</code>가 정의되었으니 handler는 다음과 같이 정의할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> boost::function&lt;</span><span class=\"mtk4\">bool</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk1\">, </span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk1\">)&gt; </span><span class=\"mtk10\">handler_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> std::array&lt;</span><span class=\"mtk10\">handler_t</span><span class=\"mtk1\">, </span><span class=\"mtk7\">128</span><span class=\"mtk1\">&gt; </span><span class=\"mtk10\">handler_array_t</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>rpc 함수는 필요한 인자(argument)를 buffer로부터 읽어서(<code>buffer_reader_t</code>) 그 결과를 다시 buffer로 써야한다(<code>buffer_writer_t</code>). 따라서 함수 signature가 reader와 writer를 인자로 받도록 구성된 것이다. 이 때 <code>buffer_writer_t</code> 객체가 reference가 아닌 이유는 writer가 갖고 있는 buffer 자체가 이미 <code>buffer_ref</code>이기 때문이다. 반환 값이 bool인 이유는 handler가 false를 반환할 경우 writer에 의해 작성된 buffer를 network로 전달하지 않기 위함이다.</p>\n<p><code>rpc_client_t</code>와 <code>rpc_server_t</code>는 각기 다른 <code>handler_array_t</code>를 갖는다. 이 때 가질 수 있는 handler는 128개로 제한하였다. (원래 <code>UINT16_MAX</code>를 썼는데 이만큼 쓸 경우 <code>rpc_server_t</code>나 <code>rpc_client_t</code> 객체를 local variable로 만들면 stackoverflow가 발생한다-_-)</p>\n<h2>session</h2>\n<p>필요한 자료구조를 다 만들었으니 session도 쉽게 만들 수 있다. <code>session_t</code> class는 하나의 socket을 갖고, 그에 대해서 async-read/write 요청/완료 처리를 하는 class이다. peer로부터 message를 받으면 해당 message를 dispatch하여 적절한 handler를 호출해준다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">session_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">boost</span><span class=\"mtk1\">::enable_shared_from_this&lt;</span><span class=\"mtk10\">session_t</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">session_t</span><span class=\"mtk1\">(boost::asio::io_service&amp; </span><span class=\"mtk12\">io_service</span><span class=\"mtk1\">, </span><span class=\"mtk10\">handler_array_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">handler_array</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">request_connect</span><span class=\"mtk1\">(boost::asio::ip::tcp::endpoint </span><span class=\"mtk12\">endpoint</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">request_read_msg_size</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">request_read_msg</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">request_write</span><span class=\"mtk1\">(buffer_ref </span><span class=\"mtk12\">buffer</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk11\">is_connected</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> _connected; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">friend</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">rpc_server_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handle_connect</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> boost::system::error_code&amp; </span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handle_read_msg_size</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> boost::system::error_code&amp; </span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handle_read_msg</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> boost::system::error_code&amp; </span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handle_write</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> boost::system::error_code&amp; </span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    boost::asio::io_service&amp; _io_service;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    boost::asio::ip::tcp::socket _socket;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">size_t</span><span class=\"mtk1\"> _msg_size;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">buffer_t</span><span class=\"mtk1\"> _msg_buffer;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::atomic_bool _connected;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">handler_array_t</span><span class=\"mtk1\">&amp; _handler_array;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> boost::shared_ptr&lt;</span><span class=\"mtk10\">session_t</span><span class=\"mtk1\">&gt; session_ref;</span></span></code></pre>\n<p><a href=\"https://www.boost.org/doc/libs/1_54_0/doc/html/boost_asio.html\">boost asio</a>에 대해 자세한 설명은 하지 않겠다. 어쨌든 중요한건 요청을 수행하는 request 함수와 완료를 처리하는 handle 함수가 분리되어있다는 것이다.</p>\n<p>전체 코드를 다 올리면 너무 기니까 간단하게 message를 읽는 코드만 옮겨보았다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> session_t::</span><span class=\"mtk11\">request_read_msg_size</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    boost::asio::</span><span class=\"mtk11\">async_read</span><span class=\"mtk1\">(_socket,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::asio::</span><span class=\"mtk11\">buffer</span><span class=\"mtk1\">(&amp;_msg_size, </span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(_msg_size)),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::asio::</span><span class=\"mtk11\">transfer_exactly</span><span class=\"mtk1\">(</span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(_msg_size)),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::</span><span class=\"mtk11\">bind</span><span class=\"mtk1\">(&amp;session_t::handle_read_msg_size, </span><span class=\"mtk11\">shared_from_this</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::asio::placeholders::error));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> session_t::</span><span class=\"mtk11\">request_read_msg</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_msg_buffer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">size</span><span class=\"mtk1\">() &lt; _msg_size)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_msg_buffer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">resize</span><span class=\"mtk1\">(_msg_size);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    boost::asio::</span><span class=\"mtk11\">async_read</span><span class=\"mtk1\">(_socket,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::asio::</span><span class=\"mtk11\">buffer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_msg_buffer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">data</span><span class=\"mtk1\">(), _msg_size),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::asio::</span><span class=\"mtk11\">transfer_exactly</span><span class=\"mtk1\">(_msg_size),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::</span><span class=\"mtk11\">bind</span><span class=\"mtk1\">(&amp;session_t::handle_read_msg, </span><span class=\"mtk11\">shared_from_this</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::asio::placeholders::error));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>먼저 msg<em>size를 먼저 받아온 후 그 크기만큼 msg를 읽는다. `</em>msg<em>size<code>변수는</code>size</em>t<code>type인데</code>asio::buffer()<code>는 type을 가리지 않기 때문에</code>size<em>t<code>변수에 바로 크기를 받아올 수 있다. 그 후 필요한 크기만큼 buffer를 적절하게 늘려서</code>transfer</em>exactly<code>로</code>async_read()`를 요청하면 boost asio가 알아서 잘 채워준다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> session_t::</span><span class=\"mtk11\">handle_read_msg_size</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> boost::system::error_code&amp; </span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!error) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">request_read_msg</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> _connected = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> session_t::</span><span class=\"mtk11\">handle_read_msg</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> boost::system::error_code&amp; </span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!error) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">reader</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_msg_buffer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">data</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">uint16_t</span><span class=\"mtk1\"> msg_type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        reader &gt;&gt; msg_type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">handler_t</span><span class=\"mtk1\"> handler = </span><span class=\"mtk12\">_handler_array</span><span class=\"mtk1\">[msg_type];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (handler != </span><span class=\"mtk4\">nullptr</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk1\"> writer;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">handler</span><span class=\"mtk1\">(reader, writer))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk11\">request_write</span><span class=\"mtk1\">(</span><span class=\"mtk12\">writer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">buffer</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">request_read_msg_size</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> _connected = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>msg_size</code> 요청 후 <code>msg_size</code>에 대한 완료 처리를 하고 그 다음에 msg 요청 후 msg에 대한 완료 처리를 한다. 그리고 다시 <code>msg_size</code> 요청하여 다음 msg를 받을 수 있도록 한다. 이렇게 하는 이유는 한 시점에 <strong>반드시 하나의 msg만 읽는 순서가 보장</strong>되도록 하기 위함이다.</p>\n<p>어쨌든 msg를 읽었으면 <code>msg_type</code> 확인해서 <code>handler_array</code>에서 찾아 handler를 호출해준다. 그리고 원할 경후 handler에 의해 작성된 buffer<em>writer</em>t 내의 buffer를 peer에게 보내준다. (추후 코드가 나오겠지만 <code>handler_array</code>의 index 값과 message의 type 값은 일치하도록 구현하였다)</p>\n<h2>rpc_server</h2>\n<p><code>rpc_server_t</code> class는 boost asio acceptor를 사용하여 socket을 받고, <code>session_t</code> 객체를 만들어서 <code>request_msg_size()</code> 함수를 불러주는 class이다. protected로 노출되는 <code>handler_array</code>를 갖는데, 그 이유는 이를 상속받아 구현할 <code>rpc_server_t</code> class가 각 message를 받아 어떻게 처리할지 handler를 구현할 수 있도록 하기 위함이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">rpc_server_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">rpc_server_t</span><span class=\"mtk1\">(boost::asio::io_service&amp; </span><span class=\"mtk12\">io_service</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">server_port</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">~rpc_server_t</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">request_accept</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handle_accept</span><span class=\"mtk1\">(session_ref </span><span class=\"mtk12\">session</span><span class=\"mtk1\">, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> boost::system::error_code&amp; </span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">protected:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">handler_array_t</span><span class=\"mtk1\"> _handler_array;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    boost::asio::io_service&amp; _io_service;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    boost::asio::ip::tcp::acceptor _acceptor;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> rpc_server_t::</span><span class=\"mtk11\">request_accept</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    session_ref session = boost::</span><span class=\"mtk11\">make_shared</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">session_t</span><span class=\"mtk1\">&gt;(_io_service, _handler_array);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_acceptor</span><span class=\"mtk1\">.</span><span class=\"mtk11\">async_accept</span><span class=\"mtk1\">(</span><span class=\"mtk12\">session-&gt;_socket</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        boost::</span><span class=\"mtk11\">bind</span><span class=\"mtk1\">(&amp;rpc_server_t::handle_accept, </span><span class=\"mtk4\">this</span><span class=\"mtk1\">, session,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            boost::asio::placeholders::error));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> rpc_server_t::</span><span class=\"mtk11\">handle_accept</span><span class=\"mtk1\">(session_ref </span><span class=\"mtk12\">session</span><span class=\"mtk1\">, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> boost::system::error_code&amp; </span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">session</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">request_read_msg_size</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">request_accept</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>역시 accept의 순서 보장을 위해서 하나 accept 요청하고, 그 완료를 처리 후에 다음 accept를 요청하도록 되어있다. 사실 처음에 동시 접속이 많을 경우 위 같은 방법은 별로 좋지 않을 수 있다. 이를 위해 프로그램 처음 구동 시 <code>request_accept()</code>를 미리 많이 불러놓는 경우도 있다.</p>\n<p><code>rpc_server</code> 측에 구현되는 message handler는 각 <code>message_type</code>에 따라 구현이 달라야 한다. 두 int의 덧셈을 요청하는 message라면 <code>int+int</code>을 구현해야 하고, 만약 두 double의 곱셈을 요청하는 message라면 <code>dobule*double</code>을 구현해야 하기 때문이다. 이 handler들은 추후 <code>rpc_server_t</code> class를 상속 받아 구현하는 rpc class에서 정의될 것이다.</p>\n<h2>rpc_client</h2>\n<p><code>rpc_client_t</code> class는 <code>rpc_server_t</code> class에 비해 다소 복잡하다.</p>\n<ul>\n<li>rpc 수행 결과를 비동기로 받아야 하니 rpc 요청 시 결과를 처리할 callback을 받아야 한다.</li>\n<li>그리고 해당 rpc에 대한 수행 결과가 언제 올지 모르니, 요청할 때 id를 발급해서 id와 callback을 map같은 곳에다가 저장을 해두어야 한다.</li>\n<li>그런데 rpc 함수의 return type은 제각각이니 이 callback을 일관된 type으로 통일을 해주어야 한다.</li>\n</ul>\n<p>그렇기 때문에 코드가 좀 복잡해진다. 일단 전체 코드를 보면 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">rpc_client_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">rpc_client_t</span><span class=\"mtk1\">(boost::asio::io_service&amp; </span><span class=\"mtk12\">io_service</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">~rpc_client_t</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> std::string&amp; </span><span class=\"mtk12\">addr</span><span class=\"mtk1\">, </span><span class=\"mtk4\">unsigned</span><span class=\"mtk1\"> </span><span class=\"mtk4\">short</span><span class=\"mtk1\"> </span><span class=\"mtk12\">port</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">protected:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">general_callback_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">~general_callback_t</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> operator () (</span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk1\">) = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> std::unique_ptr&lt;</span><span class=\"mtk10\">general_callback_t</span><span class=\"mtk1\">&gt; general_callback_ptr;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> std::map&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, general_callback_ptr&gt; </span><span class=\"mtk10\">callback_map_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">register_callback</span><span class=\"mtk1\">(general_callback_ptr </span><span class=\"mtk12\">callback</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    general_callback_ptr </span><span class=\"mtk11\">get_callback</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">req_num</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">protected:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    session_ref _session;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initialize_handlers</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk11\">default_handler</span><span class=\"mtk1\">(</span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reader</span><span class=\"mtk1\">, </span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">writer</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">handler_array_t</span><span class=\"mtk1\"> _handler_array;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">callback_map_t</span><span class=\"mtk1\"> _callback_map;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::mutex _callback_map_mutex;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> std::atomic_int _req_num_gen;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>callback을 단일 type을 취급하기 위해 <code>general_callback_t</code> struct를 작성하였다. 단순히 <code>buffer_reader_t</code> 객체를 받아서 뭔가 처리하는 functor이고, 여기에 필요한 코드는 추후 rpc client 구현 시 macro로 찍어내게 될 것이다. 어쨌든 <code>general_callback_t</code>를 만들었으니 이 소유권을 보장해주기 위한 <code>unique_ptr</code>을 하나 선언하고, 이에 대한 map을 구성할 수 있다.</p>\n<p>이제 <code>atomic_int</code>에 의해 thread-safe하게 증가되는 <code>request_number</code>와 함께 callback을 map에다가 register할 수 있는 것이다. 그리고 추후 해당 <code>request_number</code>에 대한 결과가 오면 <code>callback</code>을 꺼내서 호출해주면 된다.</p>\n<p><code>rpc_server_t</code> class와는 다르게 <code>rpc_client_t</code> class는 <code>handler_array</code>를 갖지만 <code>default_handler</code>로 모든 것을 처리한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> rpc_client_t::</span><span class=\"mtk11\">initialize_handlers</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">auto</span><span class=\"mtk1\"> handler = boost::</span><span class=\"mtk11\">bind</span><span class=\"mtk1\">(&amp;rpc_client_t::default_handler, </span><span class=\"mtk4\">this</span><span class=\"mtk1\">, _1, _2);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">auto</span><span class=\"mtk1\">&amp; each : _handler_array)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        each = handler;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">bool</span><span class=\"mtk1\"> rpc_client_t::</span><span class=\"mtk11\">default_handler</span><span class=\"mtk1\">(</span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reader</span><span class=\"mtk1\">, </span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">writer</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> req_num;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    reader &gt;&gt; req_num;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    general_callback_ptr callback = </span><span class=\"mtk11\">get_callback</span><span class=\"mtk1\">(req_num);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (callback != </span><span class=\"mtk4\">nullptr</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        (*callback)(reader);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>왜냐하면 <code>rpc_client</code> 입장에서는 도착하는 모든 message가 <code>request_number + result</code> 일 것인데, <code>request_number</code> 가져와서 <code>callback</code>을 얻었으면 실제 result를 얻는 것은 callback 내부에서 처리하기 때문에 handler에서는 따로 더 해줄 일이 없기 때문이다. (return false를 하는 이유는 rpc<em>client가 다시 rpc</em>server에게 뭔가 보낼 필요가 없기 때문이다)</p>\n<p>callback 내에서는 reader 객체에서 result 값을 읽어서 사용자가 넘긴 진짜 callback을 불러줄 것이다. 그리고 이러한 코드는 macro에 의해서 자동 생성될 것이다.</p>\n<h2>code generating</h2>\n<p>이제 기반 class 구현이 끝났으니 기반 class를 상속받아 우리가 원하는 rpc class를 작성하면 되겠다. 하지만 우리의 관심사는 <strong>rpc 함수의 interface가 어떻게 선언되고, 그것에 대한 코드가 어떻게 정의되는가</strong>이다. 나머지 byte serializer나 rpc type enum 선언 등의 <a href=\"https://en.wikipedia.org/wiki/Boilerplate_code\">boilerplate code</a>를 매번 작성해주는 것은 매우 귀찮은 일이니 직접하지 말고 컴파일러를 시키는 것이 여러모로 좋겠다.</p>\n<p>일단 원하는 최종 형태의 코드는 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">RPC_BEGIN</span><span class=\"mtk1\">(example)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">RPC_METHOD2</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, add, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, a, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, b)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">RPC_METHOD2</span><span class=\"mtk1\">(</span><span class=\"mtk4\">double</span><span class=\"mtk1\">, add, </span><span class=\"mtk4\">double</span><span class=\"mtk1\">, a, </span><span class=\"mtk4\">double</span><span class=\"mtk1\">, b)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">RPC_METHOD3</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, add, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, a, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, b, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, c)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">RPC_END</span><span class=\"mtk1\">(example)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> example::</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> a + b; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">double</span><span class=\"mtk1\"> example::</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk4\">double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> a + b; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> example::</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">c</span><span class=\"mtk1\">) { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> a + b + c; }</span></span></code></pre>\n<p>rpc interface에 대한 선언을 하고, 그에 대한 구현을 한다. 그러면 필요한 나머지 코드가 모두 만들어지는 것이다.</p>\n<p>type<em>enum, server 측의 rpc 수행 함수의 prototype, rpc</em>server, rpc<em>client 총 4개의 코드를 찍어내야 한다. 여기에는 [X Macro pattern](<a href=\"https://en.wikipedia.org/wiki/X\">https://en.wikipedia.org/wiki/X</a></em>Macro)이 사용될 것이다.</p>\n<p>일단 본 예제에서는 총 3개의 인자까지 받을 수 있는 <code>RPC_METHOD3</code> macro까지 구현하였다. 결국 인자 개수만큼 macro를 다 만들어주어야 한다는 것인데 이러한 반복 코드는 <a href=\"https://www.boost.org/doc/libs/release/libs/preprocessor/doc/index.html\">boost pp</a>를 사용해서 줄일 수 있다. 그렇지만 이 글에서 해당 내용까지 다루면 너무 길어지므로 일단 그냥 중복된 코드를 포함한 채로 macro를 선언하였다.</p>\n<p>설명의 편의를 위해 <code>RPC_METHOD2()</code>를 기준으로 설명할 것이다.</p>\n<p>type enum이 필요한 이유는 rpc client와 server가 어떤 rpc를 요청했는지를 구분하기 위한 식별자로 사용하기 위함이다. 그냥 enum 내에 rpc 함수 이름을 열거하면 되는데, 동일한 이름의 다른 argument type의 rpc가 존재할 수 있으니 rpc 이름에 type을 붙여서 type enum을 구성하도록 하자.</p>\n<p>type enum 이름은 앞으로도 자주 사용되므로 이를 위한 helper macro를 선언한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_TYPE2</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name, type1, type2</span><span class=\"mtk4\">) type_</span><span class=\"mtk12\">##name##_##type1##_##type2</span></span></code></pre>\n<p>그리고 helper macro를 사용하여 enum을 생성하는 코드를 만들 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">) namespace </span><span class=\"mtk10\">name</span><span class=\"mtk4\"> { enum type_enum {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_METHOD2</span><span class=\"mtk4\">(</span><span class=\"mtk12\">rtype, name, type1, var1, type2, var2</span><span class=\"mtk4\">) </span><span class=\"mtk11\">RPC_TYPE2</span><span class=\"mtk4\">(name, type1, type2),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_END</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">) }; </span><span class=\"mtk3\">/* enum */</span><span class=\"mtk4\"> } </span><span class=\"mtk3\">/* namespace */</span></span></code></pre>\n<p>코드 생성의 편의를 위해 namespace 내에 코드를 만들도록 하였다.</p>\n<p>rpc server 측의 코드를 생성할 때에는, 실제 구현할 rpc 함수에 대한 prototype 선언, 그리고 message를 통해 실제 rpc 함수를 불러주는 entry function 2개의 코드를 만들어주어야 한다.</p>\n<p>prototype을 생성해주는 코드는 간단한 편이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">) namespace </span><span class=\"mtk10\">name</span><span class=\"mtk4\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_METHOD2</span><span class=\"mtk4\">(</span><span class=\"mtk12\">rtype, name, type1, var1, type2, var2</span><span class=\"mtk4\">) rtype </span><span class=\"mtk11\">name</span><span class=\"mtk4\">(type1 var1, type2 var2);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_END</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">) };</span></span></code></pre>\n<p>그냥 해당 namespace 안에 rpc 함수 이름을 갖고, 지정된 type의 인자를 받는 함수를 선언하였다.</p>\n<p>rpc server class를 만들어주는 macro는 약간 복잡하다. 아까 만든 rpc<em>server</em>t class를 상속받는 class를 하나 만든 후, <code>handler_array</code>에 각 rpc message를 받아서 실제 rpc 함수를 불러주는 과정의 코드를 만든다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    namespace </span><span class=\"mtk10\">name</span><span class=\"mtk4\"> { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    class </span><span class=\"mtk10\">name</span><span class=\"mtk12\">##_rpc_server_t</span><span class=\"mtk4\"> : public </span><span class=\"mtk10\">rpc_server_t</span><span class=\"mtk4\"> { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    public: </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        name</span><span class=\"mtk12\">##_rpc_server_t</span><span class=\"mtk4\">(boost::asio::io_service</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\"> io_service, int server_port) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            : </span><span class=\"mtk10\">rpc_server_t</span><span class=\"mtk4\">(io_service, server_port) { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            </span><span class=\"mtk11\">initialize_handlers</span><span class=\"mtk4\">(); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        } </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    private: </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        void </span><span class=\"mtk11\">initialize_handlers</span><span class=\"mtk4\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_METHOD2</span><span class=\"mtk4\">(</span><span class=\"mtk12\">rtype, name, type1, var1, type2, var2</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            </span><span class=\"mtk12\">_handler_array</span><span class=\"mtk4\">[</span><span class=\"mtk11\">RPC_TYPE2</span><span class=\"mtk4\">(name, type1, type2)] </span><span class=\"mtk1\">=</span><span class=\"mtk4\"> [] </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                    (</span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk4\"> reader, </span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk4\"> writer) </span><span class=\"mtk1\">-&gt;</span><span class=\"mtk4\"> bool { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                int req_num; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                type1 var1; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                type2 var2; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                reader </span><span class=\"mtk1\">&gt;&gt;</span><span class=\"mtk4\"> req_num </span><span class=\"mtk1\">&gt;&gt;</span><span class=\"mtk4\"> var1 </span><span class=\"mtk1\">&gt;&gt;</span><span class=\"mtk4\"> var2; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                rtype result </span><span class=\"mtk1\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">name</span><span class=\"mtk4\">(var1, var2); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                writer </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> sizeof(uint16_t) </span><span class=\"mtk1\">+</span><span class=\"mtk4\"> sizeof(int) </span><span class=\"mtk1\">+</span><span class=\"mtk4\"> sizeof(rtype); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                writer </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> static_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">uint16_t</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\">(</span><span class=\"mtk11\">RPC_TYPE2</span><span class=\"mtk4\">(name, type1, type2)); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                writer </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> req_num; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                writer </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> result; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                </span><span class=\"mtk15\">return</span><span class=\"mtk4\"> true; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_END</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        } </span><span class=\"mtk3\">/* initialize_handlers */</span><span class=\"mtk4\"> </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    }; </span><span class=\"mtk3\">/* class */</span><span class=\"mtk4\"> </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    }  </span><span class=\"mtk3\">/* namespace */</span></span></code></pre>\n<p>그냥 <code>rpc_server_t</code> class 상속받고, <code>initialize_handlers()</code> 함수를 만든다. 그리고 그 함수 내에서 각 rpc message를 어떻게 처리할지에 대한 코드를 만드는데, 필요한 인자 정보를 <code>buffer_reader_t</code> 객체를 통해 읽고, 아까 prototype을 선언한 실제 함수를 불러 결과(result)를 얻은 뒤, 다시 그 결과를 <code>buffer_writer_t</code> 객체에 남아서 peer(client)에게 전달해주는 것이다.</p>\n<p>rpc client 쪽은 callback 때문에 약간 복잡해보일 수 있지만 server와 난이도는 동일하다. 인자로 받은 내용을 buffer에 담아 peer(server)에게 보내고, 그 결과가 오면 callback을 불러주면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    namespace </span><span class=\"mtk10\">name</span><span class=\"mtk4\"> { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    class </span><span class=\"mtk10\">name</span><span class=\"mtk12\">##_rpc_client_t</span><span class=\"mtk4\"> : public </span><span class=\"mtk10\">rpc_client_t</span><span class=\"mtk4\"> { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    public: </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        name</span><span class=\"mtk12\">##_rpc_client_t</span><span class=\"mtk4\">(boost::asio::io_service</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\"> io_service) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            : </span><span class=\"mtk10\">rpc_client_t</span><span class=\"mtk4\">(io_service) { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_METHOD2</span><span class=\"mtk4\">(</span><span class=\"mtk12\">rtype, name, type1, var1, type2, var2</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        void </span><span class=\"mtk11\">name</span><span class=\"mtk4\">(type1 var1, type2 var2, boost::function</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">void (rtype)</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> callback) { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            </span><span class=\"mtk10\">buffer_writer_t</span><span class=\"mtk4\"> writer; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            writer </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> sizeof(uint16_t) </span><span class=\"mtk1\">+</span><span class=\"mtk4\"> sizeof(int) </span><span class=\"mtk1\">+</span><span class=\"mtk4\"> sizeof(type1) </span><span class=\"mtk1\">+</span><span class=\"mtk4\"> sizeof(type2); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            writer </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> static_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">uint16_t</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\">(</span><span class=\"mtk11\">RPC_TYPE2</span><span class=\"mtk4\">(name, type1, type2)); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            struct </span><span class=\"mtk10\">__callback_t</span><span class=\"mtk4\"> : public </span><span class=\"mtk10\">general_callback_t</span><span class=\"mtk4\"> { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                virtual void operator () (</span><span class=\"mtk10\">buffer_reader_t</span><span class=\"mtk4\"> </span><span class=\"mtk12\">reader</span><span class=\"mtk4\">) { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                    rtype result; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                    reader </span><span class=\"mtk1\">&gt;&gt;</span><span class=\"mtk4\"> result; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                    </span><span class=\"mtk11\">_callback</span><span class=\"mtk4\">(result); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                } </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                </span><span class=\"mtk11\">__callback_t</span><span class=\"mtk4\">(boost::function</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">void (rtype)</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk12\">callback</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                    : </span><span class=\"mtk11\">_callback</span><span class=\"mtk4\">(callback) {} </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                boost::function</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">void (rtype)</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> _callback; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            }; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            int req_num </span><span class=\"mtk1\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">register_callback</span><span class=\"mtk4\">(</span><span class=\"mtk11\">general_callback_ptr</span><span class=\"mtk4\">( </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">                                new </span><span class=\"mtk11\">__callback_t</span><span class=\"mtk4\">(callback))); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            writer </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> req_num </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> var1 </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> var2; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">            </span><span class=\"mtk12\">_session</span><span class=\"mtk4\">-&gt;</span><span class=\"mtk11\">request_write</span><span class=\"mtk4\">(</span><span class=\"mtk12\">writer</span><span class=\"mtk4\">.</span><span class=\"mtk11\">buffer</span><span class=\"mtk4\">()); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RPC_END</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">)   </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    }; </span><span class=\"mtk3\">/* class */</span><span class=\"mtk4\">  </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    }  </span><span class=\"mtk3\">/* namespace */</span></span></code></pre>\n<p><code>size</code>, <code>msg_type</code>, <code>req_num</code>, <code>args</code> 순으로 데이터를 writer에 써서 peer(server)에게 보낸다. 이 때 user-callback은 rtype(return type)을 인자로 받는 void function인데, 이를 callback map에 등록하기 위해 <code>general_callback_t</code> 객체로 감싼다. 이 <code>__callback_t</code> 객체의 <code>operator ()</code>가 불렸다는 것은 server의 수행 결과가 <code>buffer_reader_t</code> 객체에 담겼다는 것이므로 여기서 result를 읽어서<code>_callback</code>(user-callback)을 불러주기만 하면 된다.</p>\n<p>이제 X-Macro pattern을 사용하기 위한 macro function 선언은 끝났다. 이제 약간의 전처리기 기술을 사용하면 코드가 완성된다. 개념을 익히기 위해 다음 코드르 보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_OPTION_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">/* define macro functions */</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> _TARGET_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">/* undef macro functions */</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span></code></pre>\n<p>위 코드는 <code>_OPTION_</code> macro가 정의되어 있을 때만 수행되는 코드로, macro function을 그 구간 내에서만 사용하도록 정의(define) 후 해제(undef)하고 있다. 재밌는 것은 #include 부분인데 특정 파일을 지칭한 것이 아니라 <code>_TARGET_</code>라는 macro value를 지칭하고 있다. 즉, 위 내용이 들어있는 파일을 include하기 전에 <code>_TARGET_</code> macro에 적절한 파일명을 넣어주면 알아서 해당 파일을 include해준다는 것이다.</p>\n<p>본 소스의 <code>rpc_gen_spec.h</code> 파일을 보면 <code>_RPC_GEN_TYPE_</code>, <code>_RPC_GEN_SERVER_</code>, <code>_RPC_GEN_CLIENT_</code> 3개의 option에 대해서 각각 macro function을 교체한 후 <code>_RPC_GEN_TARGET_</code> macro value로 정의한 파일을 include하도록 되어있다.\n이제 실제로 코드를 찍어내기 위한 <code>rpc_gen.h</code>에서는 다음과 같이 한 번에 여러 코드를 만들어낼 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GENERATING_</span><span class=\"mtk4\"> </span><span class=\"mtk7\">1</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GEN_TYPE_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#     include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;rpc_gen_spec.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GEN_TYPE_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_SERVER_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#     define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GEN_SERVER_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#        include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;rpc_gen_spec.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#       undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GEN_SERVER_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_CLIENT_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#      define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GEN_CLIENT_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#       include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;rpc_gen_spec.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#     undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GEN_CLIENT_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GENERATING_</span></span></code></pre>\n<p>일단 <code>_RPC_GEN_TYPE_</code> macro를 선언하고 <code>rpc_gen_spec.h</code> 파일을 include해서 <code>type_enum</code> 코드를 먼저 만들어낸다. 그리고 <code>_RPC_SERVER_</code>라는 option이 있으면 다시 <code>_RPC_GEN_SERVER_</code> macro 선언 후 <code>rpc_gen_spec.h</code> 파일을 include해서 서버 측 코드를 만들어낸다. 같은 방법으로 <code>_RPC_CLIENT_</code> option이 있으면 클라이언트 코드도 만들어낸다.</p>\n<p>위 코드가 수행되는 동안 <code>_RPC_GENERATING_</code> 이라는 macro를 선언하고 있는데 그 이유는 이 파일을 include하는 쪽에서 초기 값을 선언할지, 아니면 코드 template을 선언할지에 대한 phase를 결정하도록 하기 위함이다.</p>\n<p><code>example_rpc.h</code> 파일을 보면 이해하기가 쉽다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifndef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GENERATING_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_SERVER_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_CLIENT_</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_RPC_GEN_TARGET_</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;example_rpc.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#   include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;rpc_gen.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#else</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">RPC_BEGIN</span><span class=\"mtk1\">(example)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">RPC_METHOD2</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, add, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, a, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, b)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">RPC_METHOD2</span><span class=\"mtk1\">(</span><span class=\"mtk4\">double</span><span class=\"mtk1\">, add, </span><span class=\"mtk4\">double</span><span class=\"mtk1\">, a, </span><span class=\"mtk4\">double</span><span class=\"mtk1\">, b)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">RPC_METHOD3</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, add, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, a, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, b, </span><span class=\"mtk4\">int</span><span class=\"mtk1\">, c)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">RPC_END</span><span class=\"mtk1\">(example)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span></code></pre>\n<p><code>_RPC_GENERATING_</code> macro가 선언되어 있지 않다면 <code>_RPC_SERVER_</code>, <code>_RPC_CLIENT_</code> option을 주고, <code>_RPC_GEN_TARGET_</code>으로 이 파일 이름을 준다. 즉, 처음 이 파일이 include될 때 코드를 생성하기 위한 초기 값을 지정하는 것이다.</p>\n<p>그리고 <code>rpc_gen.h</code> 파일이 include가 되면 <code>_RPC_GENERATING_</code> macro가 설정되고 <code>rpc_gen_spec.h</code> 파일이 include되면서 <code>_RPC_GEN_TARGET_</code>으로 지정된 <code>example_rpc.h</code> 파일이 <strong>다시</strong> include가 될 것이다. 이 때 <code>_RPC_GENERATING_</code> macro가 정의되었으므로 <code>RPC_BEGIN(...)</code> 코드가 사용될 것이고 이 macro function들이 적절히 치환되어 원하는 코드가 적절하게 생성될 것이다.</p>\n<h2>example</h2>\n<p>이제 모든 작업이 끝났으니 다음과 같이 코드를 실행해볼 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;example_rpc.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> example::</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> a + b; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">double</span><span class=\"mtk1\"> example::</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk4\">double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> a + b; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> example::</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">c</span><span class=\"mtk1\">) { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> a + b + c; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_tmain</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argc</span><span class=\"mtk1\">, _TCHAR* </span><span class=\"mtk12\">argv</span><span class=\"mtk1\">[]) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    boost::asio::io_service io_service;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    example::</span><span class=\"mtk10\">example_rpc_server_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">server</span><span class=\"mtk1\">(io_service, </span><span class=\"mtk7\">12345</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">server</span><span class=\"mtk1\">.</span><span class=\"mtk11\">request_accept</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    example::</span><span class=\"mtk10\">example_rpc_client_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">client</span><span class=\"mtk1\">(io_service);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">client</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;127.0.0.1&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">12345</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">client</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk7\">20</span><span class=\"mtk1\">, [] (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> result) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        std::cout &lt;&lt; result &lt;&lt; std::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">client</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">11.5</span><span class=\"mtk1\">, </span><span class=\"mtk7\">23.7</span><span class=\"mtk1\">, [] (</span><span class=\"mtk4\">double</span><span class=\"mtk1\"> result) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        std::cout &lt;&lt; result &lt;&lt; std::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">client</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk7\">20</span><span class=\"mtk1\">, </span><span class=\"mtk7\">30</span><span class=\"mtk1\">, [] (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> result) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        std::cout &lt;&lt; result &lt;&lt; std::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">io_service</span><span class=\"mtk1\">.</span><span class=\"mtk11\">run</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>client 객체를 통해 rpc argument가 적절히 rpc server에게 전달되어 실 구현 함수가 수행된 후, 그 결과가 적절히 client의 callback으로 돌아와 console에 출력되는 것을 볼 수 있다.</p>\n<h2>정리</h2>\n<ul>\n<li>macro 코드가 좀 더러운데 이 부분은 boost pp로 정리하면 어느 정도 괜찮아진다.</li>\n<li>thread-safe하지 않은 코드가 좀 보이는데 적절하게 고쳐 쓰면 multi-thread에서도 안전하게 사용할 수 있다.</li>\n<li>handler 개수가 128개로 제한되는 것이 아까우면 handler_array가 heap에 할당되도록 수정하면 된다.</li>\n<li>rpc 결과를 callback으로 받아오는 것이 마음에 들지 않는다면 boost coroutine을 써서 실행 흐름을 제어하면 된다.</li>\n</ul>\n<p>어쨌든 할만큼 한 것 같다. reflection이 익숙한 스터디 친구들은 저정도로 만족하지 못할 것 같지만 c++에서 code generator 도움이 없이 코드를 정리하면 저게 한계다. 정말이다!</p>\n<h3>소스 코드</h3>\n<ul>\n<li><a href=\"https://github.com/lacti/cpp-rpc\">Github: cpp-rpc</a></li>\n<li>첨부된 프로젝트를 실행하기 위해서는 BOOST<em>INCLUDE, BOOST</em>LIB64 macro에 각 경로를 지정해야 한다. Visual Studio의 Property Manager window를 켜서, Microsoft.Cpp.x64.user를 열어 User Macros에 BOOST<em>INCLUDE와 BOOST</em>LIB64를 추가해주면 된다.</li>\n</ul>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"generic한 rpc를 간단히 구현해보자.원래 의도는 asio를 사용하여 가벼운 덧셈 rpc 정도를 구현해보자는 것이었는데 왠지 모르게 스터디 친구들이 spec을 안드로메다로 보내버려서 DSEL을 통한 rpc stub, skeleton…","fields":{"date":"August 20, 2013","shortdesc":""},"frontmatter":{"title":"generic한 c++ rpc 구현","tags":["c++","rpc"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2013/08/20/simple-cpp-rpc/"}}}