{"componentChunkName":"component---src-templates-page-tsx","path":"/2013/08/12/implements-producer-consumer-model/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>먹깨비 과제를 풀어보자. 여러 가지 구현법이 있을 것인데, 나는 간단하게</p>\n<ul>\n<li>바구니는 공유 자원이니 lock으로 보호하고,</li>\n<li>제빵사와 먹깨비는 actor로 만들어서 매 tick마다 상황 판단 후 작업을 처리하도록 했다.</li>\n</ul>\n<p>따라서 공유 자원을 보호하기 위한 <code>spin_lock</code>과 actor 기반 코드를 만들었고 그 기반으로 바구니, 제빵사, 먹깨비를 만들었다.</p>\n<p>먼저 <code>spin_lock</code>을 만들어보자. 이전 글에서 몇 번 설명한적 있으니 대충 보자.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">spin_lock_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">spin_lock_t</span><span class=\"mtk1\">() { </span><span class=\"mtk12\">_flag</span><span class=\"mtk1\">.</span><span class=\"mtk11\">clear</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">acquire</span><span class=\"mtk1\">() { </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_flag</span><span class=\"mtk1\">.</span><span class=\"mtk11\">test_and_set</span><span class=\"mtk1\">()); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">release</span><span class=\"mtk1\">() { </span><span class=\"mtk12\">_flag</span><span class=\"mtk1\">.</span><span class=\"mtk11\">clear</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::atomic_flag _flag;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">spin_lock_raii_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">explicit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">spin_lock_raii_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">spin_lock_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lock</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_lock</span><span class=\"mtk1\">(&amp;lock) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">acquire</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">spin_lock_raii_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">spin_lock_raii_t</span><span class=\"mtk4\">&amp;&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">other</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_lock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">other</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">other</span><span class=\"mtk1\">.</span><span class=\"mtk12\">_lock</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">nullptr</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">~spin_lock_raii_t</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (_lock != </span><span class=\"mtk4\">nullptr</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">release</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">spin_lock_raii_t</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">spin_lock_raii_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">spin_lock_raii_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">operator</span><span class=\"mtk1\"> = (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">spin_lock_raii_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">spin_lock_t</span><span class=\"mtk1\">* _lock;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">size_t</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_lockCount</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">spin_lock_support_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">spin_lock_raii_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lock_index</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">spin_lock_raii_t</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">[lock_index]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">spin_lock_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">[_lockCount];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<ul>\n<li><code>spin_lock</code> 자체는 <code>atomic_flag</code>를 사용하여 간단히 만들었다.</li>\n<li><code>spin_lock_raii</code>는 <code>spin_lock</code>을 가지고 생성자/소멸자에서 <code>acquire</code>, <code>release</code>해주는 raii class이다.</li>\n<li>그리고 <code>spin_lock_support</code>를 만들어서 lock이 필요한 class에서 이를 상속받아 사용할 수 있도록 코드를 작성하였다. 상황에 따라 lock을 여러 개 사용할 수도 있으므로 lock 개수를 template 인자로 받도록 하였다.</li>\n</ul>\n<p>이를 사용하여 구현한 바구니(basket)은 다음과 같다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">basket_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">spin_lock_support_t</span><span class=\"mtk1\">&lt;</span><span class=\"mtk7\">1</span><span class=\"mtk1\">&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">basket_t</span><span class=\"mtk1\">() : </span><span class=\"mtk11\">_bread_count</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">count</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> _bread_count; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add</span><span class=\"mtk1\">() { ++_bread_count; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sub</span><span class=\"mtk1\">() { --_bread_count; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _bread_count;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>lock을 여러 개 사용할 필요가 없으니 <code>spin_lock_support</code>의 template 인자를 1로 지정하여 사용하였다. 이제 다른 actor에서 바구니를 접근할 때에는 다음과 같이 사용할 수 있다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">auto</span><span class=\"mtk1\"> locker = </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lock</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">count</span><span class=\"mtk1\">() &gt;= </span><span class=\"mtk7\">20</span><span class=\"mtk1\">) </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>이제 actor를 만들어보자. ppl의 <code>concurrent_queue</code>는 너무 느려서 actor model의 mpsc queue를 구현하는데 적합하지 않은 것 같다. 따라서 <code>InterlockedSList</code>를 사용하여 간단히 구현해 보았다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::function&lt;</span><span class=\"mtk4\">void</span><span class=\"mtk1\">()&gt; </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">actor_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">actor_t</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        _job_count = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">InitializeSListHead</span><span class=\"mtk1\">(&amp;_queue_head);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">post</span><span class=\"mtk1\">(</span><span class=\"mtk10\">message_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">job_entry_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SLIST_ENTRY</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\"> message;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">void</span><span class=\"mtk1\">* entry_memory = </span><span class=\"mtk11\">_aligned_malloc</span><span class=\"mtk1\">(</span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(</span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            MEMORY_ALLOCATION_ALIGNMENT);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">job_entry_t</span><span class=\"mtk1\">* entry = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> (entry_memory) </span><span class=\"mtk10\">job_entry_t</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">entry</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">message</span><span class=\"mtk1\"> = message;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">bool</span><span class=\"mtk1\"> victim = </span><span class=\"mtk12\">_job_count</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fetch_add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">) == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">InterlockedPushEntrySList</span><span class=\"mtk1\">(&amp;_queue_head, entry);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!victim) </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> process_count = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">do</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            PSLIST_ENTRY local_head = </span><span class=\"mtk11\">InterlockedFlushSList</span><span class=\"mtk1\">(&amp;_queue_head);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::vector&lt;</span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&gt; messages;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">messages</span><span class=\"mtk1\">.</span><span class=\"mtk11\">reserve</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1024</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            PSLIST_ENTRY it = local_head;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            PSLIST_ENTRY next = </span><span class=\"mtk4\">nullptr</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (it != </span><span class=\"mtk4\">nullptr</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                next = </span><span class=\"mtk12\">it</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">Next</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk10\">job_entry_t</span><span class=\"mtk1\">* each_entry = </span><span class=\"mtk4\">reinterpret_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">job_entry_t</span><span class=\"mtk1\">*&gt;(it);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">messages</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push_back</span><span class=\"mtk1\">(</span><span class=\"mtk12\">each_entry</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">each_entry</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">job_entry_t</span><span class=\"mtk1\">::~</span><span class=\"mtk10\">job_entry_t</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">_aligned_free</span><span class=\"mtk1\">(each_entry);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                it = next;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">auto</span><span class=\"mtk1\"> it = </span><span class=\"mtk12\">messages</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rbegin</span><span class=\"mtk1\">(); it != </span><span class=\"mtk12\">messages</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rend</span><span class=\"mtk1\">(); ++it)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                (*it)();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            process_count = </span><span class=\"mtk4\">static_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">messages</span><span class=\"mtk1\">.</span><span class=\"mtk11\">size</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_job_count</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fetch_sub</span><span class=\"mtk1\">(process_count) != process_count);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_SubTy</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">post</span><span class=\"mtk1\">(</span><span class=\"mtk4\">void</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">_SubTy</span><span class=\"mtk1\">::*method)()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        _SubTy* sub_instance = </span><span class=\"mtk4\">static_cast</span><span class=\"mtk1\">&lt;_SubTy*&gt;(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">post</span><span class=\"mtk1\">([</span><span class=\"mtk12\">sub_instance</span><span class=\"mtk1\">, </span><span class=\"mtk12\">method</span><span class=\"mtk1\">] () { (</span><span class=\"mtk12\">sub_instance</span><span class=\"mtk1\">-&gt;*</span><span class=\"mtk12\">method</span><span class=\"mtk1\">)(); });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    SLIST_HEADER _queue_head;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::atomic_int _job_count;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>원리는 간단하다.</p>\n<ul>\n<li>수행할 작업을 <code>void ()</code> 형태로 받아서 <code>InterlockedSList</code> 기반의 queue에 넣는다.</li>\n<li>그리고 처음 queue에 넣는 thread를 victim으로 삼아서 queue 내에 들어있는 작업들을 계속 처리하도록 한다.</li>\n<li>이 때 절묘한 타이밍으로 queue에 넣은 작업이 처리될 수 없는 문제를 해결하기 위해 <code>_job_count</code>로 처리 구간을 보장해준다.</li>\n</ul>\n<p>template 인자를 받는 <code>post()</code> 함수는 이 actor를 상속받은 하위 class들의 member function pointer를 받아서 this에 대해 <code>post()</code> 함수를 호출해주는 helper function이다. 이 helper function이 있으면 다음과 같이 간결하게 <code>post()</code>를 호출할 수 있다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">eater_t</span><span class=\"mtk1\"> eater;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">eater</span><span class=\"mtk1\">.</span><span class=\"mtk11\">post</span><span class=\"mtk1\">(&amp;</span><span class=\"mtk10\">eater_t</span><span class=\"mtk1\">::act);</span></span></span></code></pre>\n<p><code>post()</code>가 가능한 actor 기반을 만들었으니, 이를 기반으로 주기적인 작업을 수행하기 위한 interface를 정의해보자. 간단히 다음과 같이 <code>tick_actor_t</code>를 선언하였다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tick_actor_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">actor_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">act</span><span class=\"mtk1\">() = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p><code>tick_actor_t</code> class는 주기적으로 <code>act()</code> 함수가 불려져서 뭔가 지속적인 작업을 처리할 수 있도록 하는 의미를 지닌 interface이다.</p>\n<p>그러한 방식으로 구현이 되려면 다음의 개념이 필요하다.</p>\n<ul>\n<li>누가(어떤 thread가) 해당 actor를 도맡아서 주기적으로 <code>act()</code> 함수를 불러주는가?</li>\n</ul>\n<p>결국 thread를 관리하고, 각 thread에게 (대충) 공평하게 actor를 분배하고, 각 thread는 담당하는 actor를 처리하는 구조를 작성하여야 한다. 이에 대해서는 다음과 같은 개념으로 구현을 하였다.</p>\n<ul>\n<li><em>시나리오</em>를 통해 어떤 actor가 등장할지 각 thread에게 전달된다.</li>\n<li>각 <em>일꾼(worker-thread)</em>들은 시나리오를 보고 자기가 담당해야 할 역할(actor)을 기억한다.</li>\n<li>각 <em>일꾼(worker-thread)</em>들은 자기가 연기할 대상(actor)을 주기적으로 연기(act)한다.</li>\n</ul>\n<p>해서 <code>scenario</code>, <code>worker</code>, 그리고 worker를 관리하기 위한 <code>worker_pool</code> class가 등장하였다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">scenario_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::function&lt;</span><span class=\"mtk10\">tick_actor_t</span><span class=\"mtk1\">* ()&gt; </span><span class=\"mtk10\">tick_actor_factory_t</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">concurrency</span><span class=\"mtk1\">::concurrent_queue&lt;</span><span class=\"mtk10\">tick_actor_factory_t</span><span class=\"mtk1\">&gt; </span><span class=\"mtk10\">tick_actor_factory_queue_t</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">scenario_t</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">worker_count</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_worker_count</span><span class=\"mtk1\">(worker_count) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        _worker_sched_index = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        _tick_actor_factory_queue_array = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tick_actor_factory_queue_t</span><span class=\"mtk1\">[worker_count];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">~scenario_t</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">delete[]</span><span class=\"mtk1\"> _tick_actor_factory_queue_array;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_worker_count</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> _worker_count; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">enter</span><span class=\"mtk1\">(</span><span class=\"mtk10\">tick_actor_factory_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">factory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> current_sched_index = _worker_sched_index++ % _worker_count;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_tick_actor_factory_queue_array</span><span class=\"mtk1\">[current_sched_index].</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(factory);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">tick_actor_factory_queue_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_factory_queue</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(index &gt;= </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; index &lt; _worker_count);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tick_actor_factory_queue_array</span><span class=\"mtk1\">[index];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _worker_count;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::atomic_int _worker_sched_index;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">tick_actor_factory_queue_t</span><span class=\"mtk1\">* _tick_actor_factory_queue_array;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p><code>scenario</code> class는 일꾼(worker)의 총 수가 몇 명인지 가지고 있다가, 어떤 배역(actor)이 등장(enter)하게 될 경우 round-robin 방식으로 각 worker와 연결된 queue에 배역 생성기(actor)를 넣어준다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">worker_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">worker_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">scenario_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">scenario</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_scenario</span><span class=\"mtk1\">(scenario), </span><span class=\"mtk11\">_index</span><span class=\"mtk1\">(index) {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">work</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::vector&lt;</span><span class=\"mtk10\">tick_actor_t</span><span class=\"mtk1\">*&gt; </span><span class=\"mtk10\">tick_actors_t</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">tick_actors_t</span><span class=\"mtk1\"> tick_actors;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">auto</span><span class=\"mtk1\">&amp; factory_queue = </span><span class=\"mtk12\">_scenario</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get_factory_queue</span><span class=\"mtk1\">(_index);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">true</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk10\">scenario_t</span><span class=\"mtk1\">::</span><span class=\"mtk10\">tick_actor_factory_t</span><span class=\"mtk1\"> factory;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">factory_queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">try_pop</span><span class=\"mtk1\">(factory)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk4\">auto</span><span class=\"mtk1\">* new_actor = </span><span class=\"mtk11\">factory</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">tick_actors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push_back</span><span class=\"mtk1\">(new_actor);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">auto</span><span class=\"mtk1\"> it = </span><span class=\"mtk12\">tick_actors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(); it != </span><span class=\"mtk12\">tick_actors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(); ++it) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk4\">auto</span><span class=\"mtk1\">&amp; actor = *(*it);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">actor</span><span class=\"mtk1\">.</span><span class=\"mtk11\">post</span><span class=\"mtk1\">(&amp;</span><span class=\"mtk10\">tick_actor_t</span><span class=\"mtk1\">::act);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _index;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">scenario_t</span><span class=\"mtk1\">&amp; _scenario;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p><code>worker</code> class에서는 자신에게 할당된 (scenario에서 enter하면 추가되는) 배역 생성 queue를 확인하여 새로 부여받은 배역(actor)이 있나 확인하여 자신이 관리하는 vector에 넣는다.\n그리고 자신이 관리하는 모든 배역(actor)에 대해 <code>act()</code> 함수를 호출함으로써 각자의 <code>act()</code> 함수가 호출될 수 있도록 한다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">worker_pool_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">worker_pool_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">scenario_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">scenario</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_scenario</span><span class=\"mtk1\">(scenario) { </span><span class=\"mtk11\">employ</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">~worker_pool_t</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">finalize</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">employ</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> index = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; index &lt; </span><span class=\"mtk12\">_scenario</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get_worker_count</span><span class=\"mtk1\">(); ++index) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_workers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push_back</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk11\">thread</span><span class=\"mtk1\">([</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk12\">index</span><span class=\"mtk1\">] () {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk10\">worker_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">worker</span><span class=\"mtk1\">(</span><span class=\"mtk10\">_scenario</span><span class=\"mtk1\">, </span><span class=\"mtk10\">index</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">worker</span><span class=\"mtk1\">.</span><span class=\"mtk11\">work</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">finalize</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">auto</span><span class=\"mtk1\">&amp; each : _workers) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">each</span><span class=\"mtk1\">.</span><span class=\"mtk11\">join</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_workers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">clear</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">scenario_t</span><span class=\"mtk1\">&amp; _scenario;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::vector&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::thread&gt; _workers;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>그리고 <code>worker_pool</code> class에서 각 worker에 thread를 부여하고 이것들을 관리할 수 있도록 간단히 코드를 작성하였다.</p>\n<p>기반 코드 작성이 끝났으니 먹깨비와 제빵사를 구현해보자.\n<code>tick_actor</code> class의 <code>act()</code> 함수만 채우면 되니 간단하다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">baker_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tick_actor_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">baker_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">basket_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_basket</span><span class=\"mtk1\">(basket) {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">act</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">auto</span><span class=\"mtk1\"> locker = </span><span class=\"mtk12\">_basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lock</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">count</span><span class=\"mtk1\">() &gt;= </span><span class=\"mtk7\">20</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">basket_t</span><span class=\"mtk1\">&amp; _basket;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">eater_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tick_actor_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">eater_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">basket_t</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_basket</span><span class=\"mtk1\">(basket) {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">act</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">auto</span><span class=\"mtk1\"> locker = </span><span class=\"mtk12\">_basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lock</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">count</span><span class=\"mtk1\">() &lt;= </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">basket_t</span><span class=\"mtk1\">&amp; _basket;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>각자는 <code>act()</code> 함수에서 자신이 참조하는 바구니에 <code>lock()</code>을 걸고, 문제의 제약조건에 따라 <code>count()</code>를 확인한 뒤 <code>add()</code> or <code>sub()</code>을 수행한다.</p>\n<p>여기까지 만들고 보면 결국 공유 자원은 lock으로 보호되고, actor간의 message 통신이 없으므로 <code>post()</code> 함수가 무의미해졌다는 사실을 깨달을 수 있게 된다!</p>\n<p>이제 main 함수에서 시나리오를 구성해보자.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_tmain</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argc</span><span class=\"mtk1\">, </span><span class=\"mtk10\">_TCHAR</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argv</span><span class=\"mtk1\">[])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">scenario_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">scenario</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">thread</span><span class=\"mtk1\">::</span><span class=\"mtk11\">hardware_concurrency</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">worker_pool_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pool</span><span class=\"mtk1\">(scenario);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">basket_t</span><span class=\"mtk1\"> basket;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> index = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; index &lt; </span><span class=\"mtk7\">10</span><span class=\"mtk1\">; ++index)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">scenario</span><span class=\"mtk1\">.</span><span class=\"mtk11\">enter</span><span class=\"mtk1\">([&amp;</span><span class=\"mtk12\">basket</span><span class=\"mtk1\">] () { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">baker_t</span><span class=\"mtk1\">(basket); });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> index = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; index &lt; </span><span class=\"mtk7\">10</span><span class=\"mtk1\">; ++index)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">scenario</span><span class=\"mtk1\">.</span><span class=\"mtk11\">enter</span><span class=\"mtk1\">([&amp;</span><span class=\"mtk12\">basket</span><span class=\"mtk1\">] () { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">eater_t</span><span class=\"mtk1\">(basket); });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><code>scenario</code>를 먼저 만든다. 일꾼(<code>worker</code>) 수는 하드웨어가 지원하는 thread 개수로 지정한다. 이제 만들어진 <code>scenario</code> 객체로 <code>worker_pool</code> 객체를 만들면 일꾼들이 고용(employ)되어 준비가 완료된다.</p>\n<p>배역들을 등장시키기 위해 <code>scenario</code>의 <code>enter()</code> 함수를 불러준다. 생성하는 코드 자체를 template 등으로 감쌀수도 있겠지만 그러면 코드가 복잡해지니 간단히 lambda로 구현한 factory method를 전달하였다. 이제 제빵사와 먹깨비가 round-robin 방식으로 각 worker에게 배정되어 관리될 것이다.</p>\n<p>간단한 내용을 무의미하게 길게 코딩하는 법을 소개해 보았다.\n처음 과제 자체가 actor model에 익숙해지는 것을 위해 multi-thread 동기화 예제를 좀 무리하게 냈던 것인데, 스터디에 참여했단 다른 친구들이 나처럼 의미없는 actor model을 구현하지 않고 재미있는 model을 구현해 주어서 참 다행이었다(…)</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"먹깨비 과제를 풀어보자. 여러 가지 구현법이 있을 것인데, 나는 간단하게 바구니는 공유 자원이니 lock으로 보호하고, 제빵사와 먹깨비는 actor로 만들어서 매 tick…","fields":{"date":"August 12, 2013","shortdesc":"","slug":"/2013/08/12/implements-producer-consumer-model/"},"frontmatter":{"title":"producer/consumer model 구현","tags":["concurrency","c++","study"]}}},"pageContext":{"slug":"/2013/08/12/implements-producer-consumer-model/","older":{"slug":"/2013/08/10/concurrency-algorithm-and-memory-model/","title":"concurrency 알고리즘과 memory model"},"newer":{"slug":"/2013/08/18/cpp11-async-corotuine-io-study/","title":"c++11 async, corotuine, io 스터디"}}},"staticQueryHashes":["848695393"]}