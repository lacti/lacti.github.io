{"componentChunkName":"component---src-templates-page-tsx","path":"/2012/05/28/simply-wait-using-FutureTask-at-java/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>어떤 작업에 timeout을 주고 실행하고 싶은 경우가 있다. 예를 들어 web crawler를 만들 때에는 해당 페이지에 대한 응답이 10초정도 없을 경우에 그냥 그 페이지를 읽지 않도록 예외처리 하는 것이다.</p>\n<p>이 글에서는 <code>ExecutorService</code>와 <code>FutureTask</code>를 사용하여 timeout 처리를 하는 간단한 예제를 소개한다.</p>\n<ul>\n<li><code>ExecutorService</code>는 java 1.5 때 Doug Lea 아저씨가 추가한 좋은 Library이다. 이 글에서는 ThreadPool을 사용하기 위한 용도로 쓴다.</li>\n<li><code>FutureTask</code> 역시 Doug Lea 아저씨가 추가한 class로 javadoc에서 그 설명을 간략히 따오면 cancellable asynchronous computation이다. 즉, 수행 Thread와 결과를 받는 Thread가 분리되고, 취소 가능하다. 이 class는 <code>RunnableFuture</code>를 구현하는데, 이는 <code>Runnable</code>와 <code>Future</code> 두 interface의 합성체이다.</li>\n</ul>\n<p>어떤 작업에 timeout을 걸기 위해서는 적어도 수행 thread과 timeout을 걸어주는 thread가 분리되어야 한다. 간단하게 fork-join model을 생각해보자면 수행할 task는 fork된 thread에게 맡기고, join하는 main thread에서 join을 얼마나 기다려줄지 timeout을 지정해준다고 생각하면 되겠다.</p>\n<p>java에서도 1.7부터 <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ForkJoinPool.html\">fork/join pool</a>을 지원해주지만, 본 글에서는 안 다룬다.</p>\n<p>일단 무엇을 작업해서 반환할지에 대한 <code>FutureTask</code>를 구현한다. <code>FutureTask</code>는 이름 그대로 Future + Task이다. 즉 Task를 수행한 결과를 Future로 받아볼 수 있는 구조로, 생성자로 <code>Callable</code> 객체를 받고 수행을 위한 <code>run()</code> 함수와 결과 값을 받기 위한 <code>get()</code> 함수를 갖는다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">FutureTask</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">String</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">task</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">FutureTask</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">String</span><span class=\"mtk1\">&gt;(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Callable</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">String</span><span class=\"mtk1\">&gt;() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk11\">call</span><span class=\"mtk1\">() </span><span class=\"mtk4\">throws</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Exception</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk3\">/* complicated crawling code */</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    });</span></span></span></code></pre>\n<p>뭔가 내부에서 복잡한 작업을 수행하는 callable object를 생성자로 받는 task 객체를 생성했다. 이제 task의 멤버 함수인 <code>run()</code>을 호출하게 되면 저 callable object가 실행되고, 그 수행 결과가 task 내부에 저장되는 것이다. 그러면 저 task의 상태가 completed(<code>isDone()</code>으로 확인) 인지 보고, <code>get()</code> 함수로 결과를 가져오면 되는 것이다.</p>\n<p>이제 열심히 만든 task 객체를 수행할 thread를 생성하도록 하자. 하지만 thread를 매번 만드는 것은 매우 아깝고 귀찮은 일이므로 <code>ExecutorService</code>를 사용해보도록 하자.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">ExecutorServicce</span><span class=\"mtk1\"> </span><span class=\"mtk12\">threadPool</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Executors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">newCachedThreadPool</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>다 만들었다(…) 이제 만든 ThreadPool을 사용하여 task를 실행해보자.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">threadPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(task);</span></span></span></code></pre>\n<p>정말 간단하게 ThreadPool을 만들었고, 해당 ThreadPool 내에 cache된 thread에게 우리가 만든 task를 수행시켰다. 이제 main thread에서는 적절히 timeout을 걸고 기다려보자.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">try</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">task</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get</span><span class=\"mtk1\">(</span><span class=\"mtk7\">5</span><span class=\"mtk1\"> </span><span class=\"mtk3\">/* TIMEOUT */</span><span class=\"mtk1\">, </span><span class=\"mtk12\">TimeUnit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">SECONDS</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/* some codes for processing result */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">TimeoutException</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// timeout occurred!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>결과값을 가져오는 <code>get()</code> 함수는 해당 task가 완료될 때까지 기다리는 함수이다(blocking). 이 함수는 timeout 시간을 인자로 받는 함수가 overload되어있는데, 위 예시처럼 해당 함수를 쓰면 해당 수행이 5초내로 끝나지 않으면 <code>TimeoutException</code>을 던지게 되는 것이다. 따라서 <code>TimeoutException</code>을 적절히 catch해서 적절하게 처리해주면 된다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"어떤 작업에 timeout을 주고 실행하고 싶은 경우가 있다. 예를 들어 web crawler를 만들 때에는 해당 페이지에 대한 응답이 1…","fields":{"date":"May 28, 2012","shortdesc":"","slug":"/2012/05/28/simply-wait-using-FutureTask-at-java/"},"frontmatter":{"title":"java의 FutureTask를 사용한 간단한 수행 대기","tags":["java"]}}},"pageContext":{"slug":"/2012/05/28/simply-wait-using-FutureTask-at-java/","older":{"slug":"/2012/05/12/lambda-and-raii-2/","title":"lambda와 RAII 2"},"newer":{"slug":"/2012/05/31/xml-mapping-using-java-annotation-and-reflection/","title":"java annotation과 reflection을 사용한 xml mapping"}}},"staticQueryHashes":["848695393"]}