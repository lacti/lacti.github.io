{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/08/03/interlocked-singly-linked-lists/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>Concurrent Data Structure는 Lock을 최소화하여 동작해야 multi thread에서 해당 자료구조에 접근할 때 발생하는 부담이 최소화되어 효율적인 프로그래밍이 가능하다.</p>\n<p>여러가지 방법이 있겠지만, 가장 간단한(?) Windows API로 제공되는 <a href=\"https://msdn.microsoft.com/en-us/library/ms684121.aspx\">Interlocked Singly Linked Lists</a>에 대해 보자. (이후 SLIST 라고 이야기하겠다)</p>\n<p>SLIST는 단방향(singly) Linked List로 구성된 Stack이다. MSDN 을 보면 non blocking atomic 동기화 알고리즘으로 쓰면 성능 향상에 도움이 되고 multi thread에서 사용해도 문제가 없댄다. 아무튼 이래 저래 좋다고 한다.</p>\n<p>일단 SLIST 의 사용법을 보기에 앞서 2가지만 짚고 넘어가자.</p>\n<h2>왜 Stack 일까</h2>\n<p>정확한 이유는 모르겠는데, 다음의 이유로 무리한 추측을 해보자.</p>\n<ol>\n<li>Stack이면 가장 최근에 Push했던 것이 가장 먼저 Pop된다. 즉, 굳이 멀고 먼 Memory까지 안 가도 Cache에서 적중되어 가져올 수 있는 확률이 있다. 그런데 multi thread에서 안전하게 돌아가기 위한 lock operation을 쓴다는 것은 결국 메모리에 내용이 바로 반영되야한다니까 cache 이야기는 좀 아닌 것 같다.</li>\n<li>Queue는 Concurrent Data Structure 알고리즘 구현이 Stack에 비해 복잡하다. Stack은 관리해줘야할 공유 변수가 하나(Stack Pointer)이지만 Queue 는 2개(Head, Tail)이다. 그런데 똑똑한 MS 양반들이 Queue가 더 복잡하다고 해서 안 해놨을 것 같지는 않다.</li>\n<li>Stack으로도 충분했다. 굳이 Queue까지 API로 제공하지 않아도 Stack만으로도 Queue나 다른 자료구조를 구현해서 쓸 수는 있다. 그럼 왜 하필 Stack을 만들어놨을까? 누가 좀 알려주세요 […]</li>\n</ol>\n<p>찾아보면 <a href=\"https://alexkr.com/memos/16/non-blocking-singly-linked-list/\">SLIST 기반으로 Queue처럼 쓰는 예제</a> 도 있다.</p>\n<h2>왜 Memory Alignment 이야기가 나올까</h2>\n<p>MSDN을 보면 모든 항목들은 <code>MEMORY_ALLOCATION_ALIGNMENT</code>로 정렬되어있어야 한다고 써있다.</p>\n<blockquote>\n<p>All list items must be aligned on a MEMORY<em>ALLOCATION</em>ALIGNMENT boundary</p>\n</blockquote>\n<p>그 이유는 아마도 CPU가 해당 메모리 값을 가져와서 lock operation을 수행할 때 이게 적절치 못하게 메모리에 걸쳐 있으면 한 번에 Fetch를 할 수가 없기 때문일 것이다.</p>\n<p>SLIST에서는 SLIST<em>ENTRY라는 객체를 사용하는데 이걸 메모리에서 가져와서 CPU가 lock operation 걸고 원자적으로 변경을 수행하면서 thread safe하게 작업하는 것이다. CPU는 MEMORY</em>ALIGNMENT단위로 메모리로부터 값을 가져와서 처리할 수 있는데, 만약 그 값이 4라고 해보자.</p>\n<p>즉, CPU가 메모리 주소 4 단위로 읽을 수가 있다. 그런데 저 SLIST_ENTRY 값이 오묘하게 메모리 주소 3부터 6까지 (3, 4, 5, 6) 4 Bytes 가 존재한다고 하면, CPU는 저걸 한 번에 가져와서 작업을 수행할 수가 없다. 적어도 0 ~ 3까지 1번(0, 1, 2, 3), 그리고 4 ~ 7까지 1번(4, 5, 6, 7) 총 2번 8Bytes를 가져온 다음에 3부터 6까지의 Bytes를 추려서 작업에 임해야 한다.</p>\n<p>그래서 SLIST를 사용할 때는 각 항목들을, 즉 각 항목들의 메모리 주소를 정렬해야한다는 것이다.</p>\n<p><em>(추후 추가하자면 위 내용은 좀 잘못되었다. 실제로 bus size만 놓고 생각한다면 `MEMORY</em>ALLOCATION<em>ALIGNMENT` 값처럼 큰 값으로 정렬을 요구할 필요가 없다. 오히려 DCAS 부재로 인한 ABA problem을 막기 위한 주소bit의 추가 공간 확보가 더 정확한 설명일 것이다.)</em></p>\n<p>갑자기 항목에서 왜 항목의 주소로 넘어가는지는 SLIST<em>ENTRY 구조체 속을 들여다보면 알 수 있다.\nWinNT.h 파일에 보면 SLIST</em>ENTRY type 은 아래와 같이 정의되어 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_SINGLE_LIST_ENTRY</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_SINGLE_LIST_ENTRY</span><span class=\"mtk1\"> </span><span class=\"mtk4\">*</span><span class=\"mtk12\">Next</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">} </span><span class=\"mtk10\">SINGLE_LIST_ENTRY</span><span class=\"mtk1\">, </span><span class=\"mtk4\">*</span><span class=\"mtk10\">PSINGLE_LIST_ENTRY</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SLIST_ENTRY</span><span class=\"mtk4\"> SINGLE_LIST_ENTRY</span></span></code></pre>\n<p>즉, 각 항목이라는 것은 결국 내부에서 다음 node를 가리키는 주소를 포함한다. 왜냐하면 singly linked list이니까.<br>\n그러면 저 Next 변수는 CPU 가 lock operation 을 통해 한 번에 작업을 수행해야 하므로 MEMORY<em>ALIGNMENT되어 있어야 한다. 그런데 저기(Next)에 들어가는 값이 다음 항목의 메모리 주소이고, 또 그 다음 항목의 Next 변수를 가지고 CPU가 작업을 해야하니까 그 Next 변수를 갖는 SLIST</em>ENTRY도 메모리 정렬이 되어있어야 한다.</p>\n<p>따라서 모든 항목의 주소가 메모리 정렬 되어있어야 하는 것이다.</p>\n<p>역시 WinNT.h 파일에 보면,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#if</span><span class=\"mtk4\"> </span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">_WIN64</span><span class=\"mtk4\">) </span><span class=\"mtk1\">||</span><span class=\"mtk4\"> </span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">_M_ALPHA</span><span class=\"mtk4\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">MAX_NATURAL_ALIGNMENT</span><span class=\"mtk4\"> sizeof(ULONGLONG)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">MEMORY_ALLOCATION_ALIGNMENT</span><span class=\"mtk4\"> </span><span class=\"mtk7\">16</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#else</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">MAX_NATURAL_ALIGNMENT</span><span class=\"mtk4\"> sizeof(DWORD)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">MEMORY_ALLOCATION_ALIGNMENT</span><span class=\"mtk4\"> </span><span class=\"mtk7\">8</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span></code></pre>\n<p>와 같이 <code>MEMORY_ALLOCATION_ALIGNMENT</code> 값이 정의되어 있음을 볼 수 있다.</p>\n<h2>어떻게 사용하나</h2>\n<ul>\n<li>먼저 Stack의 Head를 <code>InitializeSListHead</code> 함수로 초기화해야한다.</li>\n<li>그리고 Push(<code>InterlockedPushEntrySList</code>)와 Pop(<code>InterlockedPopEntrySList</code>)을 수행한다.</li>\n<li><code>InterlockedFlushSList</code> 함수가 있다. 이는 Stack 에 들어있는 모든 Node 를 반환하는 함수다. 이 함수를 수행하면 Head 는 초기화된다. 즉 빈 Stack 이 된다.</li>\n<li>이 외에 개수를 세는 <code>QueryDepthSList</code>까지 있다.</li>\n</ul>\n<p>아무튼 다 MSDN 에 예제까지 친절히 나와있으므로 자세한 설명은 생략한다.</p>\n<p><code>SLIST_ENTRY</code> 항목들의 메모리 주소는 정렬되어야 한다. 이를 일단 SLIST로 관리해야할 Node들이 <code>SLIST_ENTRY</code> 객체를 멤버로 가져야하고, SLIST<em>ENTRY 멤버 변수들의 주소는 `MEMORY</em>ALLOCATION_ALIGNMENT` 값으로 정렬 되어있어야 한다.</p>\n<p>가장 간단한 방법은 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MyItem</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    SLIST_ENTRY ListEntry;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">    // Other Variables</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>첫 번째 멤버 변수로 넣어준다. 그리고 MyIem 을 할당할 때 내부에서 <a href=\"https://msdn.microsoft.com/en-us/library/8z34s9c6.aspx\"><code>_aligned_malloc</code></a> 와 같은 함수로 할당해주면 MyItem 의 주소가 정렬되니까 첫 번째 멤버 변수인 ListEntry (SLIST_ENTRY) 의 주소도 정렬된다(같은 값이니까)</p>\n<p>같은 방법인데, 저걸 상속으로 표현하자는 사람도 있다. 상속하면 Base Type 의 멤버들이 메모리의 가장 위 쪽으로 올라가니까. 하지만 그게 모든 컴파일러에서 보장되도록 표준화되어있는 내용은 아닌 것으로 알고 있으니까 글쎄, 좋을지는 모르겠다.</p>\n<p>이와 같은 이유로, virtual function pointer table 을 갖는 class type 에서 SLIST<em>ENTRY 을 멤버로 넣어 사용할 경우, 과연 이 변수를 정렬하기 위해서는 어떻게 해야할까 고민이 좀 되는데, 그냥 그러지 말자고 하고 싶다-</em>-</p>\n<p>아무튼 저렇게 만들어놓고 꺼내서 쓸 때는 단순히 casting 만 해서 쓰면 되니까 편하다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">MyItem* item = (MyItem*) </span><span class=\"mtk11\">InterlockedPopEntryList</span><span class=\"mtk1\"> (listHead);</span></span></code></pre>\n<p>궁금할 것 같은 내용은 위에서 다 풀어 써놨으니까 간략한 예제를 보자. 예제는 <a href=\"https://msdn.microsoft.com/en-us/library/ms686962.aspx\">MSDN: Using Singly Linked List</a>에 있다.</p>\n<p>먼저 <code>LIST_HEADER</code>를 만들어줘야한다. 이는 사용할 SLIST의 Head 포인터이다. 당연한 이야기이지만 이것도 메모리 정렬이 되어야 한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">pListHead = (PSLIST_HEADER)</span><span class=\"mtk11\">_aligned_malloc</span><span class=\"mtk1\">(</span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(SLIST_HEADER),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">       MEMORY_ALLOCATION_ALIGNMENT);</span></span></code></pre>\n<p><code>PROGRAM_ITEM</code>이라는 구조체가 첫 번째 멤버 변수로 <code>SLIST_ENTRY</code>를 갖는다. 따라서 <code>PROGRAM_ITEM</code> 객체의 메모리 주소만 정렬해주면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">pProgramItem = (PPROGRAM_ITEM)</span><span class=\"mtk11\">_aligned_malloc</span><span class=\"mtk1\">(</span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(PROGRAM_ITEM),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            MEMORY_ALLOCATION_ALIGNMENT);</span></span></code></pre>\n<p>꺼내서 쓸 때는 어차피 <code>SLIST_ENTRY</code>의 주소가 곧 <code>PROGRAM_ITEM</code>의 주소이므로 casting만 해서 쓰면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">pListEntry = </span><span class=\"mtk11\">InterlockedPopEntrySList</span><span class=\"mtk1\">(pListHead);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">pProgramItem = (PPROGRAM_ITEM)pListEntry;</span></span></code></pre>\n<h2>정리</h2>\n<p>이러한 구조가 어디에서 쓰일까. multi thread 에서 접근해야하는 자료구조일 경우 쓰이겠다. 예를 들면,</p>\n<ul>\n<li>작업 queue</li>\n<li>log queue</li>\n<li>메모리 관리자</li>\n</ul>\n<p>queue 시리즈야 예제에서 이미 봤고, 메모리 관리자 이야기를 잠깐 해보자.</p>\n<p>재활용이 가능한 메모리들이 있다. 이런 것들을 pool 형태로 관리하여 할당 부담을 줄이고 단편화를 줄이기 위한 관리자를 만든다고 하자. 자원 할당은 여러 thread에서 접근해야하니까 병목 지점이고, 이 때문에 lock은 최대한 적게 썼으면 좋겠다.<br>\n그러니까 미리 지정된 크기만큼 메모리를 다 할당해서(보통 크게 할당해서 쪼개놓고) SLIST에 다 넣어둔다. 그리고 요청할 때마다 하나씩 Pop해서 쓰게 해준다.</p>\n<p>뭐 어떤 이야기에 따르면, 다 쓰고 Push한걸 다음에 바로 Pop을 하면 이 메모리가 아직 cache에 남아있어서 바로 hit되어 빠르게 사용할 수 있다는 좋은 이야기가 있는데 이게 얼마나 효용이 좋은지도 모르겠고, 그리고 Windows Vista부터는 LFH(Low Fragmentation Heap)이 기본 Heap이라서 저 작업이 뻘짓이라는 이야기도 있다.</p>\n<p>결론이 좀 이상해졌는데 아무튼 Windows API가 제공해주는 SLIST를 사용하여 multi thread 환경에서 보다 빠른 프로그램을 작성할 수 있다니까 믿고 써보자.</p>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","excerpt":"Concurrent Data Structure는 Lock을 최소화하여 동작해야 multi thread에서 해당 자료구조에 접근할 때 발생하는 부담이 최소화되어 효율적인 프로그래밍이 가능하다. 여러가지 방법이 있겠지만, 가장 간단한(?) Windows…","fields":{"date":"August 03, 2011","shortdesc":"","slug":"/2011/08/03/interlocked-singly-linked-lists/"},"frontmatter":{"title":"Interlocked Singly Linked Lists","tags":["concurrency"]}}},"pageContext":{"slug":"/2011/08/03/interlocked-singly-linked-lists/","older":{"slug":"/2011/08/02/context-switching-and-simultaneously/","title":"context switching과 simultaneously 실행"},"newer":{"slug":"/2011/08/07/efficient-processing-for-multiplexing-io/","title":"다중 입출력에 대한 효율적 처리"}}}}