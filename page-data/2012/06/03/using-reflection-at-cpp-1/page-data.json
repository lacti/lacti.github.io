{"componentChunkName":"component---src-templates-page-tsx","path":"/2012/06/03/using-reflection-at-cpp-1/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>mmo-server에서 attribute를 json serialize하기 위해 attribute가 가지고 있는 field의 정보를 enumerate 해야할 일이 생겼다. 그런데 c++은 reflection이 없잖아?</p>\n<p>그렇게 고민하다가 예전에 쓴 글을 발견했다.</p>\n<ul>\n<li><a href=\"/2011/09/30/using-rtti-at-cpp/\">c++에서 구조체 RTTI 정보 남기기</a></li>\n</ul>\n<p>기본 아이디어는 다음과 같다. 각 class마다 자신의 field에 대한 정보를 갖는다. 이름과 멤버 변수 포인터 쌍을 가진다고 보면 된다. 여기서 골치가 아픈건 저 field에 대한 정보를 어떻게 표기하냐인데, 멤버 변수 포인터라는 type을 좀 generic하게 관리해줄 방법이 필요하다. 제대로 하려면 코드가 복잡해질테니 대충 다음과 같이 틀만 잡았다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">field_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">) : </span><span class=\"mtk11\">field_name</span><span class=\"mtk1\">(_name) {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ref</span><span class=\"mtk1\">(</span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">obj</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        _FieldTy* address = </span><span class=\"mtk4\">reinterpret_cast</span><span class=\"mtk1\">&lt;_FieldTy*&gt;(</span><span class=\"mtk11\">ptr</span><span class=\"mtk1\">(obj));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> *address;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">char*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">name</span><span class=\"mtk1\">() </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field_name</span><span class=\"mtk1\">.</span><span class=\"mtk11\">c_str</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">protected:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ptr</span><span class=\"mtk1\">(</span><span class=\"mtk4\">void*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">obj</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">protected:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string field_name;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>핵심 함수가 <code>ref()</code>인 것 같지만 잘 보면 저건 훼이크 함수다. 인자로 받은 object를 <code>ptr()</code>이라는 의미심장한 virtual 함수에게 넘겨주고 자신은 그냥 그걸 적절한 field type으로 casting해서 반환해줄 뿐이다.</p>\n<p>게다가 템플릿 함수! <code>field_t</code>라는 고정 type으로 모든 field에 대한 정보는 관리하고 싶지만, 그 field가 관리하는 멤버 변수 포인터가 반환하는 값은 모두 다르기에 별로 더 좋은 생각도 안 나고 <del>귀찮아서</del>어쩔 수 없이 저렇게 작성했다.</p>\n<p>때문에 <code>reinterpret_cast</code>가 등장했는데 함수에 대한 템플릿 인자를 클래스까지 확장하지 않고서는 객체의 type이나 field의 type 정보를 구체 구현 class까지 넘겨줄 방법이 없으므로 대충 <code>reinterpret_cast</code>로 때운 것이다. (덕분에 실 사용 type 검증 로직은 하나도 없고, 잘못 사용하면 안드로메다를 보게 된다.)</p>\n<p>이제 저 <code>ptr()</code>을 구현하는 구체 클래스를 만들면 된다. 역시 대충 만들었다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">_ObjTy</span><span class=\"mtk1\">::*Field)&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_impl_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">field_impl_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">) : </span><span class=\"mtk11\">field_t</span><span class=\"mtk1\">(_name) {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">protected:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ptr</span><span class=\"mtk1\">(</span><span class=\"mtk4\">void*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">obj_addr</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        _ObjTy* obj = </span><span class=\"mtk4\">reinterpret_cast</span><span class=\"mtk1\">&lt;_ObjTy*&gt;(obj_addr);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> &amp;(</span><span class=\"mtk12\">obj</span><span class=\"mtk1\">-&gt;*</span><span class=\"mtk12\">Field</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>예전 글에서는 offset을 직접 계산해서 거길 다시 접근하는 무시무시하고 소름끼치는 방법을 썼는데, 이번 글에서는 template의 힘을 빌린 멤버 변수 포인터를 써서 조금이나마 우아하고 안정적인 방법을 썼다. 하지만 현실은 <code>reinterpret_cast</code> […]</p>\n<p>실제 <code>ptr()</code> 함수 구현체는 그냥 object를 <code>field_impl_t</code> class가 아는 object type으로 강제 casting한 후, 거기서 찾고자 하는 멤버 field의 위치 주소를 찾아서 반환해주는 것이다.</p>\n<p><code>field_t</code>와 <code>field_impl_t</code>의 관계에서 볼 수 있듯이 둘은 object의 type으로는 엮여있지 않고, 덕분에 <code>reinterpret_cast</code>를 쓴다. 이 때문에 잘못된 object가 들어가면 굉장한 광경을 볼 수 있다! (게다가 실행해보기 전까지는 모른다는게 함정!)\n… 물론 <code>ref()</code> 함수의 반환 타입만 잘못 지정해도 무시무시한 일이 벌어진다.</p>\n<p>이제 저 <code>field_t</code>를 관리하는 관리 class를 만들어보자. 귀찮으니까 코드를 먼저 보자.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_info_map_t</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">protected:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> _Ty impl_type;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::map&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string, </span><span class=\"mtk10\">field_t</span><span class=\"mtk1\">*&gt; </span><span class=\"mtk10\">_info_map_t</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_info_map_t</span><span class=\"mtk1\"> _info_map;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_FieldTy</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">::*Field)&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_register_field</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_info_map</span><span class=\"mtk1\">.</span><span class=\"mtk11\">insert</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk11\">make_pair</span><span class=\"mtk1\">(name, </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_impl_t</span><span class=\"mtk1\">&lt;_Ty, _FieldTy, Field&gt;(name)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">map</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\">, </span><span class=\"mtk10\">field_t</span><span class=\"mtk1\">*&gt;::iterator </span><span class=\"mtk10\">field_iterator_t</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_t</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_field</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_info_map</span><span class=\"mtk1\">[name];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_iterator_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_field_begin</span><span class=\"mtk1\">() { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_info_map</span><span class=\"mtk1\">.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_iterator_t</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_field_end</span><span class=\"mtk1\">() { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_info_map</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_info_map_t</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;::</span><span class=\"mtk10\">_info_map_t</span><span class=\"mtk1\"> </span><span class=\"mtk10\">field_info_map_t</span><span class=\"mtk1\">&lt;_Ty&gt;::_info_map;</span></span></span></code></pre>\n<p>지난 글에서 했던 것처럼, 동일하게 map을 사용해서 이름과 <code>field_t*</code>에 대한 정보를 가지고 있다. 특이한건 모든 멤버가 다 static인데 template parameter를 가지고 있다는 것이다. 그 이유는 CRTP를 써서 register 과정에서 어떤 type인지에 대한 정보를 생략하기 위함이다. (이는 실 사용 부분에서 자세히 보자.)</p>\n<p>이제 각 field를 어떻게 등록할 것인지, helper macro를 먼저 보자.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REGISTER_FIELD_BEGIN</span><span class=\"mtk4\">() </span><span class=\"mtk6\">\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    struct </span><span class=\"mtk10\">__register</span><span class=\"mtk4\"> { </span><span class=\"mtk6\">\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">__register</span><span class=\"mtk4\">() { </span><span class=\"mtk6\">\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">            static bool init </span><span class=\"mtk1\">=</span><span class=\"mtk4\"> false; </span><span class=\"mtk6\">\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">            </span><span class=\"mtk15\">if</span><span class=\"mtk4\"> (init) </span><span class=\"mtk15\">return</span><span class=\"mtk4\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REGISTER_FIELD_END</span><span class=\"mtk4\">() </span><span class=\"mtk6\">\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        } </span><span class=\"mtk6\">\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    } _register_auto;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REGISTER_FIELD</span><span class=\"mtk4\">(</span><span class=\"mtk12\">type</span><span class=\"mtk4\">, </span><span class=\"mtk12\">name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">            </span><span class=\"mtk10\">impl_type</span><span class=\"mtk4\">::</span><span class=\"mtk11\">_register_field</span><span class=\"mtk4\">&lt;</span><span class=\"mtk10\">type</span><span class=\"mtk4\">, </span><span class=\"mtk1\">&amp;</span><span class=\"mtk10\">impl_type</span><span class=\"mtk4\">::</span><span class=\"mtk10\">name</span><span class=\"mtk4\">&gt;(</span><span class=\"mtk12\">#name</span><span class=\"mtk4\">);</span></span></span></code></pre>\n<p>역시 지난 글에서와 동일하게 struct 생성자 코드 + static 변수로 중복 실행 방지를 사용해서 해당 구조체에 접근할 때 바로 field 정보가 register 되도록 구성할 것이다.</p>\n<p>재밌는 부분은 <code>REGISTER_FIELD</code> 부분이다. 이전 글과는 다르게 어떤 class인지에 대한 정보가 빠져있다. 그게 빠질 수 있는 이유는 실제 type을 언급하는 대신 <code>impl_type</code>이라는 이름을 사용하고 있기 때문인데, 이것을 위해서 <code>field_type_info_map_t</code>가 template parameter를 갖는 것이고, 그 type을 굳이 <code>impl_type</code>이라고 typedef 해 준 것이다.</p>\n<p>즉, 멤버 포인터 변수를 작성할 때의 문법이 <code>className::*memberName</code>인데 className을 한 번 더 써주기 싫어서 만든 장치이다(…)</p>\n<p>이제 다 만들었으니까 사용해보자.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">user_t</span><span class=\"mtk1\"> : </span><span class=\"mtk10\">field_info_map_t</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> index;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string name;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">REGISTER_FIELD_BEGIN</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">REGISTER_FIELD</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, index)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">REGISTER_FIELD</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string, name)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">REGISTER_FIELD_END</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p><code>user_t</code>라는 구조체는 <code>index</code>, <code>name</code>라는 변수를 갖는다. 그리고 <code>REGISTER</code> 매크로를 통해 두 변수 모두 field 정보를 등록했다. 물론 매크로를 약간 고치면 지난 글처럼 매크로만으로 구조체 선언까지 가능해진다. 그런데 별로 그건 취향이 아니고-_- 구조체 내 변수가 깔끔하게 안 나온다. <em>(struct 변수 때문에 지저분해진다)</em></p>\n<p>좀 더 깔끔한 방법이 있을 것 같은데, 피곤하니 일단 저 정도에서 타협! 이제 다음과 같이 사용할 수 있다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"cpp\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">user_t</span><span class=\"mtk1\"> user;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">index</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;choi&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">::</span><span class=\"mtk11\">get_field</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;index&quot;</span><span class=\"mtk1\">)-&gt;</span><span class=\"mtk12\">ref</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">&gt;(&amp;user) == </span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">index</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">::</span><span class=\"mtk11\">get_field</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;name&quot;</span><span class=\"mtk1\">)-&gt;</span><span class=\"mtk12\">ref</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string&gt;(&amp;user) == </span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\">(</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">::</span><span class=\"mtk11\">get_field_begin</span><span class=\"mtk1\">(), </span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">::</span><span class=\"mtk11\">get_field_end</span><span class=\"mtk1\">(), [&amp;] (</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">pair</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk10\">string</span><span class=\"mtk1\">, </span><span class=\"mtk10\">field_t</span><span class=\"mtk1\">*&gt; </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;%s</span><span class=\"mtk6\">\\n</span><span class=\"mtk8\">&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">first</span><span class=\"mtk1\">.</span><span class=\"mtk11\">c_str</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span></code></pre>\n<p><code>get_field()</code> 함수를 사용해서 대응되는 <code>field_t</code>를 가져올 수 있고, 거기에 객체의 주소를 넣어 값을 가져올 수 있다. 그리고 등록된 모든 field를 열거할 수 있다.</p>\n<p>하지만 여기에는 지난 번 글에서와 마찬가지로 한 가지 문제점이 있다. 바로 <code>user_t</code>가 한 번도 생성된 적이 없다면 <code>user_t::get_field_begin()</code>, <code>user_t::get_field_end()</code>로 접근할 수 있는 field가 하나도 등록되지 않는다는 점이다. 즉, 무조건 <code>user_t</code> 객체가 한 번이라도 생성되어야 field가 등록된다는 것이다.</p>\n<p>위 문제로 인해 deserialize를 제대로 수행할 수 없는 문제가 발생한다. 다음 글에서는 이 문제를 어떻게 해결할 수 있는지 알아보도록 하자.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .mtk6 { color: #D7BA7D; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"mmo-server에서 attribute를 json serialize하기 위해 attribute가 가지고 있는 field의 정보를 enumerate 해야할 일이 생겼다. 그런데 c++은 reflection…","fields":{"date":"June 03, 2012","shortdesc":"","slug":"/2012/06/03/using-reflection-at-cpp-1/"},"frontmatter":{"title":"c++에서 reflection 사용하기 1","tags":["c++","reflection"]}}},"pageContext":{"slug":"/2012/06/03/using-reflection-at-cpp-1/","older":{"slug":"/2012/05/31/xml-mapping-using-java-annotation-and-reflection/","title":"java annotation과 reflection을 사용한 xml mapping"},"newer":{"slug":"/2012/06/04/using-reflection-at-cpp-2/","title":"c++에서 reflection 사용하기 2"}}},"staticQueryHashes":["848695393"]}