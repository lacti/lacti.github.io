{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/11/27/java-message-dispatcher/","webpackCompilationHash":"9650fe4e762d5ca857ae","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>본 글을 객체 간의 메시지 통신이 아니라 모듈 간의 메시지 통신에 대해 다룬다.\n즉, 특정 대상 객체를 지정하여 메시지를 보내는 내용이 아니라 전역 MessageQueue에 대해 어떤 Message를 수신할지를 등록하는 Handler 객체에 대한 내용이다.</p>\n<ul>\n<li><code>MessageQueue</code>는 전역 객체이다. <code>Message</code>를 받아서 이를 수신 Handler 객체에게 전달한다.</li>\n<li>여러 Thread에서 접근할 수 있으므로 Concurrent DataStructure를 사용한다.</li>\n<li>내부적으로 각 Message 에 대해 여러 Worker Thread 를 두어 처리할 수도 있겠지만, 일단 Message 처리의 순서를 보장하기 위해 공유 Queue 를 갖고 단일 Thread 가 처리하는 방식으로 구현한다.<br>\n(글 쓰면서 생각해보니 이 지점에서 성능 병목이 생길텐데, 고민을 더 해봐야겠다)</li>\n</ul>\n<p><code>Message</code>는 무슨 class 가 될지 모르니까 간단하게 mark interface로 만든다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Message</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>MessageQueue</code> class는 Message를 공유하는 Queue 객체와 이를 처리할 수 있도록 내부 Thread를 하나 돌린다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">BlockingQueue</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Message</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">queue</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">LinkedBlockingQueue</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Message</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MessageQueue</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Thread</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/* public this() */</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk11\">setDaemon</span><span class=\"mtk1\">(</span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        @</span><span class=\"mtk10\">Override</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">run</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk11\">process</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }.</span><span class=\"mtk11\">start</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">process</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">Message</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">null</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> ((message = </span><span class=\"mtk11\">pop</span><span class=\"mtk1\">()) != </span><span class=\"mtk4\">null</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">delegate</span><span class=\"mtk1\">(message);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Message</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pop</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">take</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">InterruptedException</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">error</span><span class=\"mtk1\">(e);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">null</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>보통의 단순한 Message Handler라면, Message에 MessageType이나 id 값을 넣어서 그 내부적으로 switch case로 분기하여 처리하는 구조가 될 것이다. 이에 대해서는 multiple-dispatch를 사용하면 보다 깔끔한 구조의 Handler를 작성할 수 있는데, Java는 어차피 느리니 Reflection을 통해 이 기능을 구현해보자.</p>\n<p>Handler는 <code>handleMessage</code>이라는 method를 갖는다. 이 때 parameter는 <code>Message</code> class를 하나만 갖는다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handleMessage</span><span class=\"mtk1\">(</span><span class=\"mtk10\">StringMessage</span><span class=\"mtk1\"> message) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handleMessage</span><span class=\"mtk1\">(</span><span class=\"mtk10\">IntMessage</span><span class=\"mtk1\"> message) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이 때 <code>MessageQueue</code>에 <code>StringMessage</code> 객체를 넣으면 첫 번째 함수가, <code>IntMessage</code> 객체를 넣으면 후자의 함수가 호출되도록 하겠다는 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">final</span><span class=\"mtk1\"> </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">HANDLER_NAME</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;handleMessage&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Map</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt;, </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Object</span><span class=\"mtk1\">&gt;&gt; </span><span class=\"mtk12\">handlerMap</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ConcurrentHashMap</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt;, </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Object</span><span class=\"mtk1\">&gt;&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addHandler</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> handler) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">handlerClass</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">handler</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getClass</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Method</span><span class=\"mtk1\"> </span><span class=\"mtk12\">method</span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handlerClass</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getDeclaredMethods</span><span class=\"mtk1\">()) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getName</span><span class=\"mtk1\">().</span><span class=\"mtk11\">equals</span><span class=\"mtk1\">(HANDLER_NAME))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">continue</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt;[] </span><span class=\"mtk12\">paramTypes</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getParameterTypes</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">messageClass</span><span class=\"mtk1\"> = paramTypes[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">Message</span><span class=\"mtk1\">.</span><span class=\"mtk12\">class</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isAssignableFrom</span><span class=\"mtk1\">(messageClass) || </span><span class=\"mtk12\">paramTypes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">error</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MessageQueueException</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Invalid Handler in &quot;</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">handlerClass</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getSimpleName</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                    + </span><span class=\"mtk8\">&quot;/&quot;</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toGenericString</span><span class=\"mtk1\">()));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">continue</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">handlerMap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">containsKey</span><span class=\"mtk1\">(messageClass)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">handlerMap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">put</span><span class=\"mtk1\">(messageClass, </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">CopyOnWriteArrayList</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Object</span><span class=\"mtk1\">&gt;());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">handlerMap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get</span><span class=\"mtk1\">(messageClass).</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(handler);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Handler 객체를 등록할 때, Handler 객체에 선언된 모든 Method를 가져온다. 그 Method 중 이름이 <code>handleMessage</code>인 것들을 찾는다. 이 때 parameter는 반드시 한 개이어야 하고, 그 type은 <code>Message</code> class를 상속받는 class이어야(<code>assignableFrom</code>) 한다.</p>\n<p>그러한 method들을 찾았다면, 그 <code>Message</code> class에 대응되는 Handler들의 목록을 저장해둔다. (여기서 Method도 같이 저장해둔다면, 나중에 invoke할 때 또 Method를 찾는 부담을 덜 수 있을 것이다.)</p>\n<p>이제 <code>Message</code>가 들어오면 그 class type에 해당하는 Handler를 찾아서 invoke를 해주면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">delegate</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Message</span><span class=\"mtk1\"> message) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">Set</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Object</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">invoked</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">HashSet</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Object</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">clazz</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">message</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getClass</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">clazz</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equals</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk12\">class</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">handlerMap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">containsKey</span><span class=\"mtk1\">(clazz)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handler</span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handlerMap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get</span><span class=\"mtk1\">(clazz)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk3\">// prevent bubbling</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">invoked</span><span class=\"mtk1\">.</span><span class=\"mtk11\">contains</span><span class=\"mtk1\">(handler)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                    </span><span class=\"mtk11\">invoke</span><span class=\"mtk1\">(handler, clazz, message);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">invoked</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(handler);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        clazz = </span><span class=\"mtk12\">clazz</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getSuperclass</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">invoked</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isEmpty</span><span class=\"mtk1\">()) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">error</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MessageQueueException</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Cannot Find MessageHandler(&quot;</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">message</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getClass</span><span class=\"mtk1\">().</span><span class=\"mtk11\">getName</span><span class=\"mtk1\">() + </span><span class=\"mtk8\">&quot;)&quot;</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">invoke</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> handler, </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk15\">?</span><span class=\"mtk1\">&gt; messageClass, </span><span class=\"mtk10\">Message</span><span class=\"mtk1\"> message) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">handlerClass</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">handler</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getClass</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">Method</span><span class=\"mtk1\"> </span><span class=\"mtk12\">method</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">handlerClass</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getDeclaredMethod</span><span class=\"mtk1\">(HANDLER_NAME, messageClass);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setAccessible</span><span class=\"mtk1\">(</span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">invoke</span><span class=\"mtk1\">(handler, message);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Exception</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">error</span><span class=\"mtk1\">(e);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>다만, bubbling을 막기 위해서 한 번 Invoke된 Handler는 다시 Invoke되지 않도록 했다. 예를 들어서,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">StringMessage</span><span class=\"mtk1\"> </span><span class=\"mtk4\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Message</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SpecialStringMessage</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk10\">StringMessage</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handleMessage</span><span class=\"mtk1\">(</span><span class=\"mtk10\">StringMessage</span><span class=\"mtk1\"> message) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handleMessage</span><span class=\"mtk1\">(</span><span class=\"mtk10\">SpecialStringMessage</span><span class=\"mtk1\"> message) {}</span></span></code></pre>\n<p><code>SpecialStringMessage</code> 객체를 전달했을 때 원하는 상황은 두 번째 함수가 호출되는 것이겠지만, 사실 <code>SpecialStringMessage</code> class는 <code>StringMessage</code> class로 assignable하기 때문에 첫 번째 함수도 호출될 수 있다.</p>\n<p>따라서 delegate 함수에서는 처리할 Message type을 가장 구체화된(derived) type부터 역순으로 올라가면서, 그 type 에 대응되는 Handler를 호출해준 뒤, 더 이상 호출되지 않도록 invoked set을 유지하는 것이다.</p>\n<p>invoke를 할 때 굳이 <code>setAccessible</code>을 true 해주는 이유는, message handler 함수가 굳이 객체 외부에서 불릴 필요가 없는데 public으로만 선언되어야 하는 것을 막기 위함이다. (물론 그렇다고 private으로 선언하면 해당 handler는 <em>not read locally warning</em>이 발생하게 되므로, 안타깝지만 default 정도로 선언해주는게 적당한 것 같다)</p>\n<p>작성된 <code>MessageQueue</code>는 다음과 같이 사용될 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handleMessage</span><span class=\"mtk1\">(</span><span class=\"mtk10\">StringMessage</span><span class=\"mtk1\"> message) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">System</span><span class=\"mtk1\">.</span><span class=\"mtk12\">out</span><span class=\"mtk1\">.</span><span class=\"mtk11\">println</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getMessage</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handleMessage</span><span class=\"mtk1\">(</span><span class=\"mtk10\">IntMessage</span><span class=\"mtk1\"> message) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">System</span><span class=\"mtk1\">.</span><span class=\"mtk12\">out</span><span class=\"mtk1\">.</span><span class=\"mtk11\">println</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getValue</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\">[] args) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">MessageQueue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">listen</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ExampleHandler</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">MessageQueue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">StringMessage</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;hello world&quot;</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">MessageQueue</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">IntMessage</span><span class=\"mtk1\">(</span><span class=\"mtk7\">12345</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Thread</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sleep</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1000</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">InterruptedException</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">e</span><span class=\"mtk1\">.</span><span class=\"mtk11\">printStackTrace</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>IntMessage</code> class는 int를 생성자로 받고 <code>StringMessage</code> class는 String을 생성자로 받는 단순한 wrapper class이다. <code>MessageQueue</code>에 <code>ExampleHandler</code> 객체를 등록하고 각 type의 message 객체를 넣으면, 첫 번째는 <code>StringMessage</code> parameter type을 갖는 handler가, 두 번째는 <code>IntMessage</code> parameter type을 갖는 handler가 호출된다.</p>\n<p>(마지막의 <code>Thread.sleep</code>은 daemon Thread로 <code>Message</code>를 처리하는 <code>MessageQueue</code>가 Queue에 있는 Message를 처리하기 전에 main 함수가 끝나 프로그램이 종료되어 Message 처리가 되지 못하는 것을 막기 위함이다)</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"본 글을 객체 간의 메시지 통신이 아니라 모듈 간의 메시지 통신에 대해 다룬다.\n즉, 특정 대상 객체를 지정하여 메시지를 보내는 내용이 아니라 전역 MessageQueue에 대해 어떤 Message를 수신할지를 등록하는 Handler…","fields":{"date":"November 27, 2011","shortdesc":""},"frontmatter":{"title":"간단한 Message 체계 구현 (Java)","tags":["java","message"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/11/27/java-message-dispatcher/"}}}