{"componentChunkName":"component---src-templates-page-tsx","path":"/2014/07/15/csharp-data-server-library-impl/","webpackCompilationHash":"3b8c3c3cfcb69a320067","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>지난 글에서는 csv 데이터를 binary 파일로 serialize하여 데이터의 loading 속도를 올리는 방법에 대해 알아보았다. 해당 방법은 용량이 큰 csv 파일에 대해서도 효과가 크지만, 작게 분할된 많은 csv 파일을 다시 적절한 크기의 binary 파일로 재구성하여 작업할 때 더욱 효과를 크게 느낄 수 있다.</p>\n<p>하지만 csv 파일의 용량이 너무 크거나, 아니면 csv 파일이 너무 많을 경우에는 해당 방법을 사용하기가 어렵다. <a href=\"https://stackoverflow.com/questions/1087982/single-objects-still-limited-to-2-gb-in-size-in-clr-4-0\">.net vm은 x64 모드에서도 단일 객체에 대해 2GB 이상의 크기에 대한 메모리 할당 요청을 하면 <code>OutOfMemoryException</code>이 발생</a>하는데, 위 구조에서는 파일의 내용을 한 번에 <code>byte[]</code> 배열로 읽고, 그 결과물을 하나의 <code>List&#x3C;T></code>에 담는 구조이기 때문이다.</p>\n<p>또한 이렇게 loading 시간을 단축한다고 해도 원본 데이터의 크기가 아주 클 경우에는 줄어든 loading 시간도 클 수 밖에 없다. 그리고 binary로 serialize/deserialize하는 기계적인 코드를 매번 수작업으로 입력해야 하는 것도 불필요한 부담이다.</p>\n<p>따라서 본 글에서는 위에서 언급한 3가지 문제에 대해 어떻게 접근할지 알아보도록 하겠다.</p>\n<h2>collection of IEnumerable</h2>\n<p>데이터가 아주 크거나 많을 경우 .net vm 메모리 할당 한계로 인해 위 구조를 사용할 수 없는 문제가 있다. 이 문제를 해결하는 가장 간단한 방법은 binary 파일을 여러 개로 쪼갠 후 각각을 각기 다른 <code>List&#x3C;T></code>로 읽고, 이들에 대한 collection인 <code>List&#x3C;List&#x3C;T>></code>에 대해 쿼리를 수행하는 방법일 것이다. 예를 들어, 위 예제에서 item*.bin 패턴으로 파일이 여러 개 있다고 할 경우,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">itemsList</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">foreach</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">binPath</span><span class=\"mtk1\"> </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Directory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">GetFiles</span><span class=\"mtk1\">(</span><span class=\"mtk12\">workspace</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;item*.bin&quot;</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">items</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">File</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ReadAllBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">binPath</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">rowSize</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">items</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">DbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt64</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">4</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">UserDbId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt64</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">12</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">20</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">Amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BitConverter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToInt32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">24</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">itemsList</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">items</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>와 같이 <code>List&#x3C;List&#x3C;ItemData>></code>를 만들고 여러 개의 <code>List&#x3C;ItemData></code>를 담는 것이다. 이렇게 될 경우 각 <code>List&#x3C;ItemData></code>에서 할당하는 메모리의 크기는 2GB를 넘지 않게 한다면 위 문제를 적어도 <strong>읽는 과정에서는</strong> 회피할 수 있을 것이다.</p>\n<p>예를 들어 <code>itemLists</code>에 존재하는 수량(Amount)이 10개 이상인 서로 다른 <code>TemplateId</code>의 개수를 확인하려면 다음과 같이 쿼리를 작성하면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk12\">itemsList</span><span class=\"mtk1\">.</span><span class=\"mtk11\">SelectMany</span><span class=\"mtk1\">(</span><span class=\"mtk12\">e</span><span class=\"mtk1\"> =&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">e</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Where</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Amount</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">10</span><span class=\"mtk1\">).</span><span class=\"mtk11\">Select</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> =&gt; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    ).</span><span class=\"mtk11\">Distinct</span><span class=\"mtk1\">().</span><span class=\"mtk11\">Count</span><span class=\"mtk1\">()</span></span></code></pre>\n<p>이 경우 <code>SelectMany()</code>는 가지고 있는 각 <code>List&#x3C;ItemData></code>를 차례로 순회하면서 <code>yield return</code>으로 각각을 반환한다. 따라서 반환 시 추가적인 메모리 할당을 요구하지 않으며 데이터를 stream 형태로 제공하게 된다. 그 이후 연결되는 <code>Select()</code>,<code>Where()</code>이나 <code>Distinct()</code>, <code>Count()</code> 역시 stream 형태로 작업을 수행하는 연산자이므로 메모리 문제를 유발하지 않는다.</p>\n<p>하지만 <code>GroupBy()</code>나 <code>OrderBy()</code> 연산자 등 stream에 존재하는 모든 데이터를 buffer에 담고 작업을 처리해야하는 연산자의 경우에는 위 collection에 존재하는 모든 데이터를 담기 위한 내부 buffer를 할당해야 하므로 이 크기가 제한을 넘어가 프로그램이 정상 동작하지 않을 수 있다.</p>\n<p>.NET Framework 4.5부터는 <a href=\"https://msdn.microsoft.com/en-us/library/hh285054.aspx\">gcAllowVeryLargeObjects</a> 옵션이 추가되었으므로 이 옵션을 통해 문제를 회피할 수 있다고도 한다.</p>\n<h2>data server</h2>\n<p>만약 데이터가 아주 커지고 더 많아질 경우 위와 같은 방법을 사용해도 여전히 loading 시간이 길어질 수 있다. 이 경우에는 지체없이 데이터베이스를 쓰면 된다 […] 하지만 이왕 여기까지 왔으니 좀 더 나아가보자.</p>\n<p>데이터를 매번 loading하는 것이 느리다면 한 번 띄워놓은 데이터를 계속 사용할 수 있으면 된다. 그러면 대충 다음의 방법을 생각해볼 수 있다.</p>\n<ul>\n<li>데이터를 다 읽어둔 서버가 데이터 쿼리를 수행할 클라이언트에게 ipc로 데이터를 전달한다.</li>\n<li>데이터 서버가 읽어둔 데이터를 shared memory로 클라이언트와 공유한다.</li>\n<li>데이터 서버에게 연결한 클라이언트가 서버에게 데이터 쿼리를 보내고, 서버는 그 처리 결과를 클라이언트에게 돌려준다.</li>\n</ul>\n<p>각 방법에 대해 살펴보도록 하자.</p>\n<h2>all-data retrieving by ipc</h2>\n<p>c# wcf는 잘 추상화되어 있으므로 IPC 통신 코드를 작성하는 것은 간단하다. 일단 교환을 위한 struct에 대해 <code>DataContract</code>를 명시해준다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">[</span><span class=\"mtk10\">DataContract</span><span class=\"mtk1\">]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ItemData</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    [</span><span class=\"mtk10\">DataMember</span><span class=\"mtk1\">] </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Timestamp</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    [</span><span class=\"mtk10\">DataMember</span><span class=\"mtk1\">] </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">long</span><span class=\"mtk1\"> </span><span class=\"mtk12\">DbId</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    [</span><span class=\"mtk10\">DataMember</span><span class=\"mtk1\">] </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">long</span><span class=\"mtk1\"> </span><span class=\"mtk12\">UserDbId</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    [</span><span class=\"mtk10\">DataMember</span><span class=\"mtk1\">] </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TemplateId</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    [</span><span class=\"mtk10\">DataMember</span><span class=\"mtk1\">] </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Amount</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>그리고 통신을 위한 interface를 선언한다. 위 struct와 아래 interface는 IPC 서버와 클라이언트가 모두 가지고 있어야 한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">[</span><span class=\"mtk10\">ServiceContract</span><span class=\"mtk1\">]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IDataProvider</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    [</span><span class=\"mtk10\">OperationContract</span><span class=\"mtk1\">]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">IEnumerable</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt; </span><span class=\"mtk11\">RetrieveItems</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이제 서버에서 위 interface를 구현하는 객체를 구현한다. 객체 생성 시 데이터를 읽어두고, <code>RetrieveItems()</code>를 부를 때 읽어놓은 데이터를 반환해주면 되겠다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">DataProvider</span><span class=\"mtk1\"> : </span><span class=\"mtk10\">IDataProvider</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk4\">readonly</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">_items</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DataProvider</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// load data</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IEnumerable</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">&gt; </span><span class=\"mtk11\">RetrieveItems</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_items</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이제 필요한 모든 class 및 interface를 작성했으니 이를 IPC 서비스로 제공을 해주면 되겠다. 서버 쪽 구동 코드는 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">using</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">var</span><span class=\"mtk1\"> </span><span class=\"mtk10\">host</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ServiceHost</span><span class=\"mtk1\">(</span><span class=\"mtk10\">typeof</span><span class=\"mtk1\">(</span><span class=\"mtk10\">DataProvider</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Uri</span><span class=\"mtk1\">[] { </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Uri</span><span class=\"mtk1\">(&quot;</span><span class=\"mtk10\">net</span><span class=\"mtk1\">.</span><span class=\"mtk10\">pipe</span><span class=\"mtk1\">:</span><span class=\"mtk3\">//localhost&quot;) }))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">host</span><span class=\"mtk1\">.</span><span class=\"mtk10\">AddServiceEndpoint</span><span class=\"mtk1\">(</span><span class=\"mtk10\">typeof</span><span class=\"mtk1\">(</span><span class=\"mtk10\">IDataProvider</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">NetNamedPipeBinding</span><span class=\"mtk1\">, &quot;</span><span class=\"mtk10\">DataProvider</span><span class=\"mtk1\">&quot;);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">host</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Open</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">WriteLine</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Server is running&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ReadLine</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">host</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Close</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>ServiceHost</code>로 서비스할 객체를 지정하고, 서비스를 수행할 Endpoint를 지정한다. 그리고 <code>Open()</code>을 불러주면 된다. <code>Open()</code> 함수는 비동기 수행 함수이므로 서버 종료를 막기 위해 <code>ReadLine()</code>을 넣었다.</p>\n<p>클라이언트는 이제 <code>net.pipe://localhost/DataProvider</code>에 접근해서 <code>RetrieveItems()</code> 함수를 호출하면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pipeFactory</span><span class=\"mtk1\"> =</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ChannelFactory</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">IDataProvider</span><span class=\"mtk1\">&gt;(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">NetNamedPipeBinding</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">MaxReceivedMessageSize</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">int</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MaxValue</span><span class=\"mtk1\"> },</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">EndpointAddress</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;net.pipe://localhost/DataProvider&quot;</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">provider</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pipeFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">CreateChannel</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">items</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">provider</span><span class=\"mtk1\">.</span><span class=\"mtk11\">RetrieveItems</span><span class=\"mtk1\">();</span></span></code></pre>\n<p>다만 문제는 원래 이렇게 큰 객체를 주고 받기 위해 설계된 개념이 아니기 때문에 <code>MaxReceivedMessageSize</code> 값을 최대한 크게 설정해주어야 한다는 것이다. 그런데 이 값의 한계치가 <code>int.MaxValue</code>이므로 결국 데이터의 크기가 2GB보다 큰 것은 이 구현을 통해 받을 수가 없다는 것이다.</p>\n<p>뿐만 아니라 위 코드를 동작시켜보면 local에서 자료를 직접 읽을 때보다 속도가 매우 느린 것을 확인할 수 있다. 심지어 이 글에서 계속 사용하고 있는 데이터 기준으로 첫 번째 예제보다 수행 속도가 느리다. 즉, 위와 같이 모든 <code>ItemData</code> 객체를 클라이언트에 받아서 쿼리를 수행하는 방식은 적절하지 않다는 것이다.</p>\n<h2>all-data retrieving by shared memory</h2>\n<p>위 IPC 통신이 느린 이유는 그렇게 쓰라고 만든 것이 아니기 때문인 이유도 있지만, IPC에서 객체를 주고 받을 때 발생하는 .NET serialize 비용이 꽤 크기 때문이다. .NET serializer는 전 글에서 구현한 <code>BinaryWriter</code> 수준의 Marshaling이 아닌 type 정보 등을 포함한 보다 복잡하고 큰 serializing을 수행한다. 때문에 느릴 수 밖에 없다.</p>\n<p>그렇다면 IPC를 사용하지 않고 shared memory를 사용해서 문제를 해결할 수 있을까? 안타깝게도 별로 좋은 선택은 아니다. 왜냐하면 shared memory는 byte 수준의 메모리를 공유하는 기법이지 객체를 공유하기 위한 것이 아니기 때문이다.</p>\n<p>즉 <code>List&#x3C;ItemData></code>를 서버 측에서 shared memory에 byte로 marshaling해서 올려놓든가 아니면 전 글에서 썼던 것처럼 <code>BinaryWriter</code>로 기록해놓고, 클라이언트는 이 byte를 다시 unmarshaling하거나 <code>BinaryReader</code>로 읽어야 한다. 그렇다면 기존과 비교하여 처음 binary 파일을 읽는 IO 비용만 없어지는 셈인데 이 방법은 구현 복잡도에 비해서 별로 큰 효과를 볼 수 있을 것 같지 않은 방법이다.</p>\n<h2>execute query in server</h2>\n<p>위 방법들이 별로 좋지 않은 이유는 클라이언트가 모든 객체에 대한 정보를 다 받은 뒤 클라이언트에서 쿼리를 수행하려 했기 때문이다. 이번에는 발상을 바꿔서 클라이언트에서 직접 쿼리를 하는 것이 아니라, <strong>쿼리 객체를 서버로 전달하여 수행한 그 결과를 반환하도록</strong> 설계해보자.</p>\n<ul>\n<li>서버는 데이터를 모두 읽어서 메모리에 올려놓는다.</li>\n<li>그리고 쿼리 수행을 위한 Service(IPC 등)를 시작한다.</li>\n<li>클라이언트는 수행할 LINQ에 대해 <code>ExpressionTree</code>를 만든다.</li>\n<li><a href=\"https://expressiontree.codeplex.com/\">ExpressionTree Serializer</a>를 사용하여 ExpressionTree를 서버로 전달한다.</li>\n<li>서버는 전달 받은 <code>ExpressionTree</code> 객체에 대해 Query를 복원해서 읽어놓은 데이터에 대해 쿼리를 수행한다. 그리고 그 결과를 클라이언트에게 반환한다.</li>\n<li>클라이언트는 결과를 받아서 적절히 보여준다.</li>\n</ul>\n<p>간단한 데이터 처리 API인 셈이다.</p>\n<p><code>ExpressionTree</code> 자체는 Serializable하지 않으니 외부 라이브러리의 도움을 받는다. 그 외에는 위 IPC 예제와 동일하게 쿼리에 대한 <code>OperationContract</code> 하나 만들어주고 그 수행 결과를 반환 받도록 하면 된다. 이에 대해서는 이미 다음 라이브러리들이 적절한 예제를 구현해 놓았다.</p>\n<ul>\n<li><a href=\"https://expressiontree.codeplex.com/\">ExpressionTree Serializer</a></li>\n<li><a href=\"https://github.com/esskar/Serialize.Linq\">Serialize.Linq</a></li>\n</ul>\n<h2>binary serializer</h2>\n<p>이번에는 좀 다른 이야기를 해보자. 데이터를 serialize/deserialize하는 코드를 매번 손으로 직접 작성했다. 이는 굉장히 유사한 코드이지만 <code>ItemData</code>와 같은 struct가 추가될 때마다 그 struct에 대한 코드를 직접 작성해주어야 한다. 이를 개선해보자.</p>\n<ul>\n<li>Reflection에 의해 member type을 runtime에 확인하고 serialize를 수행하게 한다.</li>\n<li>struct에 대한 metadata를 정의하고 code generator를 사용하여 serialize 코드를 생성한다.</li>\n</ul>\n<p>첫 번째 방법은 당연히 느리다. 데이터를 읽는 부분은 데이터의 개수만큼 수행되는 반복문 안에서 호출되는데 그 회수만큼 reflection을 사용하기 때문에 느릴 수 밖에 없다.</p>\n<p>code generation은 나쁘지 않은 선택이다. 코드가 runtime 이전에 만들어지기 때문에 수행할 때에는 이미 작성된 코드로 동작하므로 손으로 작성한 것과 동일하게 빠른 동작을 보여줄 수 있다. 직접 generator를 만들어도 되고, vs랑 친한 T4를 사용하는 것도 가능하다. 하지만 코드 생성을 위해 build script를 수정해야 하는 귀찮은 문제가 있다. 만약 이 글에서 소개하는 동작을 위한 binary serailize를 라이브러리로 만들어 배포한다고 하면 해당 라이브러리 사용자가 build script 수정도 해야 하므로 별로 좋아보이지는 않는다.</p>\n<p>둘의 장점을 모두 취해보자. code generator를 사용하지 않고 runtime에 reflection으로 struct의 구조를 파악하여 직접 CLR code를 생성하는 것이다. 즉, <code>Reflection.Emit</code>을 사용하여 <code>Dynamic Invoke</code>를 사용하는 것이다.</p>\n<h2>Reflection.Emit</h2>\n<p>IL 코드를 직접 다 공부해서 작성하는 방법도 좋지만 일단 c# 프로그램 작성 후 <strong>ILDASM</strong> 프로그램을 사용하여 얻어낸 IL을 기록하는 방법으로 작업하는 것이 편하다.</p>\n<p>간단하게 <code>BitConverter</code>를 사용하여 binary로부터 특정 객체를 읽는 코드를 IL로 작성해보면 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">method</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">DynamicMethod</span><span class=\"mtk1\">(</span><span class=\"mtk12\">methodName</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typeof</span><span class=\"mtk1\">(</span><span class=\"mtk10\">IData</span><span class=\"mtk1\">),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">new</span><span class=\"mtk1\">[] { </span><span class=\"mtk4\">typeof</span><span class=\"mtk1\">(</span><span class=\"mtk4\">byte</span><span class=\"mtk1\">[]), </span><span class=\"mtk4\">typeof</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">).</span><span class=\"mtk11\">MakeByRefType</span><span class=\"mtk1\">() });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">generator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">GetILGenerator</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">localData</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">DeclareLocal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">valueType</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldloca_S</span><span class=\"mtk1\">, </span><span class=\"mtk12\">localData</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Initobj</span><span class=\"mtk1\">, </span><span class=\"mtk12\">valueType</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">foreach</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field</span><span class=\"mtk1\"> </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">valueType</span><span class=\"mtk1\">.</span><span class=\"mtk11\">GetFields</span><span class=\"mtk1\">())</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">field</span><span class=\"mtk1\">.</span><span class=\"mtk12\">FieldType</span><span class=\"mtk1\"> != </span><span class=\"mtk4\">typeof</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">string</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// read and set value</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldloca_S</span><span class=\"mtk1\">, </span><span class=\"mtk12\">localData</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldarg_0</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldarg_1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldind_I4</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Call</span><span class=\"mtk1\">, </span><span class=\"mtk12\">BitConverterMap</span><span class=\"mtk1\">[</span><span class=\"mtk12\">field</span><span class=\"mtk1\">.</span><span class=\"mtk12\">FieldType</span><span class=\"mtk1\">]);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Stfld</span><span class=\"mtk1\">, </span><span class=\"mtk12\">field</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// increase offset</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldarg_1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Dup</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldind_I4</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldc_I4</span><span class=\"mtk1\">, </span><span class=\"mtk12\">TypeSizeMap</span><span class=\"mtk1\">[</span><span class=\"mtk12\">field</span><span class=\"mtk1\">.</span><span class=\"mtk12\">FieldType</span><span class=\"mtk1\">]);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Add</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Stind_I4</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// 생략</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ldloc_0</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Box</span><span class=\"mtk1\">, </span><span class=\"mtk12\">valueType</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">generator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Emit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OpCodes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Ret</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>지정된 type의 field를 순회하면서 그에 맞는 <code>BitConverter</code>의 함수를 호출한 후 값을 field에 넣어주는 코드이다. 만약 잘못 작성할 경우 <code>InvalidProgramException</code>이 발생하게 된다. 여러 type을 다루어야 할 수 있으므로 반환 시 boxing을 해줬다.</p>\n<p>위와 같이 코드를 작성하고 <code>CreateDelegate()</code>로 delegate를 생성하면 다음과 같이 쓸 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">delegate</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IData</span><span class=\"mtk1\"> </span><span class=\"mtk10\">BinReader</span><span class=\"mtk1\">(</span><span class=\"mtk4\">byte</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk4\">ref</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offset</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reader</span><span class=\"mtk1\"> = (</span><span class=\"mtk10\">BinReader</span><span class=\"mtk1\">)</span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">CreateDelegate</span><span class=\"mtk1\">(</span><span class=\"mtk4\">typeof</span><span class=\"mtk1\">(</span><span class=\"mtk10\">BinReader</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">offset</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Length</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">items</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Add</span><span class=\"mtk1\">((</span><span class=\"mtk10\">ItemData</span><span class=\"mtk1\">) </span><span class=\"mtk11\">reader</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk4\">ref</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offset</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Reflection.Emit 관련된 내용을 여기서 서술하면 너무 길어질 수 있으므로 일단 넘어가도록 하겠다.</p>\n<ul>\n<li><a href=\"https://www.codeproject.com/Articles/13337/Introduction-to-Creating-Dynamic-Types-with-Reflec\">Codeproject: Introduction to Creating Dynamic Types with Reflection.Emit</a></li>\n<li><a href=\"https://www.codeproject.com/Articles/13969/Introduction-to-Creating-Dynamic-Types-with-Refl\">Codeproject: Introduction to Creating Dynamic Types with Reflection.Emit: Part 2</a></li>\n<li><a href=\"https://www.codeproject.com/Articles/9927/Fast-Dynamic-Property-Access-with-C\">Codeproject: Fast Dynamic Property Access with C#</a></li>\n</ul>\n<h2>마무리</h2>\n<p>단순히 데이터를 binary로 serialize하는 것을 넘어 data server를 구현하거나, 보다 일반적인 라이브러리를 위한 Reflection.Emit까지 다뤄보았다.</p>\n<p>데이터를 처리함에 있어서 당연히 데이터베이스를 사용하면 좋갰지만,</p>\n<ul>\n<li>굳이 그럴 필요가 없는 정적인 데이터 (데이터시트 등)</li>\n<li>가공된 데이터에 대한 cache</li>\n<li>데이터베이스의 규격으로 담기 힘든 데이터</li>\n</ul>\n<p>등에 대해서는 위와 같은 방법으로 간단히 데이터 서버를 구축해서 사용하는 것도 괜찮지 않을까 생각한다. 일종의 <a href=\"https://en.wikipedia.org/wiki/Data_virtualization\">Data Virtualization</a> 인 셈이다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"지난 글에서는 csv 데이터를 binary 파일로 serialize하여 데이터의 loading 속도를 올리는 방법에 대해 알아보았다. 해당 방법은 용량이 큰 csv 파일에 대해서도 효과가 크지만, 작게 분할된 많은 csv…","fields":{"date":"July 15, 2014"},"frontmatter":{"title":"c# 데이터 서버 라이브러리 구현","tags":["c#","data"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2014/07/15/csharp-data-server-library-impl/"}}}