{"componentChunkName":"component---src-templates-blog-js","path":"/2011/07/20/object-ctor-dtor-with-goto","webpackCompilationHash":"69d4b35bc62b6069aa17","result":{"data":{"markdownRemark":{"html":"<h2>생성자 소멸자 이야기</h2>\n<p>어떤 class의 생성자와 소멸자를 구현했다. 거기에서는 엄청나게 복잡한 작업을 수행한다. 예를 들면,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Object</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Object</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">/* 엄청 복잡한 작업 */</span><span class=\"mtk1\"> }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">~Object</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">/* 진짜 복잡한 작업 */</span><span class=\"mtk1\"> }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Object</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Object&amp; </span><span class=\"mtk12\">other</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">/* 적절한 복사 생성자 */</span><span class=\"mtk1\"> }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Object&amp; operator = (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Object&amp; </span><span class=\"mtk12\">other</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">/* 신통한 대입 연산자 */</span><span class=\"mtk1\"> }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>그리고 저 객체를 다음과 같이 사용한다고 해보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::vector&lt;Object&gt; objects;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> i = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; i &lt; </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">; ++i)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    objects.</span><span class=\"mtk11\">push_back</span><span class=\"mtk1\"> (objectFactory.</span><span class=\"mtk11\">create</span><span class=\"mtk1\">(i));</span></span></code></pre>\n<p>무엇이 문제일까?<br>\n복사 생성자와 대입 연산자가 적절하게 잘 구현되어있다고 하자. 그러면 sallow copy 문제는 당연히 아니다.</p>\n<p>문제는 <code>vector</code> 자체가 <code>Object</code>로 구현되어 있기 때문에 내부에 <code>Object</code>에 대한 배열을 갖고 있을 것이며, <code>push_back</code>을 수행할 때마다 내부의 배열 공간이 할당되면서 <code>Object</code>의 생성자에서 무시무시한 작업을 수행할 것이며, 수행된 이후에 대입 연산자를 통해 Object 객체가 복사될 것이다.\n(물론 <code>vector</code>의 <code>push_back</code>은 넣을 때마다 늘어나지는 않고, 2배인가 √2배인가로 늘어났던 것 같다)</p>\n<p>또한 저 <code>vector</code>가 소멸될 때 내부 <code>Object</code>배열의 소멸자가 단체로 호출된다면 ㅎㄷㄷ</p>\n<p>가끔 이런 코드를 작성하는 사람도 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">while</span><span class=\"mtk1\"> (running)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::vector&lt;Object&gt; objects;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">objectManager.flush</span><span class=\"mtk1\"> (objects))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">objects.begin</span><span class=\"mtk1\"> (), </span><span class=\"mtk12\">objects.end</span><span class=\"mtk1\"> (), </span><span class=\"mtk11\">ObjectFunctor</span><span class=\"mtk1\"> ());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>심지어 이 구문에서는 <code>std::vector</code> 객체를, 그것도 <code>Object</code>라는 무시무시한 객체에 대한 <code>vector</code> 객체를 매 { } 마다 생성, 소멸을 반복한다. 즉 while 의 { 에서 vector 의 생성자가 호출되고, } 에서 <code>vector</code> 의 소멸자가 호출되는 것이다.</p>\n<p>즉, 위의 코드를 다시 대충 표현해보면,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">while</span><span class=\"mtk1\"> (running)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::vector&lt;Object&gt; objects;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// objects::vector&lt;Object&gt;();  생성자 호출</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">objectManager.flush</span><span class=\"mtk1\"> (objects))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">objects.begin</span><span class=\"mtk1\"> (), </span><span class=\"mtk12\">objects.end</span><span class=\"mtk1\"> (), </span><span class=\"mtk11\">ObjectFunctor</span><span class=\"mtk1\"> ());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// objects::~vector&lt;Object&gt;();  소멸자 호출</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">} </span><span class=\"mtk3\">// while loop</span></span></code></pre>\n<p>이게 얼마나 프로그램에 부담이 될지는 자명한 일.<br>\n<em>(추후 수정하면 위 내용에는 좀 오해가 있었고, 실제 vector의 생성 시에는 별로 하는 일이 없으므로 <code>vector</code> 생성마다 부담이 되는 건 없다)</em></p>\n<h2>goto 이야기</h2>\n<p>옛날에는 error 처리를 위해 goto가 추천되던 시절이 있었다. 오해 말자. C 언어 시절이다.<br>\n그 이유는 function 내에 탈출 흐름 구문(return)이 너무 많아지면 에러 처리 등이 힘들기 때문에 에러를 처리하기 위해 goto 를 쓴다는 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">socket_accept</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">socket_t</span><span class=\"mtk1\">** </span><span class=\"mtk12\">server</span><span class=\"mtk1\">, </span><span class=\"mtk10\">socket_t</span><span class=\"mtk1\">** </span><span class=\"mtk12\">client</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">NULL</span><span class=\"mtk1\"> == (*server = </span><span class=\"mtk11\">serversocket_create</span><span class=\"mtk1\"> ())) </span><span class=\"mtk15\">goto</span><span class=\"mtk1\"> error_out;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">NULL</span><span class=\"mtk1\"> == (*client = </span><span class=\"mtk11\">clientsocket_create</span><span class=\"mtk1\"> ())) </span><span class=\"mtk15\">goto</span><span class=\"mtk1\"> error_out;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (-</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">socket_listen</span><span class=\"mtk1\"> (*server)) </span><span class=\"mtk15\">goto</span><span class=\"mtk1\"> error_out;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (-</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">socket_accpet</span><span class=\"mtk1\"> (*server, client)) </span><span class=\"mtk15\">goto</span><span class=\"mtk1\"> error_out;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (-</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">socket_handshake</span><span class=\"mtk1\"> (*client)) </span><span class=\"mtk15\">goto</span><span class=\"mtk1\"> error_out</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">error_out:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">NULL</span><span class=\"mtk1\"> != *client) </span><span class=\"mtk11\">socket_close</span><span class=\"mtk1\"> (*client);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">NULL</span><span class=\"mtk1\"> != *server) </span><span class=\"mtk11\">socket_close</span><span class=\"mtk1\"> (*server);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> -</span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>만약 위의 코드를 에러 확인 후 자원 해제 및 에러를 반환하게 했다면, 꽤나 많은 검사와 해제 중복 코드가 생겼을 것이다. 그렇기 때문에 에러 발생 시 할당한 자원을 모두 해제하고 에러 코드를 반환하기 위한 구문을 하단에 모아놓고, 에러 발생 시 그 쪽으로 goto를 시킨다는게 주 발상이었던 것이다.</p>\n<p>C++에 와서 저런 문제가 없어졌을까?<br>\n없어지지는 않았지만 설계적 접근으로 해결할 수 있다. java 같은 경우는 <del>(많이 욕먹은 이유 중 하나이지만)</del> checked exception을 사용해서 logic 과 exception 을 깔끔하게 분리할 수 있게 해주기도 하였다. <del>(물론 쓰기에 따라 안 깔끔할 수도 있지만)</del></p>\n<p>재밌는건, 저러한 코드를 C++에서 작성했다면, 옛날 컴파일러에서 문제가 발생할 여지가 있다는 것이다.\nObject 예제로 확인해보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::vector&lt;Object&gt; objects;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// objects::vector&lt;Object&gt;(); 생성자 호출</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (objectManager.</span><span class=\"mtk11\">flush</span><span class=\"mtk1\"> (objects))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\"> (objects.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\"> (), objects.</span><span class=\"mtk11\">end</span><span class=\"mtk1\"> (), </span><span class=\"mtk11\">ObjectFunctor</span><span class=\"mtk1\"> ());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">goto</span><span class=\"mtk1\"> error_out; </span><span class=\"mtk3\">// flush 에 실패했다면 error out!</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// objects::~vector&lt;Object&gt;(); 소멸자 호출</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">error_out:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 모종의 에러 처리 작업</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>한 눈에 알 수 있다. goto에 의해 객체의 소멸자 호출 구문을 멋지게 뛰어넘어버린다. 만약 Object 생성자에서 동적으로 할당한 메모리를 소멸자에서 해제하는 코드가 있다면, goto에 의해 메모리가 줄줄 새게 된다는 것이다.</p>\n<p>이러한 문제가 가장 심하게 발생했던 곳은 SEH (structured exception handler) 이다. 객체를 가지고 어떤 일을 수행하다가 예외가 발생하면? try catch 구문을 만날 때까지 stack 이 주욱 감겨(rewinding) 올라가는데 이 과정에서 객체의 소멸자를 안 불렀다는 \"이야기\"가 있다. 물론 나는 당해본 적이 없어서 모르겠지만 -_-</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Object object;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// object::Object(); Object의 생성자는 호출이 된다.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">throw</span><span class=\"mtk1\"> std::</span><span class=\"mtk11\">string</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;memory leak!&quot;</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// Stack은 감아주지만 소멸자는 호출이 안된다.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// object::~Object(); 소멸자는 누가 불러주나?</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>그렇다면 이걸 해결하기 위한 방법으로는 어떤 것이 있을까? 재미있게도, <code>do, while(0)</code> 문으로 해결이 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">do</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::vector&lt;Object&gt; objects;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// objects::vector&lt;Object&gt;(); 생성자 호출</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">objectManager.flush</span><span class=\"mtk1\"> (objects))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">objects.begin</span><span class=\"mtk1\"> (), </span><span class=\"mtk12\">objects.end</span><span class=\"mtk1\"> (), </span><span class=\"mtk11\">ObjectFunctor</span><span class=\"mtk1\"> ());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">break</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// flush 에 실패했다면 에러 처리를 하자</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// objects::~vector&lt;Object&gt;(); 소멸자 호출</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">} </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// 모종의 에러 처리 작업</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></code></pre>\n<p><code>do while(0)</code> 는 어차피 한 번 실행되고 종료되는 구문이다. 다만 scope 만 하나 만들어 줄 수 있으며, 그냥 { } 보다 좋은건 <code>while (0)</code> 뒤에 ; 이 붙을 수 있기 때문에 과거 C에서 매크로 함수로 많이 썼던 방법이었다.</p>\n<p>하지만 더 좋은 것은 <code>break</code> 구문이 먹는다는 것이고, <code>break</code> 구문은 <code>do while</code>의 scope를 벗어나는 지점으로 이동하기 때문에 objects 의 소멸자가 호출될 수 있다는 것이다.</p>\n<p>위의 코드를 보면 정상 경로에서 } 가 닫히기 직전인 objects의 소멸자 호출이 return보다 나중에 되어서 해제가 안되는 것 아니냐고 할 수 있겠지만, 옛날 컴파일러는 다행히 그정도로 멍청하지 않아서 소멸자를 불러주고 return을 수행해준다. 고로 모두 행복하다.</p>\n<p>재미있는 것은, <em>visual studio 2010으로 goto로 탈출 했을 경우 객체의 소멸자가 불리지 않는가!</em> 에 대해 실험을 해봤는데, 이 신통한 컴파일러가 goto 구문 앞에다가 소멸자를 부르는 코드를 추가해놨다-_-</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        Object </span><span class=\"mtk11\">object</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">rand</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">PrintStatus</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">GetStatus</span><span class=\"mtk1\">() &gt; </span><span class=\"mtk7\">10</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// object::~object();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">goto</span><span class=\"mtk1\"> error_out;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">object</span><span class=\"mtk1\">.</span><span class=\"mtk11\">OnComplete</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// object::~object();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">error_out:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> -</span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>뭐, 어쨌든 코드의 흐름이 이리 뛰고 저리 뛰고를 자주 하면 짜기도, 읽기도, 고치기도 힘들어진다. 그럼 결국 오묘한 버그가 탄생하고 야근을 하게 되겠지!</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","fields":{"date":"July 20, 2011","path":"/2011/07/20/object-ctor-dtor-with-goto"},"frontmatter":{"title":"객체의 생성, 소멸과 goto 이야기","tags":["c++"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}