{"componentChunkName":"component---src-templates-page-tsx","path":"/2010/05/01/java-network-programming-1-basic/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>네트워크라는 것에 대해 깊게 설명할 생각은 없다. 단지 자바 언어에서 <em>어떻게 네트워크 프로그래밍을 할 수 있을까</em> 정도에 대해 간략하게 소개할 생각이다. 이 글을 보고 관심을 조금만 갖고 구글링해보시면 당연한 이야기이지만 훨씬 잘 설명된 좋은 글이 많을테니, 이 글에서 단순히 흥미유도 차원 글을 쓴다.</p>\n<h2>기초</h2>\n<p>네트워크 프로그래밍은 두 원격지(HOST) 간의 데이터 통신을 위한 프로그래밍이다.\n간단히 비유하자면,</p>\n<ol>\n<li>집에서 웹 페이지(서버)를 여는 것이나</li>\n<li>덕질을 위해 FTP에 접속하여 파일을 내려받거나</li>\n<li>과제를 위해 친구와 메신저로 대화를 하는</li>\n</ol>\n<p>것 정도가 되겠다. 위의 상황을 네트워크의 원격지, 데이터로 구분해보면</p>\n<ol>\n<li>내 컴퓨터, 웹 서버, HTML 데이터 등</li>\n<li>내 컴퓨터, FTP서버, 애니메이션 데이터 등</li>\n<li>내 컴퓨터, 친구 컴퓨터, 대화(String) 데이터 등</li>\n</ol>\n<p>이 될 수 있겠다.</p>\n<p>통신을 한다는 건 두 HOST가 네트워크로 <em>(wired or wireless)</em> 연결되어있다는 것이다.<br>\n네트워크에 속한 HOST는 그 특정 주소를 갖는데, 흔히 생각하는 <code>IP Address</code>라고 보면 되겠다. 흔히 우리는 네트워크를 사용하기 위해 TCP/IP Protocol을 사용하기 때문이다.<br>\n<a href=\"https://en.wikipedia.org/wiki/Transmission_Control_Protocol\">https://en.wikipedia.org/wiki/Transmission<em>Control</em>Protocol</a><br>\n<em>(다른 곳에 더욱 설명이 잘 있으니 자세한 설명은 생략한다)</em><br>\n<em>(기계적 주소인 MAC Address와 함께 같이 찾아보면서 공부해보는 것도 좋다. 하지만 이 글은 자바 네트워크 프로그래밍이 주라서 이 부분은 제외)</em></p>\n<p>두 HOST가 서로의 주소를 안다고 해서 TCP/IP 통신할 수 있는 것은 아니다. TCP/IP 통신에는 <code>IP Address</code> 말고 <code>Port</code>라는 Unsigned Short Integer(16bit) 값이 하나 더 필요하기 때문이다.<br>\n<a href=\"https://en.wikipedia.org/wiki/TCP_and_UDP_port\">https://en.wikipedia.org/wiki/TCP<em>and</em>UDP_port</a></p>\n<p>간단히 하나의 HOST 내에 실행되고 있는 수많은 네트워크 사용 프로그램들에 대해 데이터를 빠르고 명확하게 구분하기 위한 하나의 키 값이라고 보면 되겠다. <strong>SSH는 22번, HTTP는 80번</strong>과 같이 사실상 고유의 값으로 지정된 것고 있다.<br>\n<a href=\"https://en.wikipedia.org/wiki/TCP_and_UDP_port_numbers\">https://en.wikipedia.org/wiki/TCP<em>and</em>UDP<em>port</em>numbers</a></p>\n<p>TCP/IP 프로토콜에서는 데이터를 보낼 때 <strong>Packet</strong>으로 쪼개어 보내는데 이 쪽을 공부해두면 장차 네트워크 프로그래밍할 때 도움되는게 많다.<br>\n<a href=\"https://en.wikipedia.org/wiki/Packet_(information_technology)\">https://en.wikipedia.org/wiki/Packet_(information_technology)</a></p>\n<h2>서버와 클라이언트</h2>\n<p>전화를 할 때도 거는 사람과 받는 사람이 있다. 전화라는 것은</p>\n<ul>\n<li>전화선으로 연결된 <em>(네트워크에 속한)</em></li>\n<li>두 사람 <em>(HOST)</em> 간에서</li>\n<li>대화 <em>(데이터 통신)</em> 을 하는 것</li>\n</ul>\n<p>을 이야기한다.</p>\n<p>이 때 거는 사람<code>(클라이언트)</code>은 받을 사람<code>(서버)</code>의 전화번호 <em>(IP Address와 Port)</em> 를 눌러 전화를 걸고, 받을 사람<code>(서버)</code>은 전화가 걸려오기를 기다리고 있다가 전화가 오면 받는 것이다.</p>\n<p>이것이 간략한 서버와 클라이언트의 개념이고, 자세한 내용은 다음 글에서 코드로 보면 되겠다.</p>\n<h2>결론</h2>\n<p>TCP와 UDP의 특성, <code>IP Protocol</code>, <code>Packet</code> 등 네트워크 프로그래밍 기초라고 해도 들먹일 개념이 굉장히 많지만 그것들은 wiki 등 더욱 잘 나와있는 곳이나 동아리 사람들에게 질문해보시면 더욱 확실하게 배울 수 있고,<br>\n<strong>서버와 클라이언트의 개념, <code>IP Address</code>와 <code>Port</code> 번호가 무엇인지 정도만 알겠다 싶으면 된 것이다.</strong></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","excerpt":"…","fields":{"date":"May 01, 2010","shortdesc":"","slug":"/2010/05/01/java-network-programming-1-basic/"},"frontmatter":{"title":"자바 네트워크 프로그래밍 1 - 기초","tags":["java"]}}},"pageContext":{"slug":"/2010/05/01/java-network-programming-1-basic/","older":{"slug":"/2010/05/01/java-network-programming-2-socket/","title":"자바 네트워크 프로그래밍 2 - Socket"},"newer":{"slug":"/2010/10/31/http-serialize-object/","title":"Synchronize object via HTTP"}}},"staticQueryHashes":["848695393"]}