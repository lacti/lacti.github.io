{"componentChunkName":"component---src-templates-blog-js","path":"/2010/05/01/java-network-programming-2-socket","webpackCompilationHash":"69d4b35bc62b6069aa17","result":{"data":{"markdownRemark":{"html":"<p>자바 네트워크 프로그래밍을 설명하려면 당연히 IO부터 이야기해야하는 것이 맞겠지만 이왕 저지른거 막장으로 달려보자.</p>\n<h2>Socket</h2>\n<p>전 글에서 네트워크 통신을 사람 간의 전화로 비유했었다.<br>\n네트워크 통신을 한다는 것은 <a href=\"https://en.wikipedia.org/wiki/Network_Interface_Controller\">NIC(Network Interface Controller)</a>를 사용하여 데이터를 주고 받겠다는 것이고 이는 <strong>하드웨어를 제어해야 한다는 뜻이다.</strong> 하드웨어는 <strong>운영체제가 관리하고 있는 자원</strong>이기 때문에 일반 프로그램들이 접근할 수 없다.</p>\n<p>처음 c/c++ 배울 때 사용했떤 파일 읽기/쓰기도 <strong>하드디스크</strong>라는 하드웨어 자원을 쓰는데 잘은 몰랐지만 프로그램이 제어를 했었다. 그 이유는 <del>모르는 사이에</del> open, read, write와 같은 <strong>운영체제가 제공하는 API</strong>를 사용했기 때문이다. 요약하자면, <strong>하드웨어 자원은 운영체제가 관리하니 운영체제가 제공하는 API를 사용하여 프로그래밍을 해야 한다</strong>는 것이다.</p>\n<p>고로 네트워크 프로그래밍을 하기 위해 운영체제가 주는 API가 있는데 그것이 바로 <strong>소켓:Socket</strong>이라고 보면 되겠다.<br>\n<em>짧은 지식으로는 더 잘 설명할 재간이 없으니 [...] 그냥 그렇다고 넘어가자.</em></p>\n<p>코드 한 줄 없이 이렇게 장문을 쓰는 것도 괴로운 일이므로 바로 코드로 넘어가보자.</p>\n<h2>Client</h2>\n<p>클라이언트는 요청하는 쪽이다. 서버를 끊임없이 괴롭혀서 자신이 원하는 정보를 받아가는 녀석이다.<br>\n대표적인 예로 웹이 있다. 지금도 웹 서버에게 웹 페이지 데이터를 받아서 읽고 있는 것이다.</p>\n<p>클라이언트가 <strong>TCP/IP</strong> 데이터 통신을 하기 위한 순서는 다음과 같다.</p>\n<ol>\n<li>Socket을 만든다.</li>\n<li>생성된 Socket으로 서버와 연결한다</li>\n<li>신나게 데이터 통신을 한다.</li>\n<li>연결을 종료한다.</li>\n</ol>\n<p>말은 길고 코드는 짧으니 바로 코드로 넘어가보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.io.IOException;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.io.InputStream;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.net.Socket;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.net.UnknownHostException;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Client</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">args</span><span class=\"mtk1\">) </span><span class=\"mtk4\">throws</span><span class=\"mtk1\"> </span><span class=\"mtk10\">UnknownHostException</span><span class=\"mtk1\">, </span><span class=\"mtk10\">IOException</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Socket</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;127.0.0.1&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3112</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// 소켓 생성과 동시에 연결</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">InputStream</span><span class=\"mtk1\"> </span><span class=\"mtk12\">inStream</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getInputStream</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// 데이터 수신을 위한 InputStream 가져오기</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">byte</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">chunk</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">byte</span><span class=\"mtk1\">[</span><span class=\"mtk7\">4096</span><span class=\"mtk1\">]; </span><span class=\"mtk3\">// 데이터를 받을 byte 배열 생성</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiveLength</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">inStream</span><span class=\"mtk1\">.</span><span class=\"mtk11\">read</span><span class=\"mtk1\">(chunk); </span><span class=\"mtk3\">// 데이터를 읽고, 얼마나 가져왔는지를 반환받음</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">System</span><span class=\"mtk1\">.</span><span class=\"mtk12\">out</span><span class=\"mtk1\">.</span><span class=\"mtk11\">println</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">String</span><span class=\"mtk1\">(chunk, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, receiveLength)); </span><span class=\"mtk3\">// 수신받은 데이터를 콘솔에 출력</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">inStream</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// InputStream을 닫음</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// 소켓을 닫음</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<ul>\n<li>소켓 생성과 동시에 연결(connect)를 할 수 있다.\n_ 물론 소켓 생성 후에 connect 함수를 통해서도 접속 가능하다.\n_ 이 때 첫 번째 인자가 연결할 서버의 <strong>hostname 혹은 ip address</strong>이고 두 번째 인자가 <strong>port 번호</strong>이다.</li>\n<li>연결 후 데이터 통신을 위한 <strong>InputStream</strong>과 <strong>OutputStream</strong>을 가져와 통신할 수 있다.</li>\n<li>통신이 끝난 후 스트림과 소켓을 <strong>닫아주면</strong> 된다. * 효율적인 자원관리를 위해 <strong>다 쓴 자원은 꼭 주자.</strong></li>\n</ul>\n<p>위 예제에서는 예외처리를 제대로 하지 않고 밖으로 다 던져<strong>throws</strong>버렸는데 실제 코드를 작성할 때에는 반드시 수행하는 하나하나에 대해 적절한 예외처리를 해주어야 한다.</p>\n<h3>Server</h3>\n<p>서버는 응답자라고 보시면 되겠다. 클라이언트의 요청에 대한 결과물을 회신하는 쪽이다.<br>\n이는 웹 서버가 열심히 웹 페이지를 보내주고 있는 것으로 생각하시면 되겠다.</p>\n<p>서버가 <strong>TCP/IP</strong> 데이터 통신을 하기 위한 순서는 다음과 같다.</p>\n<ol>\n<li>ServerSocket을 만든다.</li>\n<li>클라이언트의 연결 요청에 대해 accept를 하여 클라이언트와 데이터 통신을 수행할 Socket 객체를 만든다.</li>\n<li>신나게 데이터 통신을 한다.</li>\n<li>연결을 종료한다.</li>\n</ol>\n<p>바로 코드로 넘어가보자.</p>\n<p>서버는 클라이언트로부터의 연결을 계속 기다리고 있다. 단, 클라이언트가 어떤 <strong>PORT 번호</strong>로 접속해야 할지를 알고 그 PORT에 달라붙어서(<strong>bind</strong>) 기다리고(<strong>listen</strong>) 있으면 된다. 그리고 클라이언트가 접속하면, 해당 클라이언트에 대한 소켓을 낚으면(<strong>accpet</strong>) 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.io.IOException;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.io.OutputStream;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.net.ServerSocket;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.net.Socket;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Server</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">args</span><span class=\"mtk1\">) </span><span class=\"mtk4\">throws</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IOException</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">ServerSocket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">server</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ServerSocket</span><span class=\"mtk1\">(</span><span class=\"mtk7\">3112</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// PORT를 열고 접속을 대기</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">server</span><span class=\"mtk1\">.</span><span class=\"mtk11\">accept</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// 클라이언트의 연결로부터 소켓을 만듬</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">OutputStream</span><span class=\"mtk1\"> </span><span class=\"mtk12\">outStream</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getOutputStream</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// OuputStream을 얻음</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">outStream</span><span class=\"mtk1\">.</span><span class=\"mtk11\">write</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Hello Java Network Programming World!&quot;</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getBytes</span><span class=\"mtk1\">()); </span><span class=\"mtk3\">// 클라이언트에게 환영 인사를 보냄</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">outStream</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// OutputStream을 닫음</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// 클라이언트와의 연결 소켓을 닫음</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">server</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// 클라이언트 접속 대기 소켓을 닫음</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>서버는 클라이언트와 다르게 두 개의 소켓 개념이 존재한다. 하나는 <strong>서버소켓</strong>이고, 하나는 <strong>클라이언트와 데이터 통신을 수행하기 위한 소켓</strong>이다.</p>\n<ul>\n<li><strong>서버소켓</strong>은 <strong>클라이언트가 접속하는 것을 대기하는 소켓</strong>이다. 따라서 클라이언트가 접속할 PORT 번호에서 <strong>대기(bind, listen)</strong>하고, 클라이언트가 연결을 요청할 때 <strong>수락(accept)</strong>하여 해당 클라이언트와 데이터 통신을 하기 위한 소켓을 만들어준다.</li>\n<li>그렇게 만든 소켓을 사용하여 방금 연결된 클라이언트와 데이터 통신을 할 수 있는데, 이 때 소켓의 사용 방법은 클라이언트 때와 동일합니다.</li>\n</ul>\n<p>위의 두 예제를 실행하면, 서버가 클라이언트의 접속을 기다리고 있다가 클라이언트가 접속하면 \"Hello Java Network Programming World!\"라는 문자열을 보내고, 클라이언트가 이를 받아 console에 출력한 뒤 끝나는 결과를 볼 수 있다.</p>\n<h3>결론</h3>\n<p>쓰다보니 필요한 많은 개념들을 대충대충 넘어갔다.<br>\n특히 중요한 blocking 개념을 설명하지 않고 넘어가다 보니 피상적으로 코드를 읽어주는 글이 되어버려서 아쉽다.</p>\n<p>따라서 다음 글에서는 io의 blocking과 이를 해결하기 위한 multi-thread programming에 대해 간략히 알아보도록 하자.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","fields":{"date":"May 01, 2010","path":"/2010/05/01/java-network-programming-2-socket"},"frontmatter":{"title":"자바 네트워크 프로그래밍 2 - Socket","tags":["java"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}