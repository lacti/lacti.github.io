{"componentChunkName":"component---src-templates-tag-tsx","path":"/tag/memory/","result":{"data":{"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"excerpt":"오늘 스터디에서 공부한 내용을 간략히 정리해보자. 원래 의도는, peterson’s algorithm을 보고 여기서 비순차 실행이 일어날 때 발생하는 문제를 보고, memory consistency model의 memory order를 통해 문제를 어떻게 해결할 수 있는지 본 후에, lock free stack, lock free queue algorithm을 보고 문제를 파악한 후에 이를 해결하기 위해 hazard…","fields":{"date":"August 10, 2013","slug":"/2013/08/10/concurrency-algorithm-and-memory-model/"},"frontmatter":{"title":"concurrency 알고리즘과 memory model","tags":["concurrency","memory","study"]}}},{"node":{"excerpt":"동기와 비동기 IO 에 대해 지난번에 이야기했었다. 비동기 IO 함수 간단히 요약하면, 함수는 완료 알림 시점 때문에 동기와 비동기로 구분된다는 것이다. 동기는 함수의 완료를 반환을 통해 알린다. 따라서 요청한 작업이 끝나기 전까지는 함수가 반환되지 않는다는 것. 덕분에 작업이 다른 작업에 의존적일 경우 흐름이 멈추는(Blocking) 경우가 많다. 비동기는 함수의 완료를 반환을 통해 알리지 않는다. Callback…","fields":{"date":"August 14, 2011","slug":"/2011/08/14/io-and-memory-copy/"},"frontmatter":{"title":"IO와 메모리 복사","tags":["io","memory"]}}},{"node":{"excerpt":"(리눅스 커널의 이해 개정 3판 810쪽) 유닉스 프로그램의 선형 주소 공간은 논리적인 관점으로 볼 때 몇 개의 선형 주소 구간으로 나뉘어있다 텍스트 세그먼트는 실행 코드를 포함하고, 초기화된 데이터 세그먼트는 초기화된 데이터, 즉 정적 변수(static variable)와 전역 변수(global variable…","fields":{"date":"May 21, 2011","slug":"/2011/05/21/program-segment/"},"frontmatter":{"title":"프로그램 세그먼트","tags":["c","memory"]}}}]}},"pageContext":{"tag":"memory"}},"staticQueryHashes":["848695393"]}