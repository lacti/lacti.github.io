{"componentChunkName":"component---src-templates-page-tsx","path":"/2009/01/04/Java-Graphics-AffineTransform-and-JScrollPane/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>예전에 디비랩 알바를 할 때, 어떤 이미지에 대해 확대, 축소, 이동을 해야할 일이 생겼다.\n<code>MouseEvent</code> 처리 시 좌표 계산 등, 몇 가지 계산을 해서 Image를 확대, 축소, 이동해서 볼 수 있도록 하였다.</p>\n<p><code>Applepie(YPE2)</code>를 만들 때 역시 이미지에 대해 확대, 축소, 이동을 할 일이 있었는데 이 때는 이미지가 하나가 아니라, 여러 이미지를 그려야하는 상황이었다.<br>\n각각에 대해 동일한 비율로 확대, 축소, 이동을 도무지 못 해서 결국 이미지를 <code>BufferedImage</code>에 다 그려놓고, 그걸 화면에 확대해서 그리는 방식으로 했었다.\n덕분에 메모리가 더 많이 사용되었고, 더 느렸다.</p>\n<p>EventHandling은 역시 별도로 계산해주어야 했다.</p>\n<h2>AffineTransform</h2>\n<p>Game Programming 시간에 <code>AffineTransform</code>을 배웠다.\n전에 Gepard를 만들 때 동아리 선배 한 분이 이를 써서 지형을 그려주셨는데, 그 때만 해도 이게 무슨 역할을 하는지 몰랐었다.\n이번에, 또, 확대, 축소, 이동을 하는 부분을 짜야하는데 이번에는 여러 이미지 뿐만 아니라 그 위에 여러 shape도 그려야 했고, 현재 편집모드에 따라 다른 것들이 그려야 했다.</p>\n<p>이걸 어찌해야하나 고민을 했는데 <code>AffineTransform</code>을 쓰니까 한번에 끝난다 […]</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">AffineTransform</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oldTransform</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">g2d</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getTransform</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">AffineTransform</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newTransform</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AffineTransform</span><span class=\"mtk1\">(oldTransform);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">newTransform</span><span class=\"mtk1\">.</span><span class=\"mtk11\">scale</span><span class=\"mtk1\">(factor, factor);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">newTransform</span><span class=\"mtk1\">.</span><span class=\"mtk11\">translate</span><span class=\"mtk1\">(-</span><span class=\"mtk12\">viewport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\">, -</span><span class=\"mtk12\">viewport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>scale와 translate를 해서 Graphics에 지정해주고 그냥 전체를 화면에 다 그리게 하면, 지정된 viewport 영역에 대해 scale되어 나오게 된다.<br>\n물론 EventHandling은 자체 계산해야 한다 […]</p>\n<h2>clipping</h2>\n<p>clipping을 하기 위해 viewport 영역으로 clipping을 해주면 되겠구나라는 생각을 했다.\n그래서 <code>JScrollPane</code>으로 감싸고, 그 안에 <code>Graphics</code>를 수행하는 <code>Panel</code> 객체를 넣어서 Clipping을 했는데, <code>JScrollPane</code>의 ScrollBar가 안 그려지는 것이었다.</p>\n<p>찾아보니까,<br>\n<code>JScrollPane</code>는 자신이 현재 보여주고 있는 viewport만을 그리기 위해 이미 자기가 알아서 clipping을 수행한다는 것.<br>\n그래서 <code>JScrollPane</code>의 viewport보다 작은 영역을 clipping하는 것은 상관 없지만, 더 큰 영역을 clipping하면 오히려 <code>JScrollPane</code>이 망가지게 된다는 것이다. JScrollPane 쓴 덕분에 Clipping까지 그냥 끝</p>\n<h2>JScrollPane</h2>\n<p><code>JScrollPane</code> 안에 들어있는 JPanel 등의 객체들은 아무리 내가 원하는 크기를 <code>PreferredSize</code>로 지정을 해도 viewport의 크기게 맞게 맞춰져버리는 성질이 있다. (이게 바로 clipping 효과 때문이 아닐까 하는데, 그리는건 둘째치고 Event 영역 한정지어줘야 하는게 귀찮다.)</p>\n<p>그래서 쓰는 방법이,</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">final</span><span class=\"mtk1\"> </span><span class=\"mtk10\">JPanel</span><span class=\"mtk1\"> </span><span class=\"mtk12\">container</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">JPanel</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">GridBagLayout</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">final</span><span class=\"mtk1\"> </span><span class=\"mtk10\">JScrollPane</span><span class=\"mtk1\"> </span><span class=\"mtk12\">scrollPane</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">JScrollPane</span><span class=\"mtk1\">(container);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setPreferredSize</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Dimension</span><span class=\"mtk1\">(</span><span class=\"mtk7\">600</span><span class=\"mtk1\">, </span><span class=\"mtk7\">480</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">container</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>바로 이것이다. (물론 다른 Container에 이 덩어리를 추가할 때는 scrollPane 객체로 추가해줘야 한다. 그래야 scroll 생긴다.)\n<code>Graphics</code>를 수행하는 Component가 this일 때, 자신의 크기를 <code>setPrefferedSize</code>로 정하고, 자기를 바로 <code>JScrollPane</code>에 추가하는 것이 아니라 중간에 container 객체를 하나 두는데, 이 container의 <code>LayoutManager</code>로 <code>GridBagLayout</code>을 사용하는 것이다.\n그러면 this는 container 객체의 가운데에 위치하게 되고, container가 this의 크기보다 작아지면 <code>JScrollPane</code>에 의해 ScrollBar가 생기게 된다.</p>\n<p>물론 this의 <code>PreferredSize</code>를 변경해준 뒤에는 revalidate를 호출해서 <code>JScrollPane</code>이 크기가 변경되었음을 감지할 수 있도록 해주어야 한다.</p>\n<h2>정리</h2>\n<p>Viewport와 Magnification을 이용한 Graphics, 그리고 JScrollPane을 통한 Scrolling을 수행하려면 <code>AffineTransform</code>과 <code>GridBagLayout</code> container를 이용하는 것이 좋다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"예전에 디비랩 알바를 할 때, 어떤 이미지에 대해 확대, 축소, 이동을 해야할 일이 생겼다.\nMouseEvent 처리 시 좌표 계산 등, 몇 가지 계산을 해서 Image를 확대, 축소, 이동해서 볼 수 있도록 하였다. Applepie(YPE…","fields":{"date":"January 04, 2009","shortdesc":"","slug":"/2009/01/04/Java-Graphics-AffineTransform-and-JScrollPane/"},"frontmatter":{"title":"Java Graphics와 AffineTransform, 그리고 JScrollPane","tags":["java"]}}},"pageContext":{"slug":"/2009/01/04/Java-Graphics-AffineTransform-and-JScrollPane/","older":{"slug":"/2009/01/03/java-swing-1/","title":"Java Swing을 한다면 1"},"newer":{"slug":"/2009/10/18/how-to-function-returning-value-with-assembly/","title":"함수 값 반환 방법[어셈블리]"}}},"staticQueryHashes":["848695393"]}