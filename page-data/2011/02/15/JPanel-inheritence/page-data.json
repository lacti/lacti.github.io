{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/02/15/JPanel-inheritence/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>Java에서 UI 코드를 작성할 때, 가장 많이 하는 코딩 방식이 UI Pane class를 만들고 이 class가 JPanel을 상속받는 것이다.<br>\n하지만 생각해보면 그 class는 전혀 <code>JPanel</code>을 상속받을 필요가 없고 그냥 <code>JPanel</code> 객체를 멤버 변수로 하나 만들어서 contain pane으로 사용해도 된다.<br>\n그러면 그 class는 정확히 <code>controller</code> 역할을 수행할 것이고(event handling을 포함하여) <code>controller</code>가 view(<code>JPanel</code>, <code>JLabel</code>… 등) 객체들의 reference 변수를 알고 변경시키는 깔끔한 MVC 구조가 성립된다.</p>\n<p>하지만 <code>JPanel</code>을 상속받은 객체 내에서 controller일을 수행하면,<br>\n<code>JPanel</code>을 상속받은 시점에서 그 class가 view class화 되기 때문에 <code>V</code>랑 <code>C</code>가 합쳐지는 듯한 해석이 가능해지는데 어차피 코드 입장에서는 크게 달라지는게 없으므로 이런 해석은 사실상 의미가 없기는 하지만 생각해보면 굳이 상속을 받아야할 필요는 없으므로 상당히 애매한 위치에 놓인다.</p>\n<p>요약하면</p>\n<ol>\n<li>상속을 받아서 UI를 구성해도 되고</li>\n<li>상속을 받지 않고 변수로 UI를 구성해도 된다.</li>\n</ol>\n<p>다만, 자주 사용되는 UI class의 경우에는 1)의 방법은 상속을 통한 객체 기능 확장, 2)의 방법은 합성을 통한 객체 구성이니까 내부 method를 직접 공개(public)할 것이냐 아니면 위임(delegation)할 것이냐의 약간의 차이가 발생하겠다.<br>\n아무튼 생각해보면 별 것도 아닌데 원래 별 것 아닌 것에 대해서 의미를 읽어서 명확히 하는 설계 짓을 하는 것이기 때문에-_- 한 번쯤은 고민해볼 가치가 있다고 생각한다.</p>\n<p>하지만 대부분의 UI 설계는 <code>JPanel</code>을 상속받으면서부터 시작한다. 이러한 습관이 들어버린건 다 NetBeans 때문이다-_-</p>\n<p>View와 Controller가 섞이면 coupling이 심해져 코드가 좀 더러워진다. 때문에 중간에 interface를 두고 나누는 방법도 생각해볼 수 있겠다.<br>\n(이걸 심하게 해주시는 분이 로버드 C. 마틴 이란 분인데 <a href=\"https://www.yes24.com/24/goods/4492519\">UML 실전에서는 이것만 쓴다</a> 책이 재밌다)</p>\n<p>최근에 운 좋게도 그래디 부치 책을 구했으니 좀 더 공부를 해봐야겠다.</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\">https://en.wikipedia.org/wiki/Robert_Cecil_Martin</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Grady_Booch\">https://en.wikipedia.org/wiki/Grady_Booch</a></li>\n</ul>\n<p>유명하신 분들이다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","excerpt":"Java에서 UI 코드를 작성할 때, 가장 많이 하는 코딩 방식이 UI Pane class를 만들고 이 class가 JPanel을 상속받는 것이다. 하지만 생각해보면 그 class는 전혀 JPanel을 상속받을 필요가 없고 그냥 JPanel…","fields":{"date":"February 15, 2011","shortdesc":"","slug":"/2011/02/15/JPanel-inheritence/"},"frontmatter":{"title":"JPanel 상속","tags":["java"]}}},"pageContext":{"slug":"/2011/02/15/JPanel-inheritence/","older":{"slug":"/2011/01/16/reference-sites-of-bash/","title":"bash 참조 사이트"},"newer":{"slug":"/2011/02/22/object-database-and-value-object/","title":"Object Database와 Value Object"}}},"staticQueryHashes":["848695393"]}