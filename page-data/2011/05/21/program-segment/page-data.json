{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/05/21/program-segment/","webpackCompilationHash":"dff243b0bb0545126dc2","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>(리눅스 커널의 이해 개정 3판 810쪽)<br>\n유닉스 프로그램의 선형 주소 공간은 논리적인 관점으로 볼 때 몇 개의 선형 주소 구간으로 나뉘어있다</p>\n<ul>\n<li><strong>텍스트 세그먼트</strong>는 실행 코드를 포함하고,</li>\n<li><strong>초기화된 데이터 세그먼트</strong>는 초기화된 데이터, 즉 <a href=\"https://en.wikipedia.org/wiki/Static_variable\">정적 변수(static variable)</a>와 <a href=\"https://en.wikipedia.org/wiki/Global_variable\">전역 변수(global variable)</a>의 초기 값이 지정된 경우 그 값 자체가 실행 파일에 저장되어 포함되고,</li>\n<li><strong>초기화되지 않은 데이터 세그먼트</strong>는 초기화되지 않은 데이터, 즉 초기값을 지정하지 않은 모든 전역 변수를 포함하고,</li>\n<li><strong>스택 세그먼트</strong>는 반환주소, 매개변수, 실행하는 함수의 지역 변수 등을 담은 프로그램 스택을 포함한다.</li>\n</ul>\n<p>이에 대해 linux에서는 memory descriptor (mm_struct 구조체)에서 관리를 하는데,<br>\n이번에 면접을 볼 때, 지나가는 형식으로 해당 문제가 나왔다.</p>\n<ul>\n<li>\n<p>함수 내 static 변수와, 전역(global) 변수가 같은 메모리 공간에 할당되는가?</p>\n<ul>\n<li>내 대답은 <em>그럴 것 같군요</em> 이었고,</li>\n<li>문제를 내신 분께서는 <em>사실은 그렇지 않다</em> 라고 답변을 주셨다. * <em>(물론 나중에 확인해보니 내가 문제를 잘못 이해한 것이었다)</em></li>\n</ul>\n</li>\n</ul>\n<p>그래서 그냥 그러려니 하다가, 마침 잠도 깼고 할 일도 없어서 ULK를 보다가 이상함을 느끼고 직접 실험을 해봤다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;stdio.h&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk4\">(</span><span class=\"mtk12\">var_name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">  </span><span class=\"mtk11\">printf</span><span class=\"mtk4\"> (</span><span class=\"mtk8\">&quot;%40s (%16p -&gt; %d)</span><span class=\"mtk6\">\\n</span><span class=\"mtk8\">&quot;</span><span class=\"mtk4\">, #var_name, </span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\">var_name, var_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> _global_not_initialized;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> _global = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _global_static_not_initialized;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _global_static = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _static_in_function_not_initialized;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _static_in_function = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _local_in_function_not_initialized;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _local_in_function = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_static_in_function_not_initialized);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_static_in_function);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_local_in_function_not_initialized);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_local_in_function);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argc</span><span class=\"mtk1\">, </span><span class=\"mtk4\">char</span><span class=\"mtk1\"> *</span><span class=\"mtk12\">argv</span><span class=\"mtk4\">[]</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _static_in_main_not_initialized;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _static_in_main = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _local_in_main_not_initialized;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _local_in_main = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_global_static_not_initialized);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_global_static);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_global_not_initialized);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_global);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_static_in_main_not_initialized);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_static_in_main);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_local_in_main_not_initialized);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">PRINT_ADDR_AND_VALUE</span><span class=\"mtk1\"> (_local_in_main);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> ();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>실험 방법은 위의 코드를 사용하여 전역적(global), 정적(static), 그리고 초기화된(initialized), 초기화되지 않은(not initialized) 마지막으로 함수 stack 변수까지 메모리 주소와 그 값을 비교해보도록 하였다.</p>\n<p>실행 결과는 다음과 같고,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk11\">_global_static_not_initialized</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601040</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                          </span><span class=\"mtk11\">_global_static</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601024</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                 </span><span class=\"mtk11\">_global_not_initialized</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x60104c</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                                 </span><span class=\"mtk11\">_global</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601020</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">         </span><span class=\"mtk11\">_static_in_main_not_initialized</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601044</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                         </span><span class=\"mtk11\">_static_in_main</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601028</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk11\">_local_in_main_not_initialized</span><span class=\"mtk1\"> (  </span><span class=\"mtk7\">0x7fffde739c6c</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                          </span><span class=\"mtk11\">_local_in_main</span><span class=\"mtk1\"> (  </span><span class=\"mtk7\">0x7fffde739c68</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     </span><span class=\"mtk11\">_static_in_function_not_initialized</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601048</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                     </span><span class=\"mtk11\">_static_in_function</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x60102c</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_local_in_function_not_initialized</span><span class=\"mtk1\"> (  </span><span class=\"mtk7\">0x7fffde739c3c</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">32705</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                      </span><span class=\"mtk11\">_local_in_function</span><span class=\"mtk1\"> (  </span><span class=\"mtk7\">0x7fffde739c38</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>위 문제와 연결지어 정리하면 이와 같다. 위 쪽이 memory의 high address이고 아래 쪽이 low address이다. 세 개의 영역으로 구분지었는데, 위에서부터 <a href=\"https://en.wikipedia.org/wiki/Data_segment#Stack\">스택(Stack)</a>, <a href=\"https://en.wikipedia.org/wiki/Data_segment#BSS\">초기화되지 않은 영역(BSS)</a>, <a href=\"https://en.wikipedia.org/wiki/Data_segment#Data\">초기화된 영역(Data)</a>이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk11\">_local_in_main_not_initialized</span><span class=\"mtk1\"> (  </span><span class=\"mtk7\">0x7fffde739c6c</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                          </span><span class=\"mtk11\">_local_in_main</span><span class=\"mtk1\"> (  </span><span class=\"mtk7\">0x7fffde739c68</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_local_in_function_not_initialized</span><span class=\"mtk1\"> (  </span><span class=\"mtk7\">0x7fffde739c3c</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">32705</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                      </span><span class=\"mtk11\">_local_in_function</span><span class=\"mtk1\"> (  </span><span class=\"mtk7\">0x7fffde739c38</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                 </span><span class=\"mtk11\">_global_not_initialized</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x60104c</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     </span><span class=\"mtk11\">_static_in_function_not_initialized</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601048</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">         </span><span class=\"mtk11\">_static_in_main_not_initialized</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601044</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk11\">_global_static_not_initialized</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601040</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                     </span><span class=\"mtk11\">_static_in_function</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x60102c</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                         </span><span class=\"mtk11\">_static_in_main</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601028</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                          </span><span class=\"mtk11\">_global_static</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601024</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                                 </span><span class=\"mtk11\">_global</span><span class=\"mtk1\"> (        </span><span class=\"mtk7\">0x601020</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk7\">100</span><span class=\"mtk1\">)</span></span></code></pre>\n<p>이 결과로 볼 때 세 가지 영역으로 구분할 수 있다.</p>\n<ul>\n<li>첫 번째는 <strong>스택 공간</strong>으로 지역 변수, 함수 인자, 반환 주소 등이 들어가는 공간이다. 본 실험과 크게 상관없는 부분으로 <a href=\"https://en.wikipedia.org/wiki/Call_Stack\">call stack</a>에 따라 아래(low address)로 증가하는 것을 확인할 수 있다.</li>\n<li>\n<p>두 번째는 <strong>초기화되지 않은 데이터 세그먼트</strong>, 즉 저 유명한 <a href=\"https://en.wikipedia.org/wiki/.bss\">BSS(Block Started by Symbol)</a> 영역이다. 메모리 주소의 순서를 보면 global 영역에서 선언된 변수와 static하게 함수 내에서 선언된 변수가 사이좋게 같은 영역 내에 할당된 것을 확인할 수 있다.</p>\n<ul>\n<li>단, 재밌는 것은 static하게 선언된 global 변수보다 그냥 global 변수가 더 메모리 상위 주소 공간에 할당된다는 것이다. 이는 단일 파일 내에서 접근되는 메모리 변수 영역과 <a href=\"https://en.wikipedia.org/wiki/External_variable\">다른 모든 파일 내에서 접근되는 메모리 변수 영역</a>을 분리함으로써 효율성을 도모한 시도로 추측된다. <em>(본 내용에 관해서는 추후 확인할 예정이다)</em></li>\n</ul>\n</li>\n<li>세 번째는 <strong>초기화된 데이터 세그먼트</strong>이다. 함수 내 static 변수나 프로그램 global 변수나 static한 global 변수나 사이좋게 선형적 주소 공간을 가짐을 확인할 수 있다. 재미있는 것은 초기화된 데이터가 메모리에 쌓이는 순서는 순전히 코드 내의 순서에 의존한다는 것이다. <em>(본 내용에 관해서도 추후 확인할 예정이다)</em></li>\n</ul>\n<p>파생되는 이야기가 많아졌는데, 결론을 내리자면<br>\nstatic 변수나 global 변수가 <strong>같은 공간</strong>에 할당된다는 것이다. 물론 <strong>초기화된 변수와 초기화되지 않은 변수</strong>는 다른 공간에 분리되어 선언된다.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Data_segment#Data\">https://en.wikipedia.org/wiki/Data_segment#Data</a></p>\n<blockquote>\n<p>static int i = 10; will be stored in data segment and global int i = 10; will be stored in data segment</p>\n</blockquote>\n<p>물론 메모리 할당 순서가 컴파일러 의존적일 것이라고는 생각되고, 본 실험이 철저히 gcc 기반으로 수행되었기 때문에 다른 컴파일러에서도 그럴 것이다라고 단정 지을 수는 없을 것이다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"(리눅스 커널의 이해 개정 3판 810쪽)유닉스 프로그램의 선형 주소 공간은 논리적인 관점으로 볼 때 몇 개의 선형 주소 구간으로 나뉘어있다텍스트 세그먼트는 실행 코드를 포함하고,초기화된 데이터 세그먼트는 초기화된 데이터, 즉 정적 변수(static…","fields":{"date":"May 21, 2011","shortdesc":""},"frontmatter":{"title":"프로그램 세그먼트","tags":["c","memory"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/05/21/program-segment/"}}}