{"componentChunkName":"component---src-templates-tag-tsx","path":"/tag/rpc/","result":{"data":{"allMarkdownRemark":{"totalCount":4,"edges":[{"node":{"excerpt":"generic한 rpc를 간단히 구현해보자. 원래 의도는 asio를 사용하여 가벼운 덧셈 rpc 정도를 구현해보자는 것이었는데 왠지 모르게 스터디 친구들이 spec을 안드로메다로 보내버려서 DSEL을 통한 rpc stub, skeleton 생성 코드를 구현해보도록 하겠다. 양이 좀 많기 때문에 개요부터 설명하겠다. rpc 메시지을 주고 받기 위한 buffer를 먼저 설계하고, 메시지을 처리할 handler…","fields":{"date":"August 20, 2013","slug":"/2013/08/20/simple-cpp-rpc/"},"frontmatter":{"title":"generic한 c++ rpc 구현","tags":["c++","rpc"]}}},{"node":{"excerpt":"Github: DistWork - simpler 지난 글에서 예고한 RpcWork와 Dll 전달 방법에 대해 알아보자. (원래는 WorkGroup까지 보려고 했는데 자세한 구현은 귀찮으니 나중에 기회가 되면 쓰도록 하겠다) RPC 구현 RpcWork는 다음의 방법으로 쉽게 구현할 수 있다. 원격지에서 수행할 함수를 담는 RpcWork class와 그 수행 결과를 담아 다시 돌려줄 ReturnWork class…","fields":{"date":"June 08, 2013","slug":"/2013/06/08/simple-distributed-system-implementation-3/"},"frontmatter":{"title":"분산 처리 환경 구현 3","tags":["distributed","c#","rpc"]}}},{"node":{"excerpt":"심심한 상황에서 뭘 코딩할까 고민중에 java rmi app를 만들다가 고생한 기억이 있어서 이걸 좀 쉽게 사용할 수 있는 remote lib를 만들어보자는 생각에 시작하였다. 개발 목표 기존의 java rmi와 유사한 code로 remote method interface call을 구현할 수 있어야하고, 쌍방통신이 쉽게 가능했으면 한다. ※ rmi…","fields":{"date":"February 17, 2010","slug":"/2010/02/17/java-remotelib/"},"frontmatter":{"title":"java remotelib 개발","tags":["java","rpc"]}}},{"node":{"excerpt":"PHP의 __call method는 해당 object의 member를 호출했을 때, 그 member가 not implement 상태이면 __call method로 method name과 arguments를 넘겨주는 그런 신비한 method이다. 예외처리도 아니고 없는 method에 대해 해당 method 호출 정보를 넘겨받을 수 있는 함수라니! 이건 진정한 proxy class를 제작하기 위한 필수 method…","fields":{"date":"February 04, 2010","slug":"/2010/02/04/developing-java-remote-library/"},"frontmatter":{"title":"개발중인 Remote Library 중간보고","tags":["java","rpc"]}}}]}},"pageContext":{"tag":"rpc"}}}