{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/09/30/using-rtti-at-cpp/","webpackCompilationHash":"551181b12e79e57a3ef2","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>RTTI는 Run-time Type Information의 약자로, 실행 중에 어떤 type에 대한 정보를 알 수 있다는 것이다. 보통 type 에 대한 정보는 컴파일 타임에 다 사용되고, 실행 중에는 없어지는데, 실행 중에 이 정보를 얻을 수 있으면 재밌는 일을 많이 할 수 있다.</p>\n<p>Java나 C#, 아니면 여타 동적 언어들은 당연히 이 기능을 지원하고 (보통 reflection 이라고 한다)\nC, C++ 은 당연히 지원 안한다. 실행 중에 뭔가 정보를 더 남긴다는 것은 메모리도 많이 먹고 참조하려면 속도도 느려지니까!</p>\n<p>그래서 구조체에 있는 정보만으로 xml read/write 가 자동으로 이루어지려면,</p>\n<ol>\n<li>타입 정보를 runtime 에 접근해서 동적으로 read/write 를 한다.</li>\n<li>xml read/write 코드를 generator 를 통해 찍어낸다.</li>\n</ol>\n<p>보통 성능을 위해 2번을 쓰지만 본 글에서는 1번 방법에 대해 서술하겠다.</p>\n<h2>tstring</h2>\n<p>RTTI는 string을 통해 각 정보를 가져오는 것이므로 먼저 char, wchar로부터 자유로워야 한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">namespace</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> wstring  tstring;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> wostream tostream;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> wistream tistream;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h2>field info</h2>\n<p>간단하게 type의 종류를 정의해보자. 여러 타입이 있겠지만 귀찮으니까 int, float만 정의하자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">enum</span><span class=\"mtk1\"> </span><span class=\"mtk10\">type_t</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">NONE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">INT</span><span class=\"mtk1\">, </span><span class=\"mtk12\">FLOAT</span><span class=\"mtk1\"> };</span></span></code></pre>\n<p>구조체의 각 변수 정보를 남기기 위해 그 정보를 저장할 자료를 선언하자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">var_info</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">var_info</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::tstring&amp; _name, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">type_t</span><span class=\"mtk1\">&amp; _type, </span><span class=\"mtk4\">size_t</span><span class=\"mtk1\"> _offset)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">name</span><span class=\"mtk1\"> (_name), </span><span class=\"mtk11\">type</span><span class=\"mtk1\"> (_type), </span><span class=\"mtk11\">offset</span><span class=\"mtk1\"> (_offset) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">var_info</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> var_info&amp; o)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">name</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">o</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">), </span><span class=\"mtk11\">type</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">o</span><span class=\"mtk1\">.</span><span class=\"mtk12\">type</span><span class=\"mtk1\">), </span><span class=\"mtk11\">offset</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">o</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offset</span><span class=\"mtk1\">) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::tstring name;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">type_t</span><span class=\"mtk1\">       type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">size_t</span><span class=\"mtk1\">       offset;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::map&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::tstring, var_info&gt; </span><span class=\"mtk10\">varmap_t</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>구조체 내의 변수의 이름과 타입 정보를 갖는 것은 당연하다.<br>\n그런데 offset이라는 정보도 필요하다. 왜냐하면 xml read 를 수행할 때 읽은 데이터를 객체의 <strong>어느 공간</strong> 에 넣어야 할 지 그 위치를 계산해서 넣어야 하기 때문이다. 따라서 메모리 상에 그 변수가 객체의 시작 지점으로부터 얼마만큼 떨어져서 위치하는가를 알고 있어야 한다.</p>\n<h2>struct info</h2>\n<p>이제 구조체 정보를 저장해보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">struct_info</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">struct_info</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::tstring&amp; _name) : </span><span class=\"mtk11\">name</span><span class=\"mtk1\"> (_name) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">struct_info</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> struct_info&amp; o) : </span><span class=\"mtk11\">name</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">o</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">struct_info</span><span class=\"mtk1\"> () {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::tstring name;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">varmap_t</span><span class=\"mtk1\"> varmap;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>그냥 단순히 구조체에 대한 이름과 구조체에 대한 변수 목록을 map 객체로 갖고 있다.</p>\n<h2>rtti</h2>\n<p>rtti라는 단순한 객체를 정의해보자. 단순히 이건 각 구조체 이름에 대응되는 <code>struct_info</code> 객체를 갖고 있으면 되니까 map 이면 충분하다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::map&lt;</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::tstring, struct_info&gt; </span><span class=\"mtk10\">rtti_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">rtti_t</span><span class=\"mtk1\"> rtti;</span></span></code></pre>\n<h2>offset_of</h2>\n<p>구조체 내의 어떤 변수가 구조체 객체의 시작 주소로부터 얼마나 떨어져 있나를 계산하는 것은 간단하다.\n시작 주소를 0으로 만든 뒤 그 변수의 주소를 가져오면 되기 때문이다. 따라서 다음과 같은 매크로를 만들 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">OFFSET_OF</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_struct</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_var</span><span class=\"mtk4\">) ((size_t) </span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\">(((_struct </span><span class=\"mtk1\">*</span><span class=\"mtk4\">) NULL)-&gt;</span><span class=\"mtk12\">_var</span><span class=\"mtk4\">))</span></span></code></pre>\n<p><code>NULL</code>을 구조체 주소로 casting해서 그 변수를 접근한다. 하지만 접근해서 값을 쓰는게 아니라 단순히 &#x26; 연산자로 주소 값만 얻으니까 access violation은 없다. 그리고 저 주소 값이 얼마만큼 떨어졌는지의 값(offset)이다.</p>\n<h2>DSEL</h2>\n<p>이제 구조체를 정의하는 매크로를 만들어야 한다.\n이게 약간 문제가 있는데, 본 문제를 출제한 [if1live]님의 요구 사항은 아래와 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk1\">(SampleStruct)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">STRUCT_VAR_FLOAT</span><span class=\"mtk1\">(SampleStruct, a)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">STRUCT_VAR_INT</span><span class=\"mtk1\">(SampleStruct, b)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk1\">()</span></span></code></pre>\n<p>보통 프로그램의 시작과 함께 초기화되는 정보를 구성할 경우에는 전역 변수를 많이 쓴다. 예를 들면,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">__temp</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">__temp</span><span class=\"mtk1\"> () { </span><span class=\"mtk11\">printf</span><span class=\"mtk1\"> (</span><span class=\"mtk8\">&quot;hello world!&quot;</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">} ___temp;</span></span></code></pre>\n<p>와 같이 <code>__temp</code>라는 struct를 정의해서 <code>___temp</code> 라는 전역 변수를 만든다. 전역 변수는 프로그램이 시작될 때 초기화되고, 이 때 생성자가 불리면서 hello world 가 출력될 것이다.</p>\n<p>하지만 구조체 각 변수는 구조체의 { } scope 안에 존재하기 때문에 전역 변수를 사용할 수 없는 공간이다. 따라서 좀 다른 방법을 써야한다.</p>\n<p>구조체 내의 멤버 변수들은 구조체 객체가 처음 생성될 때, 그 생성자가 호출된다. 예를 들면,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Sample</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">__temp</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">__temp</span><span class=\"mtk1\"> () { </span><span class=\"mtk11\">printf</span><span class=\"mtk1\"> (</span><span class=\"mtk8\">&quot;hello world&quot;</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } ___temp;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>위와 같이 <code>Sample</code> 구조체를 정의했다. 저 <code>Sample</code>의 변수를 하나라도 만드는 순간,\n<code>Sample</code> 구조체 내의 변수들이 초기화된다. <code>___temp</code> 변수도 초기화된다. 따라서 <code>__temp</code>의 생성자가 호출된다. 따라서 <code>Sample</code> 구조체의 instance를 만들 때 마다 우리는 hello world를 볼 수 있을 것이다.</p>\n<p>중복 실행을 막으려면 어떻게 해야할까? 간단히 static 변수를 하나 쓰면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Sample</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">__temp</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">__temp</span><span class=\"mtk1\"> () {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">bool</span><span class=\"mtk1\"> once = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (once)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk11\">printf</span><span class=\"mtk1\"> (</span><span class=\"mtk8\">&quot;hello world&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            once = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } ___temp;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>그러면 hello world는 <code>Sample</code> 객체를 처음 만들 때는 나오겠지만 그 다음부터는 안 나올 것이다.\n이 방법을 사용하여 각 변수들까지 RTTI에 등록할 것이다.</p>\n<h2>register DSEL</h2>\n<p>먼저 한 번만 등록하기 위한 매크로를 만들어보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REGISTER_ONLY_ONCE</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_rtti</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_name</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_info</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static bool init </span><span class=\"mtk1\">=</span><span class=\"mtk4\"> false; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    </span><span class=\"mtk15\">if</span><span class=\"mtk4\"> (</span><span class=\"mtk1\">!</span><span class=\"mtk4\">init) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        </span><span class=\"mtk12\">_rtti</span><span class=\"mtk4\">.</span><span class=\"mtk11\">insert</span><span class=\"mtk4\">(</span><span class=\"mtk10\">std</span><span class=\"mtk4\">::</span><span class=\"mtk11\">make_pair</span><span class=\"mtk4\">(</span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk12\">#_name</span><span class=\"mtk4\">), _info)); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    init </span><span class=\"mtk1\">=</span><span class=\"mtk4\"> true;</span></span></code></pre>\n<p>이 코드는 구조체와 구조체의 변수를 각각 RTTI에 등록할 때 사용될 것이다.</p>\n<p>이제 구조체를 등록하는 매크로와 변수를 등록하는 매크로를 보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REGISTER_RTTI_STRUCT</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    </span><span class=\"mtk11\">REGISTER_ONLY_ONCE</span><span class=\"mtk4\">(rtti, _name, (</span><span class=\"mtk11\">struct_info</span><span class=\"mtk4\"> (</span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk12\">#_name</span><span class=\"mtk4\">))))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">REGISTER_RTTI_VAR</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_struct</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_var</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_type</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    </span><span class=\"mtk11\">REGISTER_ONLY_ONCE</span><span class=\"mtk4\">(</span><span class=\"mtk12\">rtti</span><span class=\"mtk4\">[</span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk12\">#_struct</span><span class=\"mtk4\">)].</span><span class=\"mtk12\">varmap</span><span class=\"mtk4\">, _var, (</span><span class=\"mtk11\">var_info</span><span class=\"mtk4\"> (</span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk12\">#_var</span><span class=\"mtk4\">), _type, </span><span class=\"mtk11\">OFFSET_OF</span><span class=\"mtk4\">(_struct, _var))))</span></span></code></pre>\n<p>구조체를 등록하는 매크로는 전역 <code>rtti_map</code> 객체에 <code>struct_info</code>를 넣어준다.\n구조체의 변수를 등록하는 매크로는 자신이 속한 구조체 rtti 내의 <code>varmap</code> 객체에 <code>var_info</code>를 넣어준다.</p>\n<p>구조체의 변수를 등록하려면, 결국 자기가 어느 struct에 속한지를 알아야, 전역 rtti에서 자신이 속한 <code>struct_info</code>를 얻어와서 거기에 변수 정보(<code>var_info</code>)를 등록할 수 있다는 것이다. 이 때문에 [if1live]님의 매크로의 변수 선언부를 보면, <code>STRUCT_VAR_FLOAT(SampleStruct, a)</code>와 같이 구조체의 이름과 변수의 이름이 같이 들어가는 것이다.</p>\n<h2>declaration DSEL</h2>\n<p>이제 기본 RTTI 등록 매크로가 완성되었으니, 구조체 선언 매크로와 구조체 변수 선언 매크로를 작성하면 된다.\n구조체 선언 매크로는 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_name</span><span class=\"mtk4\">)    </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    struct </span><span class=\"mtk10\">_name</span><span class=\"mtk4\"> </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    {    </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    private: </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        struct </span><span class=\"mtk10\">__register_init</span><span class=\"mtk4\"> { </span><span class=\"mtk11\">__register_init</span><span class=\"mtk4\"> () { </span><span class=\"mtk11\">REGISTER_RTTI_STRUCT</span><span class=\"mtk4\">(_name); } } ___register_init; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    public: </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        static const </span><span class=\"mtk10\">std</span><span class=\"mtk4\">::</span><span class=\"mtk10\">tstring</span><span class=\"mtk4\">&amp; </span><span class=\"mtk11\">name</span><span class=\"mtk4\">() { static </span><span class=\"mtk10\">std</span><span class=\"mtk4\">::tstring </span><span class=\"mtk11\">__name</span><span class=\"mtk4\">(</span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk12\">#_name</span><span class=\"mtk4\">)); </span><span class=\"mtk15\">return</span><span class=\"mtk4\"> __name; }</span></span></code></pre>\n<p>지정된 이름으로 구조체를 시작한다.\n멤버로 갖는 구조체의 생성자에서 RTTI 등록 매크로를 사용하여 구조체 정보를 등록하도록 한다.\n이왕이면 private으로 만들어서 그 임시 변수는 접근을 못하게 하자.</p>\n<p>나중에 xml read / write 를 할 때 구조체의 이름으로부터 RTTI 정보를 얻어와야 하므로 static 함수로 그 이름을 반환하도록 한다. 구조체의 이름으로 static string 변수를 하나 선언해놓고 그걸 반환해준다.</p>\n<p>구조체 내 변수 선언 매크로는 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_VAR</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_struct</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_var</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_ctype</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_type</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    public: </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        _ctype _var; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    private: </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        struct </span><span class=\"mtk10\">__register_</span><span class=\"mtk12\">##_var</span><span class=\"mtk4\"> { __register_</span><span class=\"mtk12\">##_var</span><span class=\"mtk4\"> () { </span><span class=\"mtk11\">REGISTER_RTTI_VAR</span><span class=\"mtk4\">(_struct, _var, _type); } } ___register_</span><span class=\"mtk12\">##_var</span><span class=\"mtk4\">; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    public:</span></span></code></pre>\n<p>인자로 받은 c-type으로 public 변수를 선언하고, RTTI에 등록하기 위한 임시 멤버 변수로 RTTI 등록 매크로를 불러준다. 이제 저 기본 매크로를 이용하여 type 별 선언 매크로를 만든다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_VAR_INT</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_struct</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_var</span><span class=\"mtk4\">)        </span><span class=\"mtk11\">STRUCT_VAR</span><span class=\"mtk4\">(_struct, _var, int, INT)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_VAR_FLOAT</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_struct</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_var</span><span class=\"mtk4\">)        </span><span class=\"mtk11\">STRUCT_VAR</span><span class=\"mtk4\">(_struct, _var, float, FLOAT)</span></span></code></pre>\n<p>마지막으로 구조체 선언을 닫아주어야 하므로 마무리 매크로를 만든다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk4\">()    };</span></span></code></pre>\n<p>그러면 제시한 대로 매크로를 통해 RTTI가 등록된 구조체를 선언할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk1\">(SampleStruct)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">STRUCT_VAR_FLOAT</span><span class=\"mtk1\">(SampleStruct, a)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">STRUCT_VAR_INT</span><span class=\"mtk1\">(SampleStruct, b)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk1\">()</span></span></code></pre>\n<p>저 <code>SampleStruct</code> 구조체는 <code>a</code>: float, <code>b</code>: int 변수를 가질 것이고, 그 정보들은 이름 문자열과 함께 rtti 변수에 저장될 것이다.</p>\n<h2>xml reader/writer</h2>\n<p>xml read / write를 구현해보자.\n먼저, 저 Object를 받았을 때 <code>var_info</code>의 offset을 사용하여 어떻게 각 변수를 접근하나 보자.</p>\n<p>offset 정보는 구조체의 시작 주소로부터 그 변수까지의 간격(거리)라고 했다.\n그러면 그 변수에 접근하려면,</p>\n<ol>\n<li>구조체의 시작 주소를 구한다.</li>\n<li>시작 주소에 offset 을 더한다.</li>\n<li>그 주소를 변수의 pointer type 에 맞게 casting 한다.</li>\n<li>그 pointer 를 dereferencing 해서 값을 넣거나 뺀다.</li>\n</ol>\n<p>여기서 주의해야 할 점은 구조체의 시작 주소를 구할 때, 그냥 &#x26; 연산자만 쓰는게 아니라 <code>char*</code> 으로 casting 을 해주어야 한다는 것이다. 왜냐하면 offset 이란건 시작 주소로부터 그 변수까지 떨어진 <strong>바이트 수</strong>인데,</p>\n<p>Object 시작 주소를 <code>&#x26;</code> 연산자로 구해놓고 그 포인터에 <code>+</code> 연산을 수행하면 <strong>그 주소는 Object 의 크기만큼 증가한다</strong>. 따라서 바이트 단위로 증가시켜주기 위해 <code>char*</code> 로 casting 한다. (<code>char*</code> 와 <code>int*</code> 각각의 변수에 대해 <code>+</code> 연산자를 사용하면 증가하는 값이 다르다는 이야기인데, 다 알고 있겠지만 한 번 더 설명 해 봤다.)</p>\n<p>그러면 아래와 같은 매크로를 만들 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">GET_VAR_ADDR</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_ctype</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_obj</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_offset</span><span class=\"mtk4\">) ((_ctype </span><span class=\"mtk1\">*</span><span class=\"mtk4\">) (((char</span><span class=\"mtk1\">*</span><span class=\"mtk4\">) </span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\">_obj) </span><span class=\"mtk1\">+</span><span class=\"mtk4\"> _offset))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">GET_VAR</span><span class=\"mtk4\">(</span><span class=\"mtk12\">_ctype</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_obj</span><span class=\"mtk4\">, </span><span class=\"mtk12\">_offset</span><span class=\"mtk4\">) (</span><span class=\"mtk1\">*</span><span class=\"mtk4\">(</span><span class=\"mtk11\">GET_VAR_ADDR</span><span class=\"mtk4\">(_ctype, _obj, _offset)))</span></span></code></pre>\n<h2>xml writer</h2>\n<p>xml write를 먼저 만들어보자. <code>std::ostream</code>을 쓸 예정이다.\n자주 입력해야하는 문자열은 미리 매크로로 만들어두자. 귀찮다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">XML_START_TAG</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">)      </span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk8\">&quot;&lt;&quot;</span><span class=\"mtk4\">) </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> name </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk8\">&quot;&gt;&quot;</span><span class=\"mtk4\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">XML_END_TAG</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">)        </span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk8\">&quot;&lt;/&quot;</span><span class=\"mtk4\">) </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> name </span><span class=\"mtk1\">&lt;&lt;</span><span class=\"mtk4\"> </span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk8\">&quot;&gt;&quot;</span><span class=\"mtk4\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">XML_TAB</span><span class=\"mtk4\">                  </span><span class=\"mtk11\">_T</span><span class=\"mtk4\">(</span><span class=\"mtk8\">&quot;</span><span class=\"mtk6\">\\t</span><span class=\"mtk8\">&quot;</span><span class=\"mtk4\">)</span></span></code></pre>\n<p>그런데 <code>ostream</code>은 뭐가 들어올지 모른다. 기본적으로 <code>wostream</code>과 그냥 <code>ostream</code>부터가 다르다.\n그러니까 template을 쓴다. 그러면 &#x3C;&#x3C; 연산자만 overloading 되어있는 모든 대상에 대해 이 함수를 쓸 수 있다. (저걸 overloading하는 network 통신 용 객체가 있다면 네트워크로 바로 xml이 써질 것이다.)</p>\n<p>그리고 xml로 작성해야할 대상 객체로부터도 general해야 하므로 그것도 template으로 정한다.</p>\n<p>그래서 함수를 만들면 아래와 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_stream</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_struct</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk11\">xml_write</span><span class=\"mtk1\">(</span><span class=\"mtk10\">_stream</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">out</span><span class=\"mtk1\">, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_struct</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">obj</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">rtti</span><span class=\"mtk1\">.</span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk11\">name</span><span class=\"mtk1\">()) == </span><span class=\"mtk12\">rtti</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">())</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> struct_info&amp; si = </span><span class=\"mtk12\">rtti</span><span class=\"mtk1\">[</span><span class=\"mtk10\">_struct</span><span class=\"mtk1\">::</span><span class=\"mtk11\">name</span><span class=\"mtk1\">()];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    out &lt;&lt; </span><span class=\"mtk11\">XML_START_TAG</span><span class=\"mtk1\">(</span><span class=\"mtk12\">si</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">) &lt;&lt; </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">varmap_t</span><span class=\"mtk1\">::const_iterator i = </span><span class=\"mtk12\">si</span><span class=\"mtk1\">.</span><span class=\"mtk12\">varmap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(); i != </span><span class=\"mtk12\">si</span><span class=\"mtk1\">.</span><span class=\"mtk12\">varmap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(); ++i)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> var_info&amp; vi = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">second</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        out &lt;&lt; XML_TAB &lt;&lt; </span><span class=\"mtk11\">XML_START_TAG</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vi</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">switch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">vi</span><span class=\"mtk1\">.</span><span class=\"mtk12\">type</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">case</span><span class=\"mtk1\"> INT: out &lt;&lt; </span><span class=\"mtk11\">GET_VAR</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, obj, </span><span class=\"mtk12\">vi</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offset</span><span class=\"mtk1\">); </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">case</span><span class=\"mtk1\"> FLOAT: out &lt;&lt; </span><span class=\"mtk11\">GET_VAR</span><span class=\"mtk1\">(</span><span class=\"mtk4\">float</span><span class=\"mtk1\">, obj, </span><span class=\"mtk12\">vi</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offset</span><span class=\"mtk1\">); </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        out &lt;&lt; </span><span class=\"mtk11\">XML_END_TAG</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vi</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">) &lt;&lt; </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    out &lt;&lt; </span><span class=\"mtk11\">XML_END_TAG</span><span class=\"mtk1\">(</span><span class=\"mtk12\">si</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">) &lt;&lt; </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>매우 간단하다. 멤버의 타입도 2개 밖에 없다고 한정지었고, 구조체 내의 구조체(nested struct)와 같은 구조도 전혀 고려하지 않았다.</p>\n<p>단순히 정의된 구조체의 <code>name()</code>을 통해 구조체 이름을 얻어서 rtti에 접근해 구조체 정보를 얻는다.\n거기서 각 멤버에 대한 정보를 순회하면서 그 값을 <code>GET_VAR</code>로 가져와 인자로 받은 stream 객체에 값을 쓴다.</p>\n<h2>xml reader</h2>\n<p>xml read는 write에 비해 훨씬 복잡해야 하지만 제대로 된 xml parser를 작성할 생각은 추호도 없다.</p>\n<p>먼저 배열의 개수를 얻는 매크로를 보자. 크기는 <code>sizeof</code>로 얻을 수 있으니 개수를 얻으려면 아래와 같겠다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">COUNT_OF</span><span class=\"mtk4\">(</span><span class=\"mtk12\">array</span><span class=\"mtk4\">)        (sizeof (array) </span><span class=\"mtk1\">/</span><span class=\"mtk4\"> sizeof (</span><span class=\"mtk12\">array</span><span class=\"mtk4\">[</span><span class=\"mtk7\">0</span><span class=\"mtk4\">]))</span></span></code></pre>\n<p>자, 이제 모든 준비가 끝났으니 xml read를 작성하자.\n이번에도 역시 입력 스트림과 값을 읽을 객체에 대해 template 인자로 받는다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_stream</span><span class=\"mtk1\">, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_struct</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk11\">xml_read</span><span class=\"mtk1\">(</span><span class=\"mtk10\">_stream</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">in</span><span class=\"mtk1\">, </span><span class=\"mtk10\">_struct</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">obj</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">rtti</span><span class=\"mtk1\">.</span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">obj</span><span class=\"mtk1\">.</span><span class=\"mtk11\">name</span><span class=\"mtk1\">()) == </span><span class=\"mtk12\">rtti</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">())</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> struct_info&amp; si = </span><span class=\"mtk12\">rtti</span><span class=\"mtk1\">[</span><span class=\"mtk10\">_struct</span><span class=\"mtk1\">::</span><span class=\"mtk11\">name</span><span class=\"mtk1\">()];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    TCHAR </span><span class=\"mtk12\">name</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1024</span><span class=\"mtk1\">], </span><span class=\"mtk12\">value</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1024</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">in</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ignore</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1024</span><span class=\"mtk1\">, </span><span class=\"mtk11\">_T</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;&gt;&#39;</span><span class=\"mtk1\">));</span><span class=\"mtk3\"> // ignore root node</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">varmap_t</span><span class=\"mtk1\">::const_iterator iter = </span><span class=\"mtk12\">si</span><span class=\"mtk1\">.</span><span class=\"mtk12\">varmap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(); iter != </span><span class=\"mtk12\">si</span><span class=\"mtk1\">.</span><span class=\"mtk12\">varmap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(); ++iter)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">in</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ignore</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1024</span><span class=\"mtk1\">, </span><span class=\"mtk11\">_T</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;&lt;&#39;</span><span class=\"mtk1\">));</span><span class=\"mtk3\"> // ignore before start tag</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">in</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getline</span><span class=\"mtk1\">(name, </span><span class=\"mtk11\">COUNT_OF</span><span class=\"mtk1\">(name), </span><span class=\"mtk11\">_T</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;&gt;&#39;</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">in</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getline</span><span class=\"mtk1\">(value, </span><span class=\"mtk11\">COUNT_OF</span><span class=\"mtk1\"> (value), </span><span class=\"mtk11\">_T</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;&lt;&#39;</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> var_info&amp; vi = </span><span class=\"mtk12\">si</span><span class=\"mtk1\">.</span><span class=\"mtk12\">varmap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::</span><span class=\"mtk11\">tstring</span><span class=\"mtk1\">(name))-&gt;</span><span class=\"mtk12\">second</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">switch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">vi</span><span class=\"mtk1\">.</span><span class=\"mtk12\">type</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">case</span><span class=\"mtk1\"> INT: </span><span class=\"mtk11\">GET_VAR</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, obj, </span><span class=\"mtk12\">vi</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offset</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">_wtoi</span><span class=\"mtk1\"> (value); </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">case</span><span class=\"mtk1\"> FLOAT: </span><span class=\"mtk11\">GET_VAR</span><span class=\"mtk1\">(</span><span class=\"mtk4\">float</span><span class=\"mtk1\">, obj, </span><span class=\"mtk12\">vi</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offset</span><span class=\"mtk1\">) = </span><span class=\"mtk4\">static_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">float</span><span class=\"mtk1\">&gt; (</span><span class=\"mtk11\">_wtof</span><span class=\"mtk1\"> (value)); </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>구조체의 이름으로 rtti 정보를 가져온다.\nxml에 어떤 순서로 기록될지는 모르지만, 어쨌든 구조체 내 멤버만큼은 node가 있겠지, 라고 가정했다.\n따라서 구조체 내 멤버 정보로 iteration을 수행하는데, 사실 그냥 개수만 세기 위한 훼이크다!</p>\n<p>istream의 <code>ignore</code> 기능을 활용하여 쓸데 없는 whitespace 등을 무시하고, <code>getline</code> 함수의 delim을 적절히 활용하여 각 node의 이름과 값을 얻어서, 그 멤버 변수의 type에 따라 <code>GET_VAR</code>를 통해 그 값을 넣어준다.</p>\n<p>그럼 아래와 같이 쓸 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_tmain</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argc</span><span class=\"mtk1\">, </span><span class=\"mtk10\">_TCHAR</span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">argv</span><span class=\"mtk1\">[]) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    SampleStruct s;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">s</span><span class=\"mtk1\">.</span><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1.0f</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">s</span><span class=\"mtk1\">.</span><span class=\"mtk12\">b</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">xml_write</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::wcout, s);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::wifstream </span><span class=\"mtk11\">in</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_T</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;test.xml&quot;</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (in)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">xml_read</span><span class=\"mtk1\">(in, s);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">xml_write</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::wcout, s);</span></span></code></pre>\n<p>문제는 구조체를 한 번도 만들지 않았다면 RTTI 정보도 없다는 것이다 (…)</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"RTTI는 Run-time Type Information의 약자로, 실행 중에 어떤 type에 대한 정보를 알 수 있다는 것이다. 보통 type…","fields":{"date":"September 30, 2011","shortdesc":""},"frontmatter":{"title":"c++ 에서 구조체 RTTI 정보 남기기","tags":["c++"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/09/30/using-rtti-at-cpp/"}}}