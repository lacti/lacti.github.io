{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/01/08/closed-descriptor-and-write-when-SIGPIPE/","webpackCompilationHash":"86a6406c6b4e5482e871","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>예전에도 엄청 고생했던 것인데, <code>socket</code>이나 pipe 등에서\n<code>read</code>와 <code>write</code>로 IO를 수행할 때 상대쪽(opposite endpoint)이 닫혔다면 어떤 현상이 벌어질까?</p>\n<ul>\n<li><code>read</code>는 -1을 반환한다</li>\n<li><code>write</code>는 SIGPIPE를 받는다.</li>\n</ul>\n<p>하지만 프로그램이 <code>signal handler</code>를 만들지 않았다면 그 프로그램은 죽는다.<br>\nSIGTERM이나 SIGQUIT를 받은게 아니기 때문에 <strong>조용히 죽는다.</strong></p>\n<p><code>send</code>/<code>recv</code>를 사용해서 옵션을 주면 깔끔하게 <code>EPIPE</code>를 반환하게 할 수 있는데 <code>write</code>, <code>read</code>는 그런 옵션이 생략된 <em>범용적</em> 함수라서 <code>signal handler</code>를 설치하는 수 밖에 없다.</p>\n<p>stackoverflow에 나와있는 <a href=\"https://stackoverflow.com/questions/108183/how-to-prevent-sigpipes-or-handle-them-properly\">how to prevent sigpipes or handle them properly</a>를 보면</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> set = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">setsockopt</span><span class=\"mtk1\">(sd, SOL_SOCKET, SO_NOSIGPIPE, (</span><span class=\"mtk4\">void</span><span class=\"mtk1\"> *)&amp;</span><span class=\"mtk12\">set</span><span class=\"mtk1\">, </span><span class=\"mtk4\">sizeof</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">));</span></span></code></pre>\n<p>와 같이 해결가능하다고 하는데 범용적이지는 않다.</p>\n<p>그래서 결국 <code>sigaction</code>으로 handler 설치해주고 작업을 해야하는데\n단, signal 함수를 써서 handler를 지정했다가는 <strong>os에 따라서 한번밖에 handler가 설정 안되는 경우가 있으므로 주의</strong>가 필요하다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"예전에도 엄청 고생했던 것인데, socket이나 pipe 등에서\nread와 write로 IO를 수행할 때 상대쪽(opposite endpoint)이 닫혔다면 어떤 현상이 벌어질까? read는 -1을 반환한다 write는 SIGPIPE…","fields":{"date":"January 08, 2011","shortdesc":""},"frontmatter":{"title":"닫힌 descriptor와 write, SIGPIPE","tags":["c","io"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/01/08/closed-descriptor-and-write-when-SIGPIPE/"}}}