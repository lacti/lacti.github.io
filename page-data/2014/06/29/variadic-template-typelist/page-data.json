{"componentChunkName":"component---src-templates-page-tsx","path":"/2014/06/29/variadic-template-typelist/","webpackCompilationHash":"b0f2540cd746525aebe2","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>Modern C++ Design 책에서 소개한 typelist를 c++11 문법인 variadic template으로 구현해보자.</p>\n<p>typelist는 type들의 list형태로 compile time에 여러 type에 대한 동일한 작업을 할 때 사용된다. 예를 들면,</p>\n<ul>\n<li>conversion table을 만들어서 부담이 적은 dynamic_cast를 구현한다던가,</li>\n<li>hierarchical inheritance를 통한 tuple class 구현이라던가,</li>\n<li>여러 type에 대해 작성되어야 할 boilerplate 코드를 template으로 구현한다던가 할 때 사용된다.</li>\n</ul>\n<p>여러 type을 list 형태로 묶기 위해서는 <strong>개수를 알 수 없는</strong> type 인자를 template으로 받아야 한다는 것인데, c++11 이전에는 그러한 방법이 없었기 때문에 template overloading (boost mpl)이나 typenode에 의한 linked list + macro (loki) 형태로 구현했었다.</p>\n<p>c++11에서는 variadic template이 지원되니 이 부분을 개선해보도록 하자.</p>\n<h2>typenode를 사용한 구현</h2>\n<p>MC++D에서 소개된 loki 라이브러리의 Typelist는 <code>Typelist</code> template class와 <code>TYPELIST</code> macro를 사용하여 구현된다. 본 글에서는 macro가 필요없기 때문에 이름 혼동을 막기 위해 <code>typenode</code> template class와 그를 사용하는 <code>typelist</code> template class로 구현하도록 하겠다.</p>\n<p>일단 <code>typenode</code>를 보면 다음과 같다. <code>typenode</code>는 loki 라이브러리에서 <code>Typelist</code>로 소개된 <code>Head</code>와 <code>Tail</code>을 가지고 있는 struct와 동일하다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">Head</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename </span><span class=\"mtk10\">Tail</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">typenode</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> Head head_type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> Tail tail_type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>loki에서는 저 <code>typenode</code>를 사용할 경우, 인자 4개를 받는 typelist 구현을 위해서는 <code>TYPELIST_4</code>와 같은 macro를 만들어서 typenode의 linked list 형태가 만들어지도록 하였다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">TYPELIST_1</span><span class=\"mtk4\">(</span><span class=\"mtk12\">T1</span><span class=\"mtk4\">) typenode</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">T1, null_type</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">TYPELIST_2</span><span class=\"mtk4\">(</span><span class=\"mtk12\">T1, T2</span><span class=\"mtk4\">) typenode</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">T2, </span><span class=\"mtk11\">TYPELIST_1</span><span class=\"mtk4\">(T1)</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">TYPELIST_3</span><span class=\"mtk4\">(</span><span class=\"mtk12\">T1, T2, T3</span><span class=\"mtk4\">) typenode</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">T3, </span><span class=\"mtk11\">TYPELIST_2</span><span class=\"mtk4\">(T1, T2)</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">TYPELIST_4</span><span class=\"mtk4\">(</span><span class=\"mtk12\">T1, T2, T3, T4</span><span class=\"mtk4\">) typenode</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">T4, </span><span class=\"mtk11\">TYPELIST_3</span><span class=\"mtk4\">(T1, T2, T3)</span><span class=\"mtk1\">&gt;</span></span></code></pre>\n<p>하지만 variadic template이 지원되는 c++11에서는 template 인자를 여러 개 받기 위해 저렇게 할 필요는 없다. 그냥 variadic template param을 받아서 재귀적으로 풀어주기만 하면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\">... </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">typelist</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">typelist</span><span class=\"mtk1\">&lt;&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> null_type type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">Head</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename</span><span class=\"mtk1\">... </span><span class=\"mtk10\">Rest</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">typelist</span><span class=\"mtk1\">&lt;Head, Rest...&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> typenode&lt;Head, </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> typelist&lt;Rest...&gt;::type&gt; type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>기존 template meta programming과 동일하게,</p>\n<ul>\n<li>기본 템플릿(primary template)을 먼저 선언해주고,</li>\n<li>종료 조건에 대한 specialization을 해주고,</li>\n<li>재귀적으로 푸는 일반 항에 대해 만들어주면 된다.</li>\n</ul>\n<p>그냥 수식 정의하는 것, 혹은 함수형 프로그래밍하는 것과 똑같다고 보면 된다.</p>\n<p>그러면 일반 항에 의해 <code>Head</code>와 나머지로 type이 분리되고, 이 때마다 <code>typenode</code>에 대한 link를 재귀적으로 만들어주니 loki와 같이 번거롭게 <code>TYPENODE_n</code> macro를 정의하지 않아도 typelist를 구현할 수 있는 것이다. 이렇게 만들어진 typelist는 loki에서 구현된 typenode의 linked list 형태이므로, loki의 typelist libs를 그대로 사용할 수 있다.</p>\n<p>다음으로 넘어가기 전에 비교를 위해 <code>length</code>, <code>type_at</code>, <code>visitor</code> 3가지 libs에 대해 살펴보자.<br>\n먼저 <code>length</code>를 보자. length는 typelist에 들어있는 type의 개수를 세는 meta function이다. (tmp에서 사용되는 template function을 meta function이라고 한다.)</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">TL</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">length</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> value = </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> + length&lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> TL::tail_type&gt;::value;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">length</span><span class=\"mtk1\">&lt;null_type&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> value = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>구현 방식은 typelist와 동일하다. 다만 primary template 형태에서 일반 항을 구현할 수 있기 때문에 일반 항과 종료 조건만 구현해주면 된다. 즉, <code>Tail</code>이 <code>null_type</code>이 될 때까지 1씩 더해가는 재귀적 구조라고 생각하면 되겠다.</p>\n<p>특정 위치에 있는 type을 가져오는 <code>type_at</code> meta function도 동일한 방법으로 구현할 수 있겠다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">TL</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int </span><span class=\"mtk10\">index</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">type_at</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> type_at&lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> TL::tail_type, index - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">&gt;::type type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">Head</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename </span><span class=\"mtk10\">Tail</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">type_at</span><span class=\"mtk1\">&lt;typenode&lt;Head, Tail&gt;, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> Head type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>index를 받아야 하므로 template argument가 2개(typelist와 index)이다. 두 번째 인자는 integer 값으로 이를 non-type template parameter 혹은 value-type template parameter라고 한다. 별다른 차이는 없고, 그냥 index 값이 0일 때를 종료 조건으로 그 때의 Head를 반환하도록 구현해주면 된다.</p>\n<p>마지막으로 <code>visitor</code>를 보자. visitor는 typelist에 있는 type들을 모두 한 번씩 방문하면서 인자로 넘긴 <code>Delegator</code> meta function을 호출해주는 meta function이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">TL</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> template &lt;</span><span class=\"mtk4\">class</span><span class=\"mtk1\">&gt; </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Delegator</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">struct visitor {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    static void execute() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        Delegator&lt;typename TL::</span><span class=\"mtk4\">head_type</span><span class=\"mtk1\">&gt;::</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        visitor&lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> TL::tail_type, Delegator&gt;::</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;template &lt;</span><span class=\"mtk4\">class</span><span class=\"mtk1\">&gt; </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Delegator</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">struct visitor&lt;</span><span class=\"mtk4\">null_type</span><span class=\"mtk1\">, </span><span class=\"mtk4\">Delegator</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    static void execute() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>역시 구현 방법은 동일하다. <code>Delegator</code>는 type을 template 인자로 받아야 하기 때문에 template class가 되어야 하고, 이 때문에 visitor의 template 인자가 template template class가 된다는 점만 좀 다르다.<br>\n<code>visitor::execute()</code>에서는 typelist를 풀어서 Head를 <code>Delegator::execute()</code>로 넘겨서 호출해주고, 남은 대상들을 재귀적으로 호출해주도록 구현되어 있다. 이 때 재귀적으로 구성될 것 같은 함수 구조는 template engine이 다 풀어서 실제로는 그냥 <code>Delegator::execute()</code> 함수가 연속적으로 불리는 코드가 생성된다. (즉 runtime 부담이 최소화된다)</p>\n<h2>typenode 없는 typelist 구현</h2>\n<p>typenode가 없다는 것은 재귀적으로 구성된 node에 의한 list가 아닌 variadic template param을 보존하고 있는 list 형태로 구현한다는 것이다. 예를 들어 <code>typelist&#x3C;short, int></code>를 구현한다고 하면,</p>\n<ul>\n<li>typenode 기반일 경우 <code>typenode&#x3C;short, typenode&#x3C;int, null_type>></code>와 같이 구성된다면,</li>\n<li>이번에는 <code>typelist&#x3C;short, int></code>와 같이 구성되는 것을 말하는 것이다.</li>\n</ul>\n<p>이렇게 구현할 경우 list를 어떻게 유지할 것이며, 각 지점의 type을 어떻게 접근할 수 있을지 고민해야 한다. 왜냐하면 tmp는 재귀적으로 알고리즘을 작성해야 하기 때문이다.</p>\n<p>일단 이는 간단히 다음과 같이 구현해볼 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\">... </span><span class=\"mtk10\">Types</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">typelist</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">First</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">typelist</span><span class=\"mtk1\">&lt;First&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> typelist&lt;First&gt; type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> null_type next;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> First current;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">First</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename</span><span class=\"mtk1\">... </span><span class=\"mtk10\">Rest</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">typelist</span><span class=\"mtk1\">&lt;First, Rest...&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> typelist&lt;First, Rest...&gt; type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> typelist&lt;Rest...&gt; next;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> First current;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>구현하는 방식은 위에서 언급했던 것과 크게 다르지 않다. primary template을 만들고, 종료 조건에 대해 구현하고, 일반 항을 구현한다.</p>\n<ul>\n<li>처음 typelist와 interface를 맞추기 위해 type으로 자기 자신을 가리키도록 했다.</li>\n<li>지금 인자를 제외한 남은 template 인자들로 다음 list를 가리키기 위한 next를 만들었다.</li>\n<li>지금 인자를 가져오기 위한 current를 만들었다.</li>\n</ul>\n<p>그럼 이제 meta function들은 <code>next</code>를 타고 이동하고 <code>current</code>를 선택하면서 구현하면 되겠다.\n<code>length</code>를 보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">length</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> value = </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> + length&lt;List::next&gt;::value;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">length</span><span class=\"mtk1\">&lt;null_type&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> value = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>typenode 때와 동일하다. <code>tail_type</code> 대신 <code>next</code>로 재귀한다고 생각하면 된다.</p>\n<p><code>type_at</code>과 <code>visitor</code>도 동일하다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">List</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int </span><span class=\"mtk10\">index</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">type_at</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> type_at&lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> List::next, index - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">&gt;::type type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">type_at</span><span class=\"mtk1\">&lt;List, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> List::current type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">List</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> template &lt;</span><span class=\"mtk4\">class</span><span class=\"mtk1\">&gt; </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Delegator</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">struct visitor {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    static void execute() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        Delegator&lt;typename List::</span><span class=\"mtk4\">current</span><span class=\"mtk1\">&gt;::</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        visitor&lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> List::next, Delegator&gt;::</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;template &lt;</span><span class=\"mtk4\">class</span><span class=\"mtk1\">&gt; </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk4\">Delegator</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">struct visitor&lt;</span><span class=\"mtk4\">null_type</span><span class=\"mtk1\">, </span><span class=\"mtk4\">Delegator</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    static void execute() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>이상으로 간단히 typenode 없는 typelist를 구현해 보았다.</p>\n<h2>정리</h2>\n<p>전자와 후자의 가장 큰 차이점은 typenode에 의한 재귀적 list냐 아니면 variadic template 인자에 의한 선형적 list냐의 차이라고 생각된다. 이를 기반으로 수행하는 meta function들은 어차피 재귀적으로 수행되므로, 아마도 둘의 차이는 compile 시 소모되는 메모리 양이 되지 않을까 한다. 아마도 후자의 메모리 소모량이 더 적지 않을까 한다.<br>\n또한 debugging을 위해 typelist의 typename을 출력해보면 후자가 보기 좋기 때문에 후자가 더 좋아보이기도 한다.</p>\n<p>그러면 이제 typelist를 수정하는 meta function들을 구현해야 하는데 그건 다음에 해보도록 하겠다.</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9662632/variadic-variadic-template-templates\">Stackoverflow: Variadic variadic template templates</a></li>\n<li><a href=\"https://stackoverflow.com/questions/16648144/merge-two-variadic-templates-in-one\">Stackoverflow: Merge two variadic templates in one</a></li>\n</ul>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"Modern C++ Design 책에서 소개한 typelist를 c++11 문법인 variadic template으로 구현해보자.typelist는 type들의 list형태로 compile time에 여러 type…","fields":{"date":"June 29, 2014","shortdesc":""},"frontmatter":{"title":"variadic template을 사용한 typelist 구현","tags":["c++","template"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2014/06/29/variadic-template-typelist/"}}}