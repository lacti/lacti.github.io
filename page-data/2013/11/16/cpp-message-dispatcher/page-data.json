{"componentChunkName":"component---src-templates-page-tsx","path":"/2013/11/16/cpp-message-dispatcher/","webpackCompilationHash":"dff243b0bb0545126dc2","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>간단한 message dispatch 코드를 c++로 구현해보자. 일단 <code>std::function</code>을 안 쓰고 구현해보고, 그 다음에 <code>std::function</code>을 써서 구현해보자.</p>\n<p>지난 번 글에서 <code>functor_ii</code>로 <code>handler_t</code>의 근간을 이미 설명했다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">R</span><span class=\"mtk4\">,</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handler_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">handler_t</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_impl</span><span class=\"mtk1\">(</span><span class=\"mtk4\">nullptr</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">F</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">handler_t</span><span class=\"mtk1\">(F </span><span class=\"mtk12\">f</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">_impl</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">impl_t</span><span class=\"mtk1\">&lt;F&gt;(f)) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    R operator () (T </span><span class=\"mtk12\">arg</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (*_impl)(arg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">wrapper_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> R operator () (T </span><span class=\"mtk12\">arg</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">F</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">impl_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">wrapper_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">impl_t</span><span class=\"mtk1\">(F </span><span class=\"mtk12\">f</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            : </span><span class=\"mtk11\">_f</span><span class=\"mtk1\">(f) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> R operator () (T </span><span class=\"mtk12\">arg</span><span class=\"mtk1\">) </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_f</span><span class=\"mtk1\">(arg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        F _f;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::shared_ptr&lt;</span><span class=\"mtk10\">wrapper_t</span><span class=\"mtk1\">&gt; _impl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>interface인 <code>wrapper_t</code>, 실 구현체인 <code>impl_t</code>, 그리고 그것을 멤버로 갖는 type erasure가 적용된 대표 type인 <code>handler_t</code>이다. 1개의 인자와 반환 값을 가질 수 있으므로 이를 template parameter인 <code>R</code>과 <code>T</code>로 표현한 것이다.</p>\n<p>각 message handler가 받을 message의 최상위 class를 만들고, 추후 코딩을 편하게 하기 위해 handler에 대한 typedef를 걸어준다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">~message_t</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handler_t</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">void</span><span class=\"mtk1\">, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp;&gt; </span><span class=\"mtk10\">msg_handler_t</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>이제 모든 작업이 완료되었다. <code>msg_handler_t</code>에 대한 <a href=\"https://en.cppreference.com/w/cpp/container/unordered_map\">unordered_map</a> 객체 만들고, 적절히 불러주기만 하면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::unordered_map&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, </span><span class=\"mtk10\">msg_handler_t</span><span class=\"mtk1\">&gt; __handler_table;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dispatch</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">opcode</span><span class=\"mtk1\">, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">__handler_table</span><span class=\"mtk1\">[opcode](msg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>std::function</code>을 사용할 경우 template parameter만 function type으로 넣어서 <code>msg_handler_t</code>에 대한 typedef을 바꿔주면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> std::function&lt;</span><span class=\"mtk4\">void</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp;)&gt; </span><span class=\"mtk10\">msg_handler_t</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>표준 라이브러리에서 인자를 저렇게 받는 이유는 저 표현식이 단순히 반환 타입, 인자 타입을 나열하는 것에 비해 더 가독성이 좋다고 판단했기 때문이다. 저렇게 받은 인자는 내부에서 <code>function_traits</code>에 의해 다시 반환 타입과 인자 타입이 분리되어 결국 <code>handler_t</code>와 같은 구현을 하게 된다.</p>\n<p>위와 같이 코드를 구현하면 조금 아쉬운 점이 있다. 예를 들어 <code>message_t</code>를 상속받은 <code>int_msg_t</code>와 <code>string_msg_t</code>가 있다고 하자. 그리고 이를 처리하는 <code>int_msg_handler</code>, <code>string_msg_handler</code>가 있을 때 코드는 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">int_msg_handler</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">m</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\">&amp; msg = </span><span class=\"mtk11\">static_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int_msg_t</span><span class=\"mtk1\">&gt;(m);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// do something with int_msg</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">string_msg_handler</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">m</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">string_msg_t</span><span class=\"mtk1\">&amp; msg = </span><span class=\"mtk11\">static_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">string_msg_t</span><span class=\"mtk1\">&gt;(m);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// do something with string_msg</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">enum</span><span class=\"mtk1\"> msg_id {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    int_msg_id,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    string_msg_id,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">__handler_table</span><span class=\"mtk1\">[int_msg_id] = int_msg_handler;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">__handler_table</span><span class=\"mtk1\">[string_msg_id] = string_msg_handler;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<ul>\n<li>먼저, 각 handler의 type은 모두 <code>void (const message_t&#x26;)</code> 이기 때문에 실제 우리가 원하는 type으로 인자를 받을 수가 없다. 따라서 매번 casting해주는 과정이 필요하다.</li>\n<li>그리고 각 msg가 추가될 때마다 <code>msg_id</code> 값을 정의해주어야 한다.</li>\n<li>마지막으로 구현한 handler를 handler_table에다가 등록해주는 코드를 작성해야 한다.</li>\n</ul>\n<p>일단 <code>msg_id</code> 문제를 해결해보자. 여러가지 방법이 있겠지만 귀찮으니 <a href=\"https://en.cppreference.com/w/cpp/types/type_index\">type_index</a>를 사용하자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::unordered_map&lt;std::type_index, </span><span class=\"mtk10\">msg_handler_t</span><span class=\"mtk1\">&gt; __handler_table;</span></span></code></pre>\n<p><code>message_t</code>를 받는 함수와 원하는 type을 받는 함수를 분리하고, <code>__handler_table</code>에 함수를 프로그램 시작 시에 등록하기 위해 static 전역 변수를 사용해 코드를 정리하면 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> _Ty&amp; </span><span class=\"mtk11\">cast</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> _Ty&amp;&gt;(msg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">int_msg_handler</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_int_msg_wrapper</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">m</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">int_msg_handler</span><span class=\"mtk1\">(</span><span class=\"mtk11\">cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">int_msg_t</span><span class=\"mtk1\">&gt;(m));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">int_msg_handler</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// do something with int_msg_t</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_table_register_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_table_table_t</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">__handler_table</span><span class=\"mtk1\">.</span><span class=\"mtk11\">insert</span><span class=\"mtk1\">(std::</span><span class=\"mtk11\">make_pair</span><span class=\"mtk1\">(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            std::</span><span class=\"mtk11\">type_index</span><span class=\"mtk1\">(typeid(</span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\">)), _int_msg_wrapper));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">} __register1;</span></span></code></pre>\n<p>일단 편하게 message를 casting하기 위한 cast 함수를 만들었다. 그냥 const reference 지키면서 static_cast를 해주는 함수이다.</p>\n<ul>\n<li>dynamic_cast를 하지 않은 이유는 항상 올바른 type만 casting을 요청할 것이라는 믿음을 갖고 불필요한 검사를 피하기 위함이다</li>\n<li><code>_Ty</code>가 정말 <code>message_t</code>를 상속받았는지 보려면 <a href=\"https://en.cppreference.com/w/cpp/types/is_base_of\">std::is<em>base</em>of</a>를 쓰면 되겠다.</li>\n</ul>\n<p>실제 작업을 수행할 함수인 <code>int_msg_handler</code>를 선언한다. 그리고 전달 함수인 <code>_int_msg_wrapper</code> 함수를 작성한다. <code>_int_msg_wrapper</code> 함수에서는 <code>message_t</code>를 <code>int_msg_t</code>로 casting만 해서 <code>int_msg_handler</code> 함수로 넘겨준다. 그리고 실질적인 작업은 <code>int_msg_handler</code>에서 <code>int_msg_t</code>를 인자로 받아 처리하게 된다.</p>\n<p>프로그램 시작과 동시에 <code>__handler_table</code>에 등록하는 가장 좋은 방법은 전역 객체의 생성자를 사용하는 방법이다. 전역으로 정의된 객체의 생성자는 프로그램 시작 시에 호출된다는 점을 이용하는 것이다. 따라서 전역 객체 <code>__register1</code>를 정의한다. 그러면 프로그램 시작 시 <code>_table_register_t</code>의 생성자가 호출되고, 그 생성자에서 <code>__handler_table</code>에게 <code>int_msg_t</code>에 대한 <code>type_index</code>와 <code>_int_msg_wrapper</code>를 넣어주면 된다.</p>\n<p>그런데 위 코드를 보면 <code>int_msg_t</code>에 해당하는 부분을 <code>string_msg_t</code>로 치환했을 때, <code>string_msg_t</code>를 위해서도 사용할 수 있는 것을 확인할 수 있다. 즉, <strong>대부분의 코드가 무의미하게 반복된다는 것이다</strong>. 이러한 boilerplate code를 적절히 제거하기 위해 반복되는 부분을 다음과 같이 macro로 묶어내자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">table_register_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">table_register_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">msg_handler_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handler</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">handler_table</span><span class=\"mtk1\">().</span><span class=\"mtk11\">insert</span><span class=\"mtk1\">(std::</span><span class=\"mtk11\">make_pair</span><span class=\"mtk1\">(std::</span><span class=\"mtk11\">type_index</span><span class=\"mtk1\">(typeid(_Ty)), handler));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">HANDLER</span><span class=\"mtk4\">(</span><span class=\"mtk12\">msg_type</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static void msg_type</span><span class=\"mtk12\">##_handler</span><span class=\"mtk4\">(const msg_type</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\"> msg); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static void _</span><span class=\"mtk12\">##msg_type##_wrapper</span><span class=\"mtk4\">(const </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\"> m) { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        msg_type</span><span class=\"mtk12\">##_handler</span><span class=\"mtk4\">(cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">msg_type</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\">(m)); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    } </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static </span><span class=\"mtk10\">table_register_t</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">msg_type</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> __reg_</span><span class=\"mtk12\">##msg_type</span><span class=\"mtk4\">##(_</span><span class=\"mtk12\">##msg_type##_wrapper</span><span class=\"mtk4\">); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static void msg_type</span><span class=\"mtk12\">##_handler</span><span class=\"mtk4\">(const msg_type</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\"> msg)</span></span></code></pre>\n<p>이제 다음과 같이 사용할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> a, b;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">HANDLER</span><span class=\"mtk1\">(</span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::cout &lt;&lt; </span><span class=\"mtk12\">msg.a</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">msg.b</span><span class=\"mtk1\"> &lt;&lt; std::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이제 message를 하나 만들어서 날려보자. 이를 처리하는 dispatch 함수는 다음과 같이 간단하게 작성할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dispatch</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> _Ty&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">__handler_table</span><span class=\"mtk1\">[std::</span><span class=\"mtk11\">type_index</span><span class=\"mtk1\">(typeid(_Ty))](msg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\"> msg;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">msg.a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">msg.b</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">20</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">dispatch</span><span class=\"mtk1\">(msg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>아무 message 객체나 받아서 그 <code>type_index</code>로 적절한 handler를\n찾고, 그 handler에게 message 객체를 넘겨서 처리될 수 있도록 하는 것이다.</p>\n<p>하지만 위 코드에는 문제가 있다. 전역 <code>table_register_t</code> 객체와 <code>__handler_table</code> 객체가 다른 번역 단위에 있을 경우, 두 객체의 생성자가 불리는 시점이 undefined이기 때문에 아직 <code>__handler_table</code> 객체가 초기화되지 않은 시점에서 register를 수행하다가 프로그램이 죽는 문제이다.</p>\n<p>이 문제를 해결하는 가장 쉬운 방법은 <code>handler_table</code> 객체를 전역 변수 말고 singleton으로 만드는 것이다. 원칙적으로 singleton 객체는 처음 접근할 때 생성되기 때문에, 어떤 register 객체든 <code>handler_table</code> 객체를 처음 접근하는 때 <code>handler_table</code> 객체를 생성하게 되니 위 문제를 해결할 수 있다.</p>\n<p>그리고 c++11에서는 간단하게 singleton을 구현할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handler_table_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk11\">handler_table</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handler_table_t</span><span class=\"mtk1\"> _handler_table;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> _handler_table;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>코드 전문은 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">~message_t</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> std::function&lt;</span><span class=\"mtk4\">void</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp;)&gt; </span><span class=\"mtk10\">msg_handler_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> std::unordered_map&lt;std::type_index, </span><span class=\"mtk10\">msg_handler_t</span><span class=\"mtk1\">&gt; </span><span class=\"mtk10\">handler_table_t</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handler_table_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk11\">handler_table</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handler_table_t</span><span class=\"mtk1\"> _handler_table;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> _handler_table;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> _Ty&amp; </span><span class=\"mtk11\">cast</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static_cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> _Ty&amp;&gt;(msg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">table_register_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">table_register_t</span><span class=\"mtk1\">(</span><span class=\"mtk10\">msg_handler_t</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handler</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">handler_table</span><span class=\"mtk1\">().</span><span class=\"mtk11\">insert</span><span class=\"mtk1\">(std::</span><span class=\"mtk11\">make_pair</span><span class=\"mtk1\">(std::</span><span class=\"mtk11\">type_index</span><span class=\"mtk1\">(typeid(_Ty)), handler));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">HANDLER</span><span class=\"mtk4\">(</span><span class=\"mtk12\">msg_type</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static void msg_type</span><span class=\"mtk12\">##_handler</span><span class=\"mtk4\">(const msg_type</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\"> msg); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static void _</span><span class=\"mtk12\">##msg_type##_wrapper</span><span class=\"mtk4\">(const </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\"> m) { </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        msg_type</span><span class=\"mtk12\">##_handler</span><span class=\"mtk4\">(cast</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">msg_type</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\">(m)); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    } </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static </span><span class=\"mtk10\">table_register_t</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">msg_type</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> __register_</span><span class=\"mtk12\">##msg_type</span><span class=\"mtk4\">##(_</span><span class=\"mtk12\">##msg_type##_wrapper</span><span class=\"mtk4\">); </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    static void msg_type</span><span class=\"mtk12\">##_handler</span><span class=\"mtk4\">(const msg_type</span><span class=\"mtk1\">&amp;</span><span class=\"mtk4\"> msg)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename </span><span class=\"mtk10\">_Ty</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">inline</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dispatch</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> _Ty&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">handler_table</span><span class=\"mtk1\">()[std::</span><span class=\"mtk11\">type_index</span><span class=\"mtk1\">(typeid(_Ty))](msg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>그리고 main 함수에서는 다음과 같이 사용한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">message_t</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> a, b;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">HANDLER</span><span class=\"mtk1\">(</span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::cout &lt;&lt; </span><span class=\"mtk12\">msg.a</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">msg.b</span><span class=\"mtk1\"> &lt;&lt; std::endl;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">int_msg_t</span><span class=\"mtk1\"> msg;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">msg.a</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">msg.b</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">20</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">dispatch</span><span class=\"mtk1\">(msg);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h2>정리</h2>\n<p>이번 과제에서는 간단하게 c++의 message dispatch 코드를 구현해보았다. 위와 같은 코드는 queue를 붙여서 message pattern이나 event pattern을 구현할 때 쓰이거나 네트워크를 붙여서 서버의 packet dispatch 코드로도 사용된다. 언듯 보면 복잡해보일 수도 있으나 실상은 function map이고, 여기저기서 자주 만나게 될 개념이니 이번 기회에(?) 익숙해지도록 하자.</p>\n<p>추가 과제였던 reflection 과제에 대한 풀이는 예전에 작성한 글에 대한 링크로 대신하겠다.</p>\n<ul>\n<li><a href=\"%7B%25%20post_url%202012-06-04-using-reflection-at-cpp-2%20%25%7D\">c++에서 reflection 사용하기 2</a></li>\n<li><a href=\"%7B%25%20post_url%202012-06-09-using-reflection-at-cpp-3%20%25%7D\">c++에서 reflection 사용하기 3</a></li>\n</ul>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"간단한 message dispatch 코드를 c++로 구현해보자. 일단 std::function을 안 쓰고 구현해보고, 그 다음에 std::function을 써서 구현해보자.지난 번 글에서 functor_ii로 handler_t…","fields":{"date":"November 16, 2013","shortdesc":""},"frontmatter":{"title":"c++ message dispatcher","tags":["c++","template","study"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2013/11/16/cpp-message-dispatcher/"}}}