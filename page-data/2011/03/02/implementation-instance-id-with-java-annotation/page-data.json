{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/03/02/implementation-instance-id-with-java-annotation/","webpackCompilationHash":"3b8c3c3cfcb69a320067","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>Java에서 생성하는 <code>Object</code>마다 InstanceId를 부여하는 방법에 대해 고민해보고 코드를 작성해보자.</p>\n<p>Index 발급 Group 관련해서 파일을 하나 작성하여 <code>IndexGeneratingManager</code>를 구성해서 발급해도 되고, 아니면 발급 받는 시점을 적절히 조절하거나 발급 함수의 인자로 Group할 Class 정보를 넣어줘도 되겠다.<br>\n하지만 본 글에서는 Java 1.5부터 추가된 <code>Annotation</code>을 사용하여 source code에 metadata를 추가하여 문제를 해결하는 방법을 써 보겠다.</p>\n<p>Java의 <code>Annotation</code>은 특정 지점(ElementType: Type, Method, Field, …)에 특정 시점(Retention: Source, Class, Runtime)까지 유지되는 metadata이다.<br>\n<code>@interface keyword</code>로 정의할 수 있고, 지정된 지점에 맞게 class, method, field, parameter 등에 선언될 수 있고, 이는 지정된 시점까지 유지된다.</p>\n<p>위 문제를 해결하기 위해 새로 작성하는 <code>IndexCategory</code>라는 annotation은 index를 발급할 <code>category</code> class를 지정한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.lang.annotation.ElementType;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.lang.annotation.Retention;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.lang.annotation.RetentionPolicy;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.lang.annotation.Target;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">@Target</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ElementType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">TYPE</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">@Retention</span><span class=\"mtk1\">(</span><span class=\"mtk12\">RetentionPolicy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">RUNTIME</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> @</span><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IndexCategory</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk15\">?</span><span class=\"mtk1\">&gt; </span><span class=\"mtk11\">category</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이 annotation은 <code>Type</code>에 선언될 수 있는데, 여기서 <code>Type</code>은 <code>class</code>를 뜻한다.<br>\n또한 Runtime까지 유지되는 정보인데, 그 이유는 객체가 “생성되는 시점”인 runtime에 해당 정보를 통해서 어떤 category의 class type으로 index를 발급받을지 얻어내야하기 때문이다.</p>\n<p>annotation은 속성<code>property</code>를 갖는데, <code>IndexCategory</code>는 <code>category()</code>라는 속성을 갖는다. 이는 <code>Class&#x3C;?></code>를 값으로 갖는 속성으로 그 이름은 category가 된다.</p>\n<p>위와 같은 <code>IndexCategory</code> annotation을 다음과 같이 사용하고자 할 class에 적용한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Skill</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Thing</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">@IndexCategory</span><span class=\"mtk1\">(category=</span><span class=\"mtk12\">Skill</span><span class=\"mtk1\">.</span><span class=\"mtk12\">class</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Magic</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Skill</span><span class=\"mtk1\"> {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">@IndexCategory</span><span class=\"mtk1\">(category=</span><span class=\"mtk12\">Skill</span><span class=\"mtk1\">.</span><span class=\"mtk12\">class</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Mastery</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Skill</span><span class=\"mtk1\"> {}</span></span></code></pre>\n<p><code>Magic</code> class와 <code>Mastery</code> class는 <code>IndexCategory</code>에 의해 어떤 category에 따라 index를 발급받을지 code 상에 명시한다.\n분명 이 annotation은 프로그램의 동작에 영향을 주지만, 어떠한 코드로써 그 정보를 제공한다기 보다는 metadata로 그 정보를 제공한다는 점에서 충분히 매력적이다. 어떠한 class의 특성을 명시하기 위해 method나 field, 상속 등의 무거운 방법을 사용하지 않고, 위처럼 <code>annotation</code>을 통해 충분히 정보를 제공할 수 있다.</p>\n<p>문법상 annotation을 사용할 때 앞에 @ 을 붙이고 annotation 이름을 쓴다. 그리고 () 안에 <em>속성=값</em>의 형태로 나열하면 되고, 배열의 경우 {}를 통해 묶어주면 된다.</p>\n<p>이러한 annotation을 가장 많이 접하는 경우가 <code>Override annotation</code>과 <code>Deprecated annotation</code>, 그리고 <code>SuppressWarnings annotation</code>이다.<br>\n간단히 <code>Override annotation</code>만 설명하자면 이는 method에 선언 가능하며 source 시간까지 유지되는 <code>annotation</code>이다. 즉 compiler가 확인하고 버리는 시점까지 유지되는 <code>annotation</code>으로 <code>override</code> 되지 않은 method가 이 <code>annotation</code>을 가지고 있을 경우 compile error를 띄워주는 역할을 하여 compile time에 잘못된 override를 사전에 보고하는 역할을 한다.</p>\n<p>위와 같이 <code>IndexCategory</code> annotation을 명시한 뒤, 객체를 생성하여 index를 발급하는 코드에서는 이를 반영하여 index를 해주면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">generateNextIndex</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">callerClassName</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">findCallerClassName</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">callerClass</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Class</span><span class=\"mtk1\">.</span><span class=\"mtk11\">forName</span><span class=\"mtk1\">(callerClassName);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">callerClass</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isAnnotationPresent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IndexCategory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">class</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">IndexCategory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">category</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">callerClass</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getAnnotation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IndexCategory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">class</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">categoryClass</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">category</span><span class=\"mtk1\">.</span><span class=\"mtk11\">category</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">generateNextIndex</span><span class=\"mtk1\">(categoryClass);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">generateNextIndex</span><span class=\"mtk1\">(callerClass);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Exception</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">generateNextIndex</span><span class=\"mtk1\">(callerClassName);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>callerClassName</code>을 가져와서 그로부터 Class 정보를 가져온 뒤, 그 Class가 <code>IndexCategory</code> annotation이 존재<code>present</code>할 경우 해당 annotation에 명시된 category로부터 category class 정보를 가져와서 그 class로 index를 발급하겠다는 코드이다.</p>\n<p>즉, 반드시 <code>IndexCategory</code>를 통해 index grouping을 수행하겠다는 것이 아니라 <code>IndexCategory</code> annotation이 present된 경우에만 해당 class로 index를 발급받는 것이므로, annotation이 선언되지 않은 경우까지 완벽히 처리하게 됩니다.</p>\n<p>물론 <code>callerClassName</code>에서 잘못된 class 이름을 얻을 경우에 대비해서 예외처리 코드를 추가했지만 이는 <code>Class#forName</code> 함수가 반드시 예외를 처리하게 하는(명시적 예외처리) 구조이므로 try-catch 문을 작성한 것이지 위 경우에서는 예외가 발생할 가능성이 없다.</p>\n<p>본 문서에서는 <a href=\"https://en.wikipedia.org/wiki/Annotation#Java_annotations\">Java Annotation</a>의 문법에 대해 설명하는 것이 취지가 아니므로, 이 정도로 글을 마친다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"Java에서 생성하는 Object마다 InstanceId를 부여하는 방법에 대해 고민해보고 코드를 작성해보자.Index 발급 Group 관련해서 파일을 하나 작성하여 IndexGeneratingManager…","fields":{"date":"March 02, 2011"},"frontmatter":{"title":"java annotation을 사용한 InstanceId 구현","tags":["java"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/03/02/implementation-instance-id-with-java-annotation/"}}}