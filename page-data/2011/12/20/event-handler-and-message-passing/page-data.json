{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/12/20/event-handler-and-message-passing/","webpackCompilationHash":"3b8c3c3cfcb69a320067","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>객체(object)는 상태(state)를 갖고 외부의 조작(mutator)에 의해서 변경될 수 있다.\n이러한 객체를 다루는 프로그래밍을 할 때는, 관찰자(observer)가 객체의 상태 변화(property change)를 감지하여 어떠한 동작(action)을 수행하는 경우가 많이 있다.</p>\n<p>이러한 코드를 작성할 경우, 관찰 당하는 객체(subject)와 관찰자(observer)의 관계를 어떻게 정의하냐에 따라서, 확장성, 결합성 등이 많이 달라지게 된다. 이 글에서는 간단한 EventHandler와 Message Passing에 대해서 다루어보려고 한다.<br>\n<a href=\"https://en.wikipedia.org/wiki/Observer_pattern\">https://en.wikipedia.org/wiki/Observer_pattern</a></p>\n<h2>hard binding</h2>\n<p>명부(List)는 내부에 사람(Person)을 포함한다. 사람은 이름(name)이라는 속성(property)을 갖고, 이 값은 외부에서 변경될 수 있다(mutator method). 명부는 사람의 이름이 변경되는 것을 감지해야한다.</p>\n<p>이를 위한 가장 간단한 방법은 아래와 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\"> </span><span class=\"mtk12\">observer</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Person</span><span class=\"mtk1\">() {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setName</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">observer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">nameChanged</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">, name);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = name;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">attach</span><span class=\"mtk1\">(</span><span class=\"mtk10\">List</span><span class=\"mtk1\"> </span><span class=\"mtk12\">observer</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">observer</span><span class=\"mtk1\"> = observer;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Person</span><span class=\"mtk1\"> </span><span class=\"mtk12\">person</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">person</span><span class=\"mtk1\">.</span><span class=\"mtk11\">attach</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nameChanged</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oldName</span><span class=\"mtk1\">, </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newName</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>간단한 구조에서는 위와 같이 하는 것이 더 직관적일 수 있다. 하지만 Person과 List는 강결합되고, 추후에 Person 객체의 name 값이 변경되는 것을 감지하려는 대상(observer)이 늘어날 수록 코드는 복잡해질 것이다.</p>\n<h2>interface 도입</h2>\n<p>두 객체 간의 강결합을 피하기 위해 이를 분리하기 위한 중간 interface를 도입한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">NameObserver</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nameChanged</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oldName</span><span class=\"mtk1\">, </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newName</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이제 Person과 List의 관계는 NameObserver를 통해서 약간은 분리되었다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">NameObserver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">observer</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">attach</span><span class=\"mtk1\">(</span><span class=\"mtk10\">NameObserver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">observer</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">observer</span><span class=\"mtk1\"> = observer;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\"> </span><span class=\"mtk4\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk10\">NameObserver</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>Person</code>은 자신의 이름이 변경될 때 그 사실을 알려주어야 할 대상을 <code>NameObserver</code>로 한정지을 수 있다. 즉, <code>NameObserver</code>를 구현하는(implements) 모든 대상들은 <code>Person</code>의 <code>name</code> 변경에 대한 고지(notify)를 받을 수 있는 것이다.</p>\n<h2>multiple observer</h2>\n<p>하나의 <code>Person</code>이 여러 <code>NameObserver</code>에게 사실을 알려주어야 한다면, <code>NameObserver</code> 객체에 대한 reference를 Collection 형태로 가지고 있으면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">NameObserver</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">observers</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ArrayList</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">NameObserver</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">attach</span><span class=\"mtk1\">(</span><span class=\"mtk10\">NameObserver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">observer</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">observers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(observer);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setName</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newName</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">NameObserver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">each</span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">observers</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">each</span><span class=\"mtk1\">.</span><span class=\"mtk11\">nameChanged</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">, newName);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = newName;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>위 같은 작업은 속성(property)를 갖는 많은 JavaBean 객체에서 주로 사용되므로, Java 쪽에서는 <code>PropertyChangeSupport</code>라는 Utility class를 통해 위 작업을 편하게 구현할 수 있게 해준다.</p>\n<h2>PropertyChangeEvent</h2>\n<p>interface 쪽으로 분리되었다고 해도, <code>Person</code>의 변경에 대해 통지해야할 속성 값의 개수가 늘어나거나, 그 내용이 변경되거나 하면 이 interface의 수정은 불가피하다.</p>\n<p>예를 들어, <code>Person</code> class에 나이(age)속성이 추가된다고 하자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">age</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>그리고 <code>age</code>에 대해서도 변경 통지를 해주고 싶다. 그러면 <code>AgeObserver</code>를 하나 새로 만들어야 할까? 아니면 <code>NameObserver</code>를 적절히 <code>PersonObserver</code>로 변경한 다음 <code>ageChanged</code>라는 함수를 추가해줄까? 이전에 <code>NameObserver</code>를 구현(implements)하고 있던 class들이 모두 <code>age</code>에 대한 변경 통지를 원할까?</p>\n<p>즉, 중간 interface 분리를 통해 <code>Person</code>과 <code>List</code> class의 결합도는 낮아졌지만, <code>Person</code>과 <code>NameObserver</code>, <code>NameObserver</code>와 <code>List</code>의 결합은 상속(Java 에서는 interface 에 의한 구현implements 이지만 runtime에 변경될 수 없는 정적 binding 이라는 점에서는 매한가지다) 관계이므로 이쪽은 여전히 강결합이라는 것이다.</p>\n<p>이 문제를 해결하기 위해서는 약간의 추상화가 더 필요하다.\n<code>Person</code> class는 자신의 상태(속성)가 변화될 때의 정보를 적절히 capsulation하여 객체로 구성하고, 이를 통지받는 쪽에서는 그 정보 객체를 받아 적절히 처리하는 것이다.</p>\n<p>즉, 정보를 담기 위한 중간 객체가 등장한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">PropertyChangeEvent</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">propertyName</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oldValue</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newValue</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">PropertyListener</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">propertyChanged</span><span class=\"mtk1\">(</span><span class=\"mtk10\">PropertyChangeEvent</span><span class=\"mtk1\"> </span><span class=\"mtk12\">event</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이제 <code>Person</code>은 자신의 정보가 변경될 때마다 <code>PropertyChangeEvent</code> 객체를 자신에게 등록되어있는(subscribe) <code>PropertyListener</code> 객체들에게 던진다. 그러면 그 <code>PropertyListener</code>의 구현체들은(implements or concrete) <code>PropertyChangeEvent</code> 객체를 받았을 때 자신이 원하는 이벤트에 대해서만 처리하는 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Person</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">PropertyChangeListener</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">listeners</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ArrayList</span><span class=\"mtk1\">&lt;&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setName</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newName</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">PropertyChangeListener</span><span class=\"mtk1\"> </span><span class=\"mtk12\">each</span><span class=\"mtk15\">:</span><span class=\"mtk1\"> listeners) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">each</span><span class=\"mtk1\">.</span><span class=\"mtk11\">propertyChanged</span><span class=\"mtk1\">(</span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PropertyChangedEvent</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;name&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">, newName));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = newName;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span></code></pre>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\"> </span><span class=\"mtk4\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk10\">PropertyChangeListener</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">propertyChanged</span><span class=\"mtk1\">(</span><span class=\"mtk10\">PropertyChangeEvent</span><span class=\"mtk1\"> </span><span class=\"mtk12\">event</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">event</span><span class=\"mtk1\">.</span><span class=\"mtk12\">propertyName</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equals</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;name&quot;</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// name changed</span></span></code></pre>\n<p>실제로 위 방법의 <code>PropertyChageEvent</code>는 너무 일반적(generic) 해서 정보를 가져올 때 썩 좋지는 않다. 어떤 속성 값이 바뀌었는지 String 변수를 통해 판단하므로 판단에 위험도 있고, 그 값도 모두 Object이므로 type-cast 위험도 있다.</p>\n<p>이를 해결해주기 위해서 적절히 <code>Event</code> class 를 분화한다던지, <code>Event</code>의 각 Id 값을 enum이나 int 등으로 분류하여 관리한다던지 한다.</p>\n<p>그리고 위 경우에도 자신이 관심있는 속성에 대해서만 <code>PropertyChangeEvent</code>를 받는 것이 아니라 모든 변경에 대해 받게 된다. 이 역시 <code>Person</code> class (사실상 Model 객체)에 <code>Listener</code>를 attach 할 때 어떤 속성에 대한 변화 통지를 받을 것인지를 따로 관리하게 하는 방법으로 해결할 수 있다.\n(하지만 더 이상의 자세한 설명은 생략한다.)</p>\n<p>또한 Reflection 등을 사용하여 각 Event type마다 다른 Handler를 호출되게 하는 방법도 있다. <a href=\"%7B%25%20post_url%202011-11-27-java-message-dispatcher%20%25%7D\">간단한 Message 체계 구현</a></p>\n<p>요약하자면 결국 송신/수신 객체간의 낮은 결합성을 고려한 상태 변화 통지의 설계가 Event Handler (Listener) 방식이라는 것이다.</p>\n<h2>message passing</h2>\n<p>Message Passing이야기를 해보자.\nEvent와 Message는 정보를 담은 객체이면서, 송신/수신 객체의 의존성을 분리하기 위한 추상화 방법이라는 점에서 매우 유사해보인다. 그런데 억지로 가장 큰 차이를 들어보자면,</p>\n<ul>\n<li>Event는 Event 발생자와 수신자(Listener) 간의 1:N 관계 (Event 발생자가 여러 수신자에게 Event 객체를 넘겨주는 식)이고,</li>\n<li>Message는 여러 Message 수신자(Listener)가 Message 생성자와 MessageQueue를 공유해서 N:M 의 처리가 이루어지는 구조이다.</li>\n</ul>\n<p><del>너무 억지다</del></p>\n<p>사실상 Java에서도 UI Event에서 처리 동기화를 위해 단일화된 EventQueue를 쓰고, 이를 처리하는 Event Dispatch Thread (EDT)가 EventQueue에 들어있는 Event를 하나씩 꺼내서 처리한다.</p>\n<p>즉, UI Components들은 자신들에게서 일어나는 일에 대한 처리를 <strong>위임</strong>하기 위해 그 정보를 Event 객체에 담아 EventQueue에 넣고, EDT는 그걸 하나씩 꺼내서 자신에게 등록된 Listener들을 하나씩 불러서 처리할 수 있게 해주는 것이다.</p>\n<p>Event, Message, Signal 개념적으로 모두 자신의 할 일을 남에게 위임(delegation) 하는 상황에서 객체간의 결합성을 낮추기 위해서 사용되는 개념이고, 안에 들어있는 정보가 작을 수록 Event에서 Signal 쪽으로 부르는 것 같기는 하지만 보면 그냥 각자의 취향같다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"객체(object)는 상태(state)를 갖고 외부의 조작(mutator)에 의해서 변경될 수 있다.\n이러한 객체를 다루는 프로그래밍을 할 때는, 관찰자(observer)가 객체의 상태 변화(property change…","fields":{"date":"December 20, 2011"},"frontmatter":{"title":"EventHandler와 Message Passing","tags":["java","message"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/12/20/event-handler-and-message-passing/"}}}