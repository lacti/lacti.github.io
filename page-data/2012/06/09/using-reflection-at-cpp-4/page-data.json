{"componentChunkName":"component---src-templates-page-tsx","path":"/2012/06/09/using-reflection-at-cpp-4/","webpackCompilationHash":"906e474feba7d651d076","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>이전 글에서는 자료구조가 선언된 header파일을 여러 번 include하면 문제가 발생했었다. 하지만 이리저리 참조가 되다보면 각 번역 단위에서 include가 한 번만 되는 것은 굉장히 힘든 일일 것이다.</p>\n<p>따라서 본 글에서는 매크로를 잘 정의해서 선언 header파일이 구조체 선언, reflection 등록 딱 2번만 include가 될 수 있도록 만들어볼 것이다. <a href=\"https://github.com/lacti/FieldInfo/tree/v0.3\">이전 글(#3)의 소스 코드</a> 내의,</p>\n<ul>\n<li><a href=\"https://github.com/lacti/FieldInfo/blob/v0.3/reset_type_macro.h\">reset<em>type</em>macro.h</a></li>\n<li><a href=\"https://github.com/lacti/FieldInfo/blob/v0.3/type_declare_macro.h\">type<em>declare</em>macro.h</a></li>\n<li><a href=\"https://github.com/lacti/FieldInfo/blob/v0.3/type_register_macro.h\">type<em>register</em>macro.h</a></li>\n<li><a href=\"https://github.com/lacti/FieldInfo/blob/v0.3/user.h\">user.h</a></li>\n</ul>\n<p>가 이번 글의 타겟이 될 것이다.</p>\n<p><code>#include</code>를 하는 phase는 2단계로 나뉜다.</p>\n<ul>\n<li>첫 번째는 구조체를 선언하기 위한 단계로 <code>DECLARE_PHASE</code>라고 하겠다. 이 때 <code>STRUCT</code> 매크로들은 <code>DECLARE</code> 매크로가 사용되어야 하므로, 이 시점에서는 type<em>declare</em>macro.h가 include된 상태이어야 한다.</li>\n<li>두 번째는 선언된 구조체의 reflection 정보를 등록하는 단계로 <code>REGISTER_PHASE</code>라고 하겠다. 이 때 STRUCT 매크로들은 REFLECTION<em>REGISTER 매크로가 사용되어야 하므로, 이 시점에서는 type</em>register_macro.h가 include된 상태이어야 한다.</li>\n</ul>\n<p>두 macro.h 파일이 처음 참조하게 되는 초기화 파일인 reset<em>type</em>macro.h 파일에서 각 상태를 먼저 초기화해줄 수 있도록 한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_FIELD</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_FIELD</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> __DECLARE_PHASE__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__DECLARE_PHASE__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifdef</span><span class=\"mtk4\"> __REGISTER_PHASE__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#undef</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__REGISTER_PHASE__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span></code></pre>\n<p>이제 어떤 macro.h가 include되냐에 따라서 <code>STRUCT</code>와 <code>PHASE</code>도 변경될 수 있도록 밑작업을 마쳤다.</p>\n<p>구조체를 선언하기 위한 매크로가 정의된 type<em>declare</em>macro.h 파일을 보면 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;reset_type_macro.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#ifndef</span><span class=\"mtk4\"> __DECLARE_TYPE_MACRO_DEFINED__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__DECLARE_TYPE_MACRO_DEFINED__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">DECLARE_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">class_name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    struct </span><span class=\"mtk10\">class_name</span><span class=\"mtk4\">; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    typedef </span><span class=\"mtk10\">std</span><span class=\"mtk4\">::shared_ptr</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">class_name</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> class_name</span><span class=\"mtk12\">##_ref</span><span class=\"mtk4\">; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    struct </span><span class=\"mtk10\">class_name</span><span class=\"mtk4\"> : public </span><span class=\"mtk10\">object_t</span><span class=\"mtk4\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">DECLARE_FIELD</span><span class=\"mtk4\">(</span><span class=\"mtk12\">type</span><span class=\"mtk4\">, </span><span class=\"mtk12\">field_name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">        type field_name;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">DECLARE_END</span><span class=\"mtk4\">()   </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">class_name</span><span class=\"mtk4\">)        </span><span class=\"mtk11\">DECLARE_BEGIN</span><span class=\"mtk4\">(class_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_FIELD</span><span class=\"mtk4\">(</span><span class=\"mtk12\">type</span><span class=\"mtk4\">, </span><span class=\"mtk12\">field_name</span><span class=\"mtk4\">)  </span><span class=\"mtk11\">DECLARE_FIELD</span><span class=\"mtk4\">(type, field_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk4\">()                    </span><span class=\"mtk11\">DECLARE_END</span><span class=\"mtk4\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__DECLARE_PHASE__</span></span></code></pre>\n<p><code>DECLARE</code> 계열 매크로의 중복 정의를 막고, <code>STRUCT</code>가 <code>DECLARE</code> 매크로를 가리키게 한 다음,\n현재 상태를 <code>DECLARE_PHASE</code>로 만든다.</p>\n<p>선언된 구조체의 reflection 정보를 등록하기 위한 매크로가 정의된 type<em>register</em>macro.h 파일을 보면 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;reflection_macro.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&quot;reset_type_macro.h&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk4\">(</span><span class=\"mtk12\">class_name</span><span class=\"mtk4\">)        </span><span class=\"mtk11\">REFLECTION_REGISTER_BEGIN</span><span class=\"mtk4\">(class_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_FIELD</span><span class=\"mtk4\">(</span><span class=\"mtk12\">type</span><span class=\"mtk4\">, </span><span class=\"mtk12\">field_name</span><span class=\"mtk4\">)  </span><span class=\"mtk11\">REFLECTION_REGISTER_FIELD</span><span class=\"mtk4\">(type, field_name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk4\">()                    </span><span class=\"mtk11\">REFLECTION_REGISTER_END</span><span class=\"mtk4\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__REGISTER_PHASE__</span></span></code></pre>\n<p><code>STRUCT</code>가 <code>REFLECTION_REGISTER</code> 매크로를 가리키게 한 다음, 현재 상태를 <code>REGISTER_PHASE</code>로 만든다.</p>\n<p>이제 모든 준비가 완료되었으니, user.h 파일에서 각 상태 별로 한 번씩만 include가 되도록 만들어주자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#if</span><span class=\"mtk4\"> (</span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">__DECLARE_PHASE__</span><span class=\"mtk4\">) </span><span class=\"mtk1\">&amp;&amp;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">!</span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">__USER_DECLARED__</span><span class=\"mtk4\">)) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    </span><span class=\"mtk1\">||</span><span class=\"mtk4\"> (</span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">__REGISTER_PHASE__</span><span class=\"mtk4\">) </span><span class=\"mtk1\">&amp;&amp;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">!</span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">__USER_REGISTERED__</span><span class=\"mtk4\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#if</span><span class=\"mtk4\"> </span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">__DECLARE_PHASE__</span><span class=\"mtk4\">) </span><span class=\"mtk1\">&amp;&amp;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">!</span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">__USER_DECLARED__</span><span class=\"mtk4\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__USER_DECLARED__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#if</span><span class=\"mtk4\"> </span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">__REGISTER_PHASE__</span><span class=\"mtk4\">) </span><span class=\"mtk1\">&amp;&amp;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">!</span><span class=\"mtk15\">defined</span><span class=\"mtk4\">(</span><span class=\"mtk11\">__USER_REGISTERED__</span><span class=\"mtk4\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">__USER_REGISTERED__</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">STRUCT_BEGIN</span><span class=\"mtk1\">(</span><span class=\"mtk10\">user_t</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">STRUCT_FIELD</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, index)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">STRUCT_FIELD</span><span class=\"mtk1\">(</span><span class=\"mtk10\">std</span><span class=\"mtk1\">::string, name)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">STRUCT_END</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#endif</span></span></code></pre>\n<p>기존에는 #ifndef, #define ~ #endif 와 같이 단순히 중복 include를 막아줄 수 있었지만, 이제는 <code>DECLARE_PHASE</code>, <code>REGISTER_PHASE</code> 각각 한 번씩 include를 허용해주어야 하므로 상태를 따로 관리해야 한다.</p>\n<p>따라서 <code>USER DECLARED</code>, <code>REGISTERED</code> 상태 2개를 갖고,</p>\n<ul>\n<li><code>DECLARE_PHASE</code>에서는 DECLARED 상태가 아닐 때만 진입 가능하도록,</li>\n<li><code>REGISTER_PHASE</code>에서는 REGISTERED 상태가 아닐 때만 진입 가능하도록 매크로를 작성한다.</li>\n</ul>\n<p>이제 처음 #if 조건문에 의해, 각 상태마다 단 한 번의 include만 허용하게 된다.</p>\n<p>한가지 안타까운 점은, 실제 구조체를 선언하는 모든 header 파일에 위와 같은 안전자 지시 장치를 해주어야 한다는 것이다. 이는 생각보다 번거로운 작업이 될 수 있는데, file template을 잘 만들어서 쓰거나 하면 어느정도 해결할 수 있을 것 같다.</p>\n<p>여기까지 구조체를 선언, reflection 정보를 등록했고, 다음에는 등록한 reflection 정보를 사용하여 xml과 어떻게 bind할 것인지에 대해 살펴보자. 추가로 각 구조체의 version을 관리하여 어떻게 convert를 작성할 수 있을지도 고민해보도록 하자.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"이전 글에서는 자료구조가 선언된 header파일을 여러 번 include하면 문제가 발생했었다. 하지만 이리저리 참조가 되다보면 각 번역 단위에서 include…","fields":{"date":"June 09, 2012","shortdesc":""},"frontmatter":{"title":"c++에서 reflection 사용하기 4","tags":["c++","reflection"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/06/09/using-reflection-at-cpp-4/"}}}