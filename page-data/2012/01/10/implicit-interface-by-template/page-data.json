{"componentChunkName":"component---src-templates-page-tsx","path":"/2012/01/10/implicit-interface-by-template/","webpackCompilationHash":"34e50d707ffb94014347","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>상속을 통한 동적 다형성을 이용하려면, 명시적인 interface가 형성되어야 한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">game_object</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">update</span><span class=\"mtk1\">(</span><span class=\"mtk4\">float</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dt</span><span class=\"mtk1\">) = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">character</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">game_object</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">update</span><span class=\"mtk1\">(</span><span class=\"mtk4\">float</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dt</span><span class=\"mtk1\">) { }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">item</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">game_object</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">update</span><span class=\"mtk1\">(</span><span class=\"mtk4\">float</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dt</span><span class=\"mtk1\">) { }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>와 같이 interface와 이를 구현(implements)하는 구체 class를 작성하고</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::vector&lt;game_object*&gt; objects;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\">(objects.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(), objects.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(), [=] (game_object* obj) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">obj</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk11\">update</span><span class=\"mtk1\">(dt);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">});</span></span></code></pre>\n<p>이처럼 동일한 interface로 취급할 수 있도록 하나의 container에 각 구체 class들의 객체를 담고\niterating하면서 <code>update</code> 함수를 불러준다. 이 때 type은 <code>game_object *</code>이므로 <code>update</code>라는 함수가 있다는 것을 명시적으로 보장해 줄 수 있다.</p>\n<p>template을 쓰면 좀 더 유연해지는데, 굳이 <code>game_object</code>라는 interface를 명시적으로 두지 않아도 <code>update</code>라는 함수만 있으면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">character</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">update</span><span class=\"mtk1\">(</span><span class=\"mtk4\">float</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dt</span><span class=\"mtk1\">) { }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">item</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">update</span><span class=\"mtk1\">(</span><span class=\"mtk4\">float</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dt</span><span class=\"mtk1\">) { }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p><code>character</code>와 <code>item</code> 자체는 어쨌든 <code>update</code>라는 함수를 갖는다. 하지만 그 둘이 같은 interface를 갖는다는 명시적인 보장은 없다. (적어도 코드를 작성하는 사람이 눈으로 보고는 알 수 있겠다)</p>\n<p>이에 하지만 만약 둘을 처리하는 로직이 공통될 경우 (둘 다 <code>update</code>을 불러줘야할 경우)가 있을 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::vector&lt;character&gt; characters;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::vector&lt;item&gt; items;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\">(characters.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(), characters.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(), [=] (character&amp; ch) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ch</span><span class=\"mtk1\">.</span><span class=\"mtk11\">update</span><span class=\"mtk1\">(dt);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">});</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\">(items.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(), items.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(), [=] (item&amp; it) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">it</span><span class=\"mtk1\">.</span><span class=\"mtk11\">update</span><span class=\"mtk1\">(dt);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">});</span></span></code></pre>\n<p>그럼 위처럼 코드가 중복된다. 하지만 하는 동작이 동일하다면, (코드 형태가 유사하다면) 명시적인 interface 규약이 없어도 암시적으로 코드의 틀이 비슷하다는 것이니까 이 때 template을 쓴다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">_contTy</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">update_all</span><span class=\"mtk1\">(_contTy&amp; </span><span class=\"mtk12\">cont</span><span class=\"mtk1\">, </span><span class=\"mtk4\">float</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dt</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\">(</span><span class=\"mtk12\">cont</span><span class=\"mtk1\">.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">cont</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(), [=] (</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> _contTy::value_type&amp; val) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">val</span><span class=\"mtk1\">.</span><span class=\"mtk11\">update</span><span class=\"mtk1\">(dt);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>위 template 함수는 어떤 container를 인자로 받아서, 그 내부를 순회하며 각 element들의 <code>update</code> method를 불러준다.</p>\n<p>이 때 위 함수는</p>\n<ul>\n<li>container가 <code>begin</code>, <code>end</code> method를 갖고 있고,</li>\n<li>그 반환 값이 forward iterator 이고,</li>\n<li>container의 type이 <code>value_type</code>이라는 typename을 갖고,</li>\n<li>그 <code>value_type</code>은 <code>update</code>라는 method를 갖는다는</li>\n</ul>\n<p>암시적인 규약을 내포한다.</p>\n<p>이걸 왜 암시적이라고 부르냐하면, <code>update_all</code> 함수는 실제 사용되기 전까지 컴파일 대상이 아니며 사용되었을 때 해당 type으로 코드가 instantiate되면서 올바른 코드인지 검사하기 때문이다.</p>\n<p>즉 <code>std::vector&#x3C;character></code>라는 type으로 위 함수를 부르게 되면,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">update_all</span><span class=\"mtk1\">(std::vector&lt;character&gt;&amp; </span><span class=\"mtk12\">cont</span><span class=\"mtk1\">, </span><span class=\"mtk4\">float</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dt</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    std::</span><span class=\"mtk11\">for_each</span><span class=\"mtk1\">(</span><span class=\"mtk12\">cont</span><span class=\"mtk1\">.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">cont</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(), [=] (std::vector&lt;</span><span class=\"mtk4\">character</span><span class=\"mtk1\">&gt;::value_type&amp; val) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">val</span><span class=\"mtk1\">.</span><span class=\"mtk11\">update</span><span class=\"mtk1\">(dt);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>와 같은 적법한 코드가 생성되어, 이 때 <code>std::vector</code>가 <code>begin</code>, <code>end</code>, <code>value_type</code>을 가지고 있고, <code>value_type</code>인 <code>character</code>가 <code>update</code> 함수를 가지고 있으니 문제 없이 컴파일 되는 것이다.</p>\n<p>즉 사용되는 시점에 코드를 찍어내는 것이고 실행 중(runtime) 에 모종의 작업이 필요한 것이 아니므로 interface나 abstract class같은 vfptr을 생성하는 명시적인 interface가 필요없다는 것이다. (이렇게 생각해보면 명시적/암시적 interface 라고 이름 붙이는 것도 웃긴 일이다)</p>\n<p>template 함수의 또 하나의 장점은, 무시무시한 type inference와 코드 찍어내기로 인해 template 함수 내에서 요구하는 명세를 지키는 대상에 대해서는 모두 사용할 수 있게 해준다는 것이다.</p>\n<p>예를 들어,\n위 <code>update_all</code> 함수는 <code>vector</code>, <code>list</code>, <code>deque</code>, <code>set</code> 등 여러 stl container에 대해 사용 가능하기 때문에 굉장히 일반적인 함수라 할 수 있다. (generic 하다)</p>\n<p>생각해보니 단순히 프로그래밍 측면에서 위의 두 내용을 비교하는 것은 바람직하지 못한 것 같다. 다음 글에서는 vfptr과 template instantiate의 세부적 내용을 통해 둘이 어떻게 다르고 어떤 장단점이 있는지 자세히 보도록 하자.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"상속을 통한 동적 다형성을 이용하려면, 명시적인 interface가 형성되어야 한다.와 같이 interface와 이를 구현(implements)하는 구체 class를 작성하고이처럼 동일한 interface로 취급할 수 있도록 하나의 container…","fields":{"date":"January 10, 2012","shortdesc":""},"frontmatter":{"title":"template의 암시적 interface 요구","tags":["c++","template"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/01/10/implicit-interface-by-template/"}}}