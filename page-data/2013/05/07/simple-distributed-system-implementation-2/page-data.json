{"componentChunkName":"component---src-templates-page-tsx","path":"/2013/05/07/simple-distributed-system-implementation-2/","webpackCompilationHash":"3ce7c6393293ba3d24f1","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<ul>\n<li><a href=\"https://github.com/lacti/DistWork/tree/simplest\">Github: DistWork - simplest</a></li>\n</ul>\n<p>지난 번 글에서는 분산 처리 환경에 대한 구조를 대충 알아봤다. 이번 글에서는 대충 알아본 것 중 하나를 선택해서 C#으로 구현을 해볼 것이다.</p>\n<p>가장 간단해보이는 M-S 모델 (master-slave)을 C#으로 구현해보자.</p>\n<p>일단 구현하기에 앞서 간단히 설계도를 살펴보자.</p>\n<p><img src=\"images/mdf_arch.png\" alt=\"구현 설계도\"></p>\n<p>master에는 여러 slave가 연결한다. 각 연결된 slave는 master 내에 어떤 작업을 수행하는지/했는지 info를 갖는다. master에 command가 들어오면 수행할 work를 만든다. 연결된 slave의 info를 살펴보고 적절한 slave를 선택한 후 work를 보내준다<strong>(distribute)</strong>. 그러면 slave는 그 작업을 처리하고 결과를 master에게 보내주던가 한다.</p>\n<p>위 구현을 위해서는,</p>\n<ul>\n<li>c# network programming 기술</li>\n<li>c# object serialization 기술</li>\n</ul>\n<p>정도만 알면 된다.</p>\n<p>하지만 본 글에서 위 내용을 설명하는 것은 매우 무의미하기 때문에 이 부분에 대해서는 설명하지 않는다. 자세한 내용은 <a href=\"https://github.com/lacti/DistWork/tree/simplest\">소스 코드</a>의 <a href=\"https://github.com/lacti/DistWork/blob/simplest/DistWork/Util/AsyncSocketExtension.cs\">AsyncSocketExtension.cs</a>와 <a href=\"https://github.com/lacti/DistWork/blob/simplest/DistWork/Core/WorkSocketHelper.cs\">WorkSocketHelper.cs</a> 파일을 보면 된다.</p>\n<h2>구현</h2>\n<p>먼저 master와 slave가 주고 받을 작업의 추상 형태인 IWork interface부터 살펴보면 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IWork</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Execute</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">endPoint</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이 interface를 구현한 class가 Serializable하면 Master와 Slave간에 serialize/deserialize되어 전달될 수 있고, 전달된 후에 <code>Execute</code>를 호출해주면 되므로 사실상 RPC와 같은 형태가 된다. 이 때 <code>endPoint</code>의 Socket을 받는 이유는 수행한 결과에 대해 상대측으로 다시 결과를 전달하기 위함이다. (이는 마지막 예제에서 볼 수 있다.)</p>\n<p><code>Master</code> class는 <code>Slave</code>의 통신을 위한 <code>Socket</code>과, 각 <code>Slave</code>의 상태에 대한 Information을 갖는다. 그리고 작업 분산이 요청될 경우(<code>DistributeWork</code>) 적절한 <code>Slave</code>의 <code>Socket</code>을 고르기 위한 알고리즘 함수를 갖는다. Java같은 언어라면 interface로 해당 알고리즘을 분리하겠지만, C#이니 그냥 delegate로 빼서 관리한다.</p>\n<p>위 구현 사항을 분할해서 살펴보자. 먼저 Slave와 연결을 맺고 Slave가 전달하는 Work를 처리하기 위한 함수이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Master class</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Start</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">listener</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Socket</span><span class=\"mtk1\">(</span><span class=\"mtk12\">AddressFamily</span><span class=\"mtk1\">.</span><span class=\"mtk12\">InterNetwork</span><span class=\"mtk1\">, </span><span class=\"mtk12\">SocketType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Stream</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ProtocolType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Tcp</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">localEndPoint</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IPEndPoint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IPAddress</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Any</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_port</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Bind</span><span class=\"mtk1\">(</span><span class=\"mtk12\">localEndPoint</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Listen</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">true</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">clientSocket</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">listener</span><span class=\"mtk1\">.</span><span class=\"mtk11\">AcceptAsync</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk11\">ProcessSocket</span><span class=\"mtk1\">(</span><span class=\"mtk12\">clientSocket</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Exception</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk12\">e</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ProcessSocket</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_container</span><span class=\"mtk1\">.</span><span class=\"mtk11\">AddSocket</span><span class=\"mtk1\">(</span><span class=\"mtk12\">socket</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Connected from: &quot;</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">RemoteEndPoint</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">true</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">work</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ReceiveWork</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">work</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">socket</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Exception</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk12\">e</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Shutdown</span><span class=\"mtk1\">(</span><span class=\"mtk12\">SocketShutdown</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Both</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> { }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_container</span><span class=\"mtk1\">.</span><span class=\"mtk11\">RemoveSocket</span><span class=\"mtk1\">(</span><span class=\"mtk12\">socket</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>지정된 port에 bind된 socket이 <code>Slave</code>와 연결되면 그 <code>Socket</code>으로부터 <code>Work</code>를 하나씩 받아서(deserialize) 처리하는 형태이다. awaitable한 프로그램을 작성했기 때문에 managed thread pool이 적절히 잘 운영해준다.</p>\n<p><code>_container</code>는 <code>SocketContainer</code> 객체로 slave의 socket을 관리해준다. <code>SocketContainer</code>에서 관리하는 Socket 집합은 추후 작업을 분산시키기 위해 특정 slave를 선택할 때 사용된다.</p>\n<p><code>Slave</code>는 <code>Master</code>에 연결한 뒤, 역시 동일하게 <code>Master</code>로부터 <code>Work</code>를 받아서 처리하는 구조로 작성하면 된다. 때문에 이 부분은 <code>Master</code>의 코드와 크게 차이가 없다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Slave</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Start</span><span class=\"mtk1\">()</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">try</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Socket</span><span class=\"mtk1\">(</span><span class=\"mtk12\">AddressFamily</span><span class=\"mtk1\">.</span><span class=\"mtk12\">InterNetwork</span><span class=\"mtk1\">, </span><span class=\"mtk12\">SocketType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Stream</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">ProtocolType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Tcp</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_host</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_port</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">true</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">work</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ReceiveWork</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk12\">work</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">socket</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">Exception</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk12\">e</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>Slave</code>의 <code>Socket</code>을 관리하는 <code>SocketContainer</code>는 <code>Slave</code>의 연결이 동시 다발적으로 일어나므로 내부에 Lock을 가지고 Container를 관리하는 객체이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// SocketContainer class</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">ReaderWriterLockSlim</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_lock</span><span class=\"mtk1\"> =</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ReaderWriterLockSlim</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LockRecursionPolicy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">SupportsRecursion</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk4\">readonly</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Dictionary</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\">, </span><span class=\"mtk10\">SocketInformation</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">_sockets</span><span class=\"mtk1\"> =</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Dictionary</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\">, </span><span class=\"mtk10\">SocketInformation</span><span class=\"mtk1\">&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AddSocket</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">DoWriteLock</span><span class=\"mtk1\">(() =&gt; </span><span class=\"mtk12\">_sockets</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">socket</span><span class=\"mtk1\">, </span><span class=\"mtk12\">SocketInformation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Invalid</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RemoveSocket</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">DoWriteLock</span><span class=\"mtk1\">(() =&gt; </span><span class=\"mtk12\">_sockets</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Remove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">socket</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk11\">SelectSocket</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Func</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">KeyValuePair</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\">, </span><span class=\"mtk10\">SocketInformation</span><span class=\"mtk1\">&gt;&gt;, </span><span class=\"mtk10\">Socket</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">selector</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">DoReadLock</span><span class=\"mtk1\">(() =&gt; </span><span class=\"mtk11\">selector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_sockets</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ToList</span><span class=\"mtk1\">()));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>약간이나마 효율을 높이기 위해 <code>ReaderWriterLock</code>을 사용했다.\n재미있는 부분은 <code>SelectSocket</code>을 수행하는 부분인데, 이 과정에서는 모든 <code>Socket</code>과 그에 대한 <code>SocketInformation</code>을 순회하면서 적절한 <code>Socket</code>을 뽑아내야한다. 하지만 해당 자료구조를 순회하려면 자료구조가 Lock으로 보호된 상태이어야 하므로 Socket을 선택하는 selector를 delegator 형태로 받아서 <code>ReadLock</code> 구간 내에서 수행될 수 있도록 한다.</p>\n<p>그런데 작업을 분산시키기 위해 필요한 정보는 <code>Socket</code>, <code>SocketInformation</code> 뿐만 아니라 어떤 작업인지(<code>IWork</code>)의 정보도 필요하다. 때문에 <code>Master</code>에서는 이 정보까지 취합해서 적절한 <code>Slave</code>를 선택할 수 있도록 delegator를 제공한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">sealed</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">DistributeContext</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">readonly</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IList</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">KeyValuePair</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\">, </span><span class=\"mtk10\">SocketInformation</span><span class=\"mtk1\">&gt;&gt; </span><span class=\"mtk12\">Sockets</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">readonly</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IWork</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Work</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk4\">readonly</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SocketContainer</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_container</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>필요한 정보(<code>Socket</code>, <code>SocketInformation</code>, <code>IWork</code>)를 <code>DistributeContext</code>로 감싸서 <code>SelectSocketDecl</code>로 넘겨준다. 이 delegator는 <code>_container</code>의 <code>SelectSocket()</code> 내에서 수행되므로 <code>_container</code>의 ReadLock 내에서 수행된다. 이렇게 socket을 하나 선택하게 되면 해당 socket으로 work를 전달한다. 즉 해당 slave에게 work를 전달한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Master class</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">delegate</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SelectSocketDecl</span><span class=\"mtk1\">(</span><span class=\"mtk10\">DistributeContext</span><span class=\"mtk1\"> </span><span class=\"mtk12\">context</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SelectSocketDecl</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_socketSelector</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DistributeWork</span><span class=\"mtk1\">(</span><span class=\"mtk10\">IWork</span><span class=\"mtk1\"> </span><span class=\"mtk12\">work</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">socket</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_container</span><span class=\"mtk1\">.</span><span class=\"mtk11\">SelectSocket</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sockets</span><span class=\"mtk1\"> =&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_socketSelector</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">DistributeContext</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_container</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sockets</span><span class=\"mtk1\">.</span><span class=\"mtk11\">AsReadOnly</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">work</span><span class=\"mtk1\">)));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">socket</span><span class=\"mtk1\"> == </span><span class=\"mtk4\">null</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">NullReferenceException</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">socket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">SendWork</span><span class=\"mtk1\">(</span><span class=\"mtk12\">work</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>굉장히 간단한 구조로 분산 시스템을 만들어봤다.</p>\n<ul>\n<li>Master는 Slave의 연결을 기다리고, Slave가 연결되면 각 상태를 적절하게 고려해서 작업을 전달한다.</li>\n<li>Slave는 Master에게 연결한 뒤, Master의 작업을 기다리고 있다가 받는 즉시 처리해준다.</li>\n</ul>\n<h2>예제</h2>\n<p>소스 코드에 첨부된 간단한 예제 코드를 직접 보면 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"csharp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">[</span><span class=\"mtk10\">Serializable</span><span class=\"mtk1\">]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SlaveWork</span><span class=\"mtk1\"> : </span><span class=\"mtk10\">IWork</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Execute</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">endPoint</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">WriteLine</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Do my work: &quot;</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">endPoint</span><span class=\"mtk1\">.</span><span class=\"mtk12\">RemoteEndPoint</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">endPoint</span><span class=\"mtk1\">.</span><span class=\"mtk11\">SendWork</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MasterWork</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SlaveResult</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;TEST MESSAGE&quot;</span><span class=\"mtk1\">)));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">[</span><span class=\"mtk10\">Serializable</span><span class=\"mtk1\">]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SlaveResult</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">readonly</span><span class=\"mtk1\"> </span><span class=\"mtk4\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SlaveGeneratedMessage</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">SlaveResult</span><span class=\"mtk1\">(</span><span class=\"mtk4\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">SlaveGeneratedMessage</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">message</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">[</span><span class=\"mtk10\">Serializable</span><span class=\"mtk1\">]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MasterWork</span><span class=\"mtk1\"> : </span><span class=\"mtk10\">IWork</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk4\">readonly</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SlaveResult</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_result</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MasterWork</span><span class=\"mtk1\">(</span><span class=\"mtk10\">SlaveResult</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">result</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Execute</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Socket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">endPoint</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">WriteLine</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Do master work: &quot;</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">endPoint</span><span class=\"mtk1\">.</span><span class=\"mtk12\">RemoteEndPoint</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">WriteLine</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Received from slave: &quot;</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_result</span><span class=\"mtk1\">.</span><span class=\"mtk12\">SlaveGeneratedMessage</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Program</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Main</span><span class=\"mtk1\">(</span><span class=\"mtk4\">string</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">args</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">master</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Master</span><span class=\"mtk1\">(</span><span class=\"mtk7\">12345</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Task</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">StartNew</span><span class=\"mtk1\">(</span><span class=\"mtk12\">master</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Start</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Thread</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Sleep</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1000</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">slaveCount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">foreach</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Enumerable</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Range</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">slaveCount</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">var</span><span class=\"mtk1\"> </span><span class=\"mtk12\">slave</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Slave</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;127.0.0.1&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">12345</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">Task</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">StartNew</span><span class=\"mtk1\">(</span><span class=\"mtk12\">slave</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Start</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">master</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ConnectedSlaveCount</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">slaveCount</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">Thread</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Sleep</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Write</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Start!&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">true</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">master</span><span class=\"mtk1\">.</span><span class=\"mtk11\">DistributeWork</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SlaveWork</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">Thread</span><span class=\"mtk1\">.</span><span class=\"mtk11\">Sleep</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1000</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<ol>\n<li><code>Master</code>를 시작하고, <code>Slave</code>를 10개 만들어서 <code>Master</code>에 연결한다.</li>\n<li><code>Master</code>는 <code>SlaveWork</code> 객체를 만들어서 적절히 <code>Slave</code>에게 넘겨준다. 기본 알고리즘은 RoundRobin이므로 첫 번째 <code>Slave</code>부터 차례대로 일을 받게 된다.</li>\n<li><code>Slave</code>는 <code>SlaveWork</code>를 처리한 후, 수행한 결과를 <code>SlaveResult</code>에 담아서 <code>MasterWork</code> 객체를 <code>Master</code>에게 전달한다.</li>\n<li><code>Master</code>는 <code>MasterWork</code>를 받아서 그 내부에 있는 <code>SlaveResult</code>를 출력해준다.</li>\n</ol>\n<p>모두 네트워크로 전송되기 위해 <code>SerializableAttribute</code>를 붙이고 있다.</p>\n<h2>정리</h2>\n<p>본 글에서는 작업을 원격지에서 수행하고, 적절히 분산시킬 수 있는 분산 처리 환경을 C#으로 간단히 구현해봤다. Master와 Slave의 코드를 한 Assembly에 넣어놨기 때문에 Serialize/Deserialize를 수행함에 있어서 아주 편했다.</p>\n<p>하지만 제대로 된 분산 환경에서 Master와 Slave가 같은 코드를 공유한다는 것은 다양한 작업/변경된 작업을 수행함에 있어서 매우 불리하다. 왜냐하면 Slave가 수행되는 머신의 바이너리가 지속적으로 교체되어야 하기 때문이다.</p>\n<p>또한 위 코드는 단순한 RPC 작업을 수행함에 있어서 너무 많은 코드를 작성해야 한다. (적어도 두 개의 Work와 하나의 Result class를 작성해야 했다.)</p>\n<p>따라서 다음 글에서는</p>\n<ul>\n<li>Master/Slave가 코드를 공유하지 않아도 수행될 수 있는 구조와</li>\n<li>RpcWork와 WorkGroup 설계를 추가하여 보다 간편한 분산 작업을</li>\n</ul>\n<p>작성할 수 있도록 고민해보자.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"Github: DistWork - simplest지난 번 글에서는 분산 처리 환경에 대한 구조를 대충 알아봤다. 이번 글에서는 대충 알아본 것 중 하나를 선택해서 C#으로 구현을 해볼 것이다.가장 간단해보이는 M-S 모델 (master-slave…","fields":{"date":"May 07, 2013","shortdesc":""},"frontmatter":{"title":"분산 처리 환경 구현 2","tags":["distributed","c#"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2013/05/07/simple-distributed-system-implementation-2/"}}}