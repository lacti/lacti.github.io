{"componentChunkName":"component---src-templates-page-tsx","path":"/2008/08/31/Java-equals/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<ul>\n<li>boxing/unboxing이 지원되는 Java 5 이후부터 숫자형 Wrapper Class 객체에 대해 <code>equals</code>와 == 연산자는 과연 어떻게 동작할 것인가</li>\n<li>class 주제에 primitives라고 이야기하는 <code>String class</code>의 <code>equals</code>와 == 연산자는 과연 어떻게 동작할 것인가</li>\n<li>그리고, 만약 위의 객체들이 <code>Vector&#x3C;Object></code>에 들어가서 <code>Object</code>로 pointing될 때, <code>equals</code>와 == 연산자는 과연 어떻게 동작할 것인가!</li>\n</ul>\n<h2>Compare Object</h2>\n<ul>\n<li>Long(123) equals 123? <code>false</code></li>\n<li>Long(123) equals new Long(123)? <code>true</code></li>\n<li>Long(123) == 123? <code>true</code></li>\n<li>String(“hell”) equals “hell”? <code>true</code></li>\n<li>String(“hell”) == “hell”? <code>true</code></li>\n</ul>\n<h2>Compare Object with pointed Object</h2>\n<ul>\n<li>Long:Object(123) equals 123? <code>false</code></li>\n<li>Long:Object(123) equals new Long(123)? <code>true</code></li>\n<li>Long:Object(123) == 123? <code>true</code></li>\n<li>Long:Object(123) == new Long(123)? <code>false</code></li>\n<li>String:Object(“hell”) equals “hell”? <code>true</code></li>\n<li>String:Object(“hell”) == “hell”? <code>true</code></li>\n</ul>\n<h2>결론</h2>\n<p>숫자형이 Wrapper Class로 싸여있을 때는 == 로 비교해야 원하는 결과가 나온다.<br>\n<em>(boxing되어 Long 객체로 넘어가니까 equals에서 제대로 동작할 줄 알았는데 좀 의외였다.)</em></p>\n<p>String 객체는 친절하게도 ==나 equals 모두 가능하다.</p>\n<h2>추가</h2>\n<p>디버깅을 통해 원인을 찾았다</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">Long</span><span class=\"mtk1\"> </span><span class=\"mtk12\">l</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Long</span><span class=\"mtk1\">(</span><span class=\"mtk7\">123</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">l</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equals</span><span class=\"mtk1\">(</span><span class=\"mtk7\">123</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>이라는 코드에서 <code>l.equals</code> 함수의 인자로 들어가는 123은 boxing될 때 Integer로 boxing된다.\n<code>Long#equals</code>에서는 비교하는 대상의 객체가 <code>Long</code>의 instance가 아니니 <code>false</code>를 반환하는 것이다.</p>\n<h2>정리</h2>\n<p>boxing을 수행할 때는 해당 primitives의 변수형에 따라서 boxing을 수행하게 된다.\n따라서 literal 숫자형은 <code>Integer</code>형으로 boxing이 되고, long 형의 변수라면 Long형으로 boxing되는 것이다.</p>\n<p>즉,</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">Long</span><span class=\"mtk1\"> </span><span class=\"mtk12\">l</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Long</span><span class=\"mtk1\">(</span><span class=\"mtk7\">123</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">l</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equals</span><span class=\"mtk1\">((</span><span class=\"mtk10\">long</span><span class=\"mtk1\">) </span><span class=\"mtk7\">123</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>이처럼, 명시적으로 123을 <code>long</code>형으로 casting해주면 boxing될 때 <code>Long</code>으로 boxing되어 equals에서 참으로 나온다.</p>\n<p>생각해보니 당연한 이야기.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"boxing/unboxing이 지원되는 Java 5 이후부터 숫자형 Wrapper Class 객체에 대해 equals와 == 연산자는 과연 어떻게 동작할 것인가 class 주제에 primitives라고 이야기하는 String class의 equals…","fields":{"date":"August 31, 2008","shortdesc":"","slug":"/2008/08/31/Java-equals/"},"frontmatter":{"title":"Java의 equals의 세계","tags":["java"]}}},"pageContext":{"slug":"/2008/08/31/Java-equals/","older":{"slug":"/2008/07/28/ConsoleHandler-System-in-out-error-closing/","title":"ConsoleHandler와 System.in/out/error의 closing"},"newer":{"slug":"/2008/10/12/const-overloading/","title":"const overloading"}}},"staticQueryHashes":["848695393"]}