{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/01/09/typeof-and-container-of/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>gcc의 additional standard?라고 하는데 generics를 지원하기 위한 도구가 만능 void * 이외에 이런 것도 있었다.<br>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc/Typeof.html\">typeof</a></p>\n<p>어떤 struct 내부 변수의 주소와 그 struct의 typename을 알 때, struct 변수의 시작 주소를 알아내는 <a href=\"https://forum.falinux.com/zbxe/?document_srl=531954\"><code>container_of</code></a>라는 매크로에 대해 동아리 친구와 잠깐 이야기했던 적이 있다.</p>\n<p>간단히 설명하면 <code>((type *) NULL)->var</code>는 분명히 access violation이 나겠지만, 주소를 얻어내는 <code>&#x26;</code> 연산자가 붙으면\n컴파일러에서 실행 전(!)에 주소 값을 구해주기 때문에 <code>&#x26;((type *) NULL)->var</code>는 해당 struct 변수에서 멤버 변수의 주소가 얼마나 떨어져있나를 알 수 있게 된다.</p>\n<p>해당 멤버 변수의 주소를 알게 되면, 덕분에 저 “떨어진 길이”를 역으로 빼서 struct 변수의 주소를 구할 수 있다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","excerpt":"gcc의 additional standard?라고 하는데 generics를 지원하기 위한 도구가 만능 void * 이외에 이런 것도 있었다. typeof 어떤 struct 내부 변수의 주소와 그 struct의 typename을 알 때, struct…","fields":{"date":"January 09, 2011","shortdesc":"","slug":"/2011/01/09/typeof-and-container-of/"},"frontmatter":{"title":"typeof, container_of","tags":["c"]}}},"pageContext":{"slug":"/2011/01/09/typeof-and-container-of/","older":{"slug":"/2011/01/08/closed-descriptor-and-write-when-SIGPIPE/","title":"닫힌 descriptor와 write, SIGPIPE"},"newer":{"slug":"/2011/01/16/reference-sites-of-bash/","title":"bash 참조 사이트"}}},"staticQueryHashes":["848695393"]}