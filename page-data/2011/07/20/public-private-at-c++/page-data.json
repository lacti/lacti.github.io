{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/07/20/public-private-at-c++/","webpackCompilationHash":"809a166b1e846cf5f86f","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>예전에 동아리 선배님께서 어떤 코드를 수정하시면서 하셨던 말이 있다.</p>\n<blockquote>\n<p>“왜 멤버가 다 public 으로 되어있는거야!”</p>\n</blockquote>\n<p>요즘 읽고 있는 코드에서 몇 개의 class 들이 저런 문제점을 지니고 있다.<br>\n다음 예제를 보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Worker</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DoWork</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Run</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Append</span><span class=\"mtk1\">(Work*);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Remove</span><span class=\"mtk1\">(Work*);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Work* </span><span class=\"mtk11\">GetWork</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">volatile</span><span class=\"mtk1\"> </span><span class=\"mtk4\">long</span><span class=\"mtk1\"> workCount;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Work* workArray;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>(<em>volatile keyword를 사용한 이유는 다음에 설명하겠다</em>)</p>\n<p>저런 class가 있다고 할 때 저 interface만 보고 class가 무슨 일을 하는지 알 수 있을까?</p>\n<ul>\n<li>이름도 적절히 <code>Worker</code>이고,</li>\n<li><code>DoWork</code>와 <code>Run</code>함수를 보니 <code>Work</code>를 실행해주는 것 같고,</li>\n<li><code>Append</code>와 <code>Remove</code>가 있으니 뭔가 <code>Work</code>를 넣었다 뺐다도 할 수 있나보다.</li>\n<li>그리고 <code>GetWork</code> 라는게 있으니까 뭔가 <code>Work</code> 객체를 가져올 수도 있나보다.</li>\n<li>그리고 <code>WorkCount</code>, <code>WorkArray</code>가 있으니 내부에서 Work 객체를 저장하나보네?</li>\n</ul>\n<p><strong>그런데 public?</strong></p>\n<p>그리고 로직 코드를 읽고 나서야 <code>DoWork</code>, <code>Remove</code>, <code>GetWork</code> 함수는 오로지 <code>Worker</code> 내부에서만 사용되고, 외부에서는 <code>Run</code>과 <code>Append</code> 함수만 사용한다는 것을 알게 되었다.<br>\n그런데 심지어 <code>workCount</code>를 직접 접근하는 곳을 발견하였다 […]</p>\n<p>여기까지 읽은 사람이라면 수도 없이 많은 문제를 떠올리겠지만, 다 생략하고 몇 개만 보겠다.</p>\n<ul>\n<li>class의 역할을 파악하고 동작을 이해함에 있어 private의 역할은 꽤나 중요하다. public method는 외부에서 호출한다는 것이니까, 결국 이 class가 어떤 동작을 외부로 제공해 줄지를 결정하는 것이기 때문이다. 위의 class를 제대로 적어보면 아래와 같이 되어야하지 않을까. 개인적으로 private나 protected 구간도 여러 개로 설정해서 member, variable, static 을 또 나누어서 표현한다. 혹자는 아예 public method의 가장 아래 부분에 생성자, 소멸자를 적음으로써 이 밑으로는 볼 필요가 없다는 convention을 제시하기도 했다.</li>\n</ul>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Worker</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Run</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Append</span><span class=\"mtk1\">(Work*);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">long</span><span class=\"mtk1\"> </span><span class=\"mtk11\">GetWorkdCount</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DoWork</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Remove</span><span class=\"mtk1\">(Work*);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Work* </span><span class=\"mtk11\">GetWork</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">private:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">volatile</span><span class=\"mtk1\"> </span><span class=\"mtk4\">long</span><span class=\"mtk1\"> workCount;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Work* workArray;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<ul>\n<li>refactoring 등을 할 때 coverage 를 설정하기 위해서라도 private은 중요하다. 여기저기에서 호출하고 있는 method를 refactoring을 하는건 고난의 행군이 될 것이다. 최대한 외부로 노출되는 method 를 줄이고 private로 꽁꽁 묶어놔야 기능이나 설계를 개선할 때 수정으로 인해 영향을 받는 외부 부분이 줄어들면서 그나마 좀 나아지지 않을까 싶다.</li>\n</ul>\n<p>이 이야기는 결국 귀에 못이 박히도록 들어온 encapsulation 이야기인데, 이런 저런걸 고려해볼 때 friend 의 등장은 저걸 저해하는 것 같으면서도 잘 구성할 수 있게 해준다.</p>\n<p>private member variable이야 getter로 빼준다 할지라도, method의 경우는 접근할 방법이 없으니까.\n<del>(뭐 미친 척 하고 member function pointer 를 넘기면 되지 않을까 싶지만)</del></p>\n<p>그런데 결국 friend를 해주면 coverage에 구멍이 생기니까 별로 좋은 일은 아니다.<br>\njava의 package나 c#의 internal 같은 나름 우아한 방법으로 묶어주는 것도 좋을텐데 일단 C++은 그런게 없으니 namespace로 수작이라도 부려봐야지</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"예전에 동아리 선배님께서 어떤 코드를 수정하시면서 하셨던 말이 있다.“왜 멤버가 다 public 으로 되어있는거야!”요즘 읽고 있는 코드에서 몇 개의 class 들이 저런 문제점을 지니고 있다.다음 예제를 보자.(volatile keyword…","fields":{"date":"July 20, 2011"},"frontmatter":{"title":"class의 public과 private","tags":["c++"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2011/07/20/public-private-at-c++/"}}}