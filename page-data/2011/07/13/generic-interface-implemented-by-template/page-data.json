{"componentChunkName":"component---src-templates-blog-js","path":"/2011/07/13/generic-interface-implemented-by-template","webpackCompilationHash":"69d4b35bc62b6069aa17","result":{"data":{"markdownRemark":{"html":"<p>알고리즘 등의 일반화나 의존성 제거를 위해서 class 사이를 interface 로 쪼개는 경우가 있다.\n나는 C++ 보다는 Java가 더 익숙해서 template보다는 interface나 generics를 사용하는게 더 익숙한 편이다.</p>\n<p>그래서 저번 자료구조 숙제를 할 때도 당황했던 것이, <code>Iterator</code>나 <code>List</code> 에 대해 <code>Vector</code>나 <code>LinkedList</code>를 구현할 때, 먼저 Interface를 정의하고 그것에 대해 구현하려 했던 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Iterator</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> Iterator&amp; operator ++ (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">) = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> T&amp; operator -&gt; (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">) = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>물론 더 많은 method가 필요하겠지만 이정도로 하자.</p>\n<p>++ 연산자에 대해 overloading을 하면서 그걸 virtual로 만들고 있다. 그러면 Iterator를 상속받는 녀석은 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">VectorIterator</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Iterator</span><span class=\"mtk1\">&lt;T&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> Iterator&amp; operator ++ (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">/* pointing to next */</span><span class=\"mtk1\"> </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (*</span><span class=\"mtk4\">this</span><span class=\"mtk1\">); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> T&amp; operator -&gt; (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">) { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk3\">/* some value */</span><span class=\"mtk1\">; }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p><code>VectorIterator</code> 객체이지만 부모 type인 <code>Iterator&#x26; type</code>으로 가리킬 수 있다. reference type이니까 가능하다.</p>\n<p>이제 <code>List</code>를 정의한다. 이 Interface는 Iterator를 반환하는 함수가 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> Iterator </span><span class=\"mtk11\">ListIterator</span><span class=\"mtk1\">(</span><span class=\"mtk4\">void</span><span class=\"mtk1\">) = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>이 때 Iterator 객체에 대한 주소를 넘겨주게 되면 메모리 관리를 해줘야하는 번거로움이 있고, 상태를 갖는 객체라서 공유되면 안된다. (각각 다른 지점을 pointing 할 수 있다) 따라서 그냥 값 객체처럼 잘 캡슐화해서 Iterator 객체로 반환하는게 제일 바람직하다.</p>\n<p>그런데 망조가 보인다. Iterator type으로 반환해야하는데 <code>VectorIterator</code>를 어떻게 반환하지?</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Vector</span><span class=\"mtk1\"> : </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">List</span><span class=\"mtk1\">&lt;T&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">virtual</span><span class=\"mtk1\"> Iterator </span><span class=\"mtk11\">ListIterator</span><span class=\"mtk1\">(</span><span class=\"mtk4\">void</span><span class=\"mtk1\">) { </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">VectorIterator</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">); </span><span class=\"mtk3\">/* ERROR */</span><span class=\"mtk1\"> }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p><code>VectorIterator</code> class가 <code>Iterator</code> class를 상속받았어도 단순 객체일 때는 대입이 불가능하기 때문에 저 구문은 실행이 되지 않는다. 당초에 virtual을 쓰는 것 자체가 객체의 포인터에 의해 vfptr로 다형성을 사용해서 자식이 override한 함수를 쓸 수 있도록 <code>subtype polymorphism</code>을 일으키는건데, 메모리 관리 귀찮다고 그냥 객체를 쓴다고 될 일이 아니다.</p>\n<p>그렇다면 해당 문제를 해결하려면 어떻게 해야할까? <code>smart pointer</code> 같은거라도 끼얹나?</p>\n<p>당초에 접근이 잘못됬다.<br>\n동일한 interface를 만드는 이유는 해당 interface를 통해 실질적인 구현을 알 필요 없이, 실제 객체의 타입과 상관없이 그 객체를 사용하겠다는 것, 즉 의존성을 분리하겠다는 것이다.</p>\n<p><code>List</code>, <code>Iterator</code>를 만드는 것 자체가 순회하고자 하는 아래의 함수가 있을 때 <code>Vector</code>, <code>LinkedList</code>, <code>ArrayList</code>, <code>Queue</code>, <code>Deque</code> 중 뭐라도 그것이 동작할 수 있게 동일한 Interface를 만들어주기 위함이었던 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">for_each</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Iterator&amp; </span><span class=\"mtk12\">begin</span><span class=\"mtk1\">, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Iterator&amp; </span><span class=\"mtk12\">end</span><span class=\"mtk1\">, Functor </span><span class=\"mtk12\">functor</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (Iterator it = begin; it != end; ++it)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">functor</span><span class=\"mtk1\"> (*it);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>명시적인 <code>Iterator</code>라는 Interface가 있으면 컴파일러가 위의 코드를 명확히 검사해줄 것이고, 의존성도 줄어들 것이고, 저 함수는 가히 Generic하다고 부를 수 있을 것이고, 왠지 코딩 잘하는 것 같고, 다 좋은건가?</p>\n<p>하지만 위에서 언급한 Iterator에 대한 문제가 여전히 해결되지 않았다. (Java는 어차피 gc가 object를 수집하니까 다 reference 형태로 돌아다녀서 상관없고, 무엇보다 원래 느려서 다형성 부담따위 고민도 안한다)</p>\n<p>명시적으로 interface를 정의하지 않아도 template에 의해서 위 문제가 해결 가능하다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">Iterator</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">for_each</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Iterator&amp; </span><span class=\"mtk12\">begin</span><span class=\"mtk1\">, </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> Iterator&amp; </span><span class=\"mtk12\">end</span><span class=\"mtk1\">, Functor </span><span class=\"mtk12\">functor</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (Iterator it = begin; it != end; ++it)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">functor</span><span class=\"mtk1\"> (*it);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>맨 위에 template 구문이 추가된 것 빼고는 위의 <code>for_each</code> 문과 동일하다.\n이와 같이 코드를 작성할 경우 <code>List</code>, <code>Iterator</code>와 같은 명시적인 interface는 필요하지가 않다.\n단지 저 <code>for_each</code>에 들어가는 type 이 ++ 연산과 * 연산만 구현되면 되는 것이다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Vector</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Iterator</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        Iterator&amp; operator ++ (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        T&amp; operator * (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">class </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">LinkedList</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Iterator</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        Iterator&amp; operator ++ (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        T&amp; operator * (</span><span class=\"mtk4\">void</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>위에서 보면 <code>Vector::Iterator</code>나 <code>LinkedList::Iterator</code> 둘 다 <code>operator ++</code> 과 <code>operator *</code> 을 갖고 있다. 비록 Java 에서처럼 두 객체가 명시적으로 동일한 interface를 포함하고 있다는 명시적 코드는 없지만, 위의 <code>for_each</code> template 함수에 들어가게 되면 컴파일러가 각각의 type에 대한 <code>for_each</code>를 만들어내면서, ++ 과 * 연산자가 정의되어있는가를 검사해준다.</p>\n<p>즉, 명시적인 Interface가 없다면 Java 의 Generics에서는 불가능할 일이 C++에서는 어차피 컴파일러가 해당 코드를 만들어내면서 그 코드에 대해 다시 컴파일을 수행하니 가능하다는 것.<br>\n따라서 굳이 명시적인 interface class (pure abstract class)를 만들지 않아도 template을 통해 generic이 보장될 수 있다는 것. 다만 어떤 interface 가 필요한지에 대한 명확한 문서 or 주석 or 설명이 없다면 template 컴파일 에러를 해석해서 해당 함수를 구현해야하는 지옥을 맛보겠지만 [....]</p>\n<hr>\n<p>template이나 define에 대해서는 가끔 script 언어같이 느껴지는 것이,<br>\nscript 언어가 실행 중에 코드를 동적으로 해석하여 실행하는 것과 template이나 define macro가 컴파일 타임에 코드를 찍어내서 그걸 컴파일하여 코드를 다시 만들어내는 것이 비슷하게 느껴지기 때문이 아닐까 한다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","fields":{"date":"July 13, 2011","path":"/2011/07/13/generic-interface-implemented-by-template"},"frontmatter":{"title":"template에 의한 generic interface 정의","tags":["c++","template"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}