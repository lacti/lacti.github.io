{"componentChunkName":"component---src-templates-tag-tsx","path":"/tag/csharp/","webpackCompilationHash":"dff243b0bb0545126dc2","result":{"data":{"allMarkdownRemark":{"totalCount":13,"edges":[{"node":{"excerpt":"연세대학교 보안 동아리 Kroot에서 주최하는 CTF 2015에 참가했다. 보안이란 주제랑은 별로 관련이 없는 삶을 살아온지라 … 난이도 낮은 문제 + 힌트가 공개된 문제를 중점으로 풀었다.웹은 아는게 없는지라 바로 스킵했다(…)challensges에서 문제 내역을 확인할 수 있다…근데 지금 다 undefined…","fields":{"date":"February 20, 2015","slug":"/2015/02/20/yonsei-kroot-ctf-2015/"},"frontmatter":{"title":"kroot ctf 2015","tags":["c#","kroot","ctf"]}}},{"node":{"excerpt":"지난 글에서는 csv 데이터를 binary 파일로 serialize하여 데이터의 loading 속도를 올리는 방법에 대해 알아보았다. 해당 방법은 용량이 큰 csv 파일에 대해서도 효과가 크지만, 작게 분할된 많은 csv 파일을 다시 적절한 크기의 binary 파일로 재구성하여 작업할 때 더욱 효과를 크게 느낄 수 있다.하지만 csv 파일의 용량이 너무 크거나, 아니면 csv…","fields":{"date":"July 15, 2014","slug":"/2014/07/15/csharp-data-server-library-impl/"},"frontmatter":{"title":"c# 데이터 서버 라이브러리 구현","tags":["c#","data"]}}},{"node":{"excerpt":"csv data데이터 분석을 위해 데이터를 열심히 수집해서 몇 개의 csv 파일을 얻었고, 이 csv 파일들은 각각 약 1GB…","fields":{"date":"July 09, 2014","slug":"/2014/07/09/csharp-csv-to-binary/"},"frontmatter":{"title":"c# binary 파일을 사용해 csv 파일 빨리 읽기","tags":["c#","data"]}}},{"node":{"excerpt":"본 글은 동아리 친구의 질문인 ‘왜 게임 서버를 c++이 아닌 c#으로 작성하려 하냐?’에 대한 답변이다.간단히 c++과 c#의 차이를 통해 답변하면 이렇다.c++은 속도가 빠르다.c#은 기본 라이브러리가 풍부하다.c#은 표현력이 좋다. linq나 reflection의 도움을 받을 수도 있다.c#은 native에서 벌어지는 access violation 등으로부터 다소 안전하다.즉, c#으로 프로그래밍할 경우 c…","fields":{"date":"June 30, 2014","slug":"/2014/06/30/why-implements-csharp-server/"},"frontmatter":{"title":"왜 c#으로 서버를 작성하려 하나?","tags":["c#","server"]}}},{"node":{"excerpt":"WebServiceHost를 사용한 모바일 rest web api 서버를 만들어보자.msdn에 있을 법한 wcf 설명을 한참 함. msdn 참고본인이 구현한 코드를 설명해주는 방식. 추후 발표자료와 함께 올린다고 함ContractOperationContract로 web method를 노출DataContract로 serialize/deserialize할 class를 정의OnSerializing/ed, OnDeserializing…","fields":{"date":"May 27, 2014","slug":"/2014/05/27/ndc14-wcf-mobile-server/"},"frontmatter":{"title":"WCF를 이용하여 쉽게 만드는 모바일 게임서버","tags":["ndc14","c#","server"]}}},{"node":{"excerpt":"최근 회사에서 c#으로 네트워크 프로그래밍을 하고 있다. 일은 아니고 그냥 개인의 취향\n나름 c#도 속도가 괜찮다는 것을 보여주려고 시작을 했는데, 진행하면서 점점 보이는 결과는 영 좋지 않다.서버 과부하 테스트 프로그램을 c#으로 porting했다. 정말 과부하 테스트를 하려면 c++로 작성해야 맞지만 테스트 로직까지 c++로 작성하면 골치가 아프니 core는 c++, logic은 c…","fields":{"date":"February 14, 2014","slug":"/2014/02/14/secret-of-mswsock-dll/"},"frontmatter":{"title":"mswsock.dll의 비밀","tags":["optimization","network","c#"]}}},{"node":{"excerpt":"대만에 Localization(이라고 쓰고 번역이라고 읽는다)을 담당하시는 분이 있었는데 사람이 부족하다고 중국 번역도 시키고 있다. ~~대만은 번체, 중국은 간체를 사용하는데 이론상으로는 어느 정도 수준에서 글자의 1:…","fields":{"date":"September 08, 2013","slug":"/2013/09/08/zhconverter-simplified-traditional/"},"frontmatter":{"title":"ZhConverter (Simplified, Traditional)","tags":["c#"]}}},{"node":{"excerpt":"Github: DistWork - simpler지난 글에서 예고한 RpcWork와 Dll 전달 방법에 대해 알아보자.(원래는 WorkGroup까지 보려고 했는데 자세한 구현은 귀찮으니 나중에 기회가 되면 쓰도록 하겠다)RPC 구현RpcWork는 다음의 방법으로 쉽게 구현할 수 있다.원격지에서 수행할 함수를 담는 RpcWork class와 그 수행 결과를 담아 다시 돌려줄 ReturnWork class…","fields":{"date":"June 08, 2013","slug":"/2013/06/08/simple-distributed-system-implementation-3/"},"frontmatter":{"title":"분산 처리 환경 구현 3","tags":["distributed","c#","rpc"]}}},{"node":{"excerpt":"http://www.slideshare.net/lactrious/c-game-servergithub: source codec#의 기능들을 사용하여 게임 서버를 만드는 방법에 대해 간단히 서술해 보았다. c…","fields":{"date":"June 07, 2013","slug":"/2013/06/07/csharp-game-server/"},"frontmatter":{"title":"c# 게임 서버 만들기","tags":["server","c#","game","slide"]}}},{"node":{"excerpt":"마음에 드는 답변C# may not be faster, but it makes YOU/ME faster. That’s the most important measure for what I do. :)근데 질문에 답을하셔야지-_- 왜 자기가 하고 싶은 이야기를 하고 있어Stackoverflow: How much faster is C++ than C#?","fields":{"date":"May 19, 2013","slug":"/2013/05/19/how-much-faster-is-cpp-than-c-sharp/"},"frontmatter":{"title":"How much faster is C++ than C#?","tags":["c#"]}}},{"node":{"excerpt":"Github: DistWork - simplest지난 번 글에서는 분산 처리 환경에 대한 구조를 대충 알아봤다. 이번 글에서는 대충 알아본 것 중 하나를 선택해서 C#으로 구현을 해볼 것이다.가장 간단해보이는 M-S 모델 (master-slave)을 C#으로 구현해보자.일단 구현하기에 앞서 간단히 설계도를 살펴보자.master에는 여러 slave가 연결한다. 각 연결된 slave는 master…","fields":{"date":"May 07, 2013","slug":"/2013/05/07/simple-distributed-system-implementation-2/"},"frontmatter":{"title":"분산 처리 환경 구현 2","tags":["distributed","c#"]}}},{"node":{"excerpt":"잉여 컴퓨팅 자원을 십분 활용하여 처리량을 늘리기 위한 분산 처리 환경을 구축해보자.\n(hadoop, incredibuild 같은 프로그램을 만드려면 어떤 고민이 필요한지 생각해볼 수 있겠다.)자세하게 파고들면 밑도 끝도 없을테니 간단하게 살펴보자.분산 처리 환경을 구축할 때 적어도 다음의 항목에 대한 고민이 필요하다.플랫폼은 무엇을 사용할 것인가?언어는 무엇을 사용할 것인가?p2p로 만들 것인가, master-slave…","fields":{"date":"April 22, 2013","slug":"/2013/04/22/simple-distributed-system-implementation-1/"},"frontmatter":{"title":"분산 처리 환경 구현 1","tags":["distributed","c#"]}}},{"node":{"excerpt":"다른 Thread에서 UI component에 접근하려면 문제가 발생한다. (cross thread)\n동기화 이슈에서보면 당연한 이야기니 바로 해결책을 보자.System.Windows.Forms.Control에는 Invoke라는 UI thread로 작업을 delegate하는 method가 있다.이 녀석은 Delegate 를 받아서 그걸 내부에서 수행해주는데, C#에서는 어차피 외부 변수 capture…","fields":{"date":"March 01, 2012","slug":"/2012/03/01/c-sharp-ui-cross-thread-problem/"},"frontmatter":{"title":"C# UI Cross thread problem 해결","tags":["c#"]}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"c#"}}}