{"componentChunkName":"component---src-templates-page-tsx","path":"/2010/02/17/java-remotelib/","webpackCompilationHash":"b0f2540cd746525aebe2","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>심심한 상황에서 뭘 코딩할까 고민중에 java rmi app를 만들다가 고생한 기억이 있어서 이걸 좀 쉽게 사용할 수 있는 remote lib를 만들어보자는 생각에 시작하였다.</p>\n<h2>개발 목표</h2>\n<ol>\n<li>기존의 java rmi와 유사한 code로 remote method interface call을 구현할 수 있어야하고,</li>\n<li>쌍방통신이 쉽게 가능했으면 한다.<br>\n※ rmi는 보안상의 이유로 단방향을 기본적으로 지원하는데, 보통 클라이언트에서 서버의 함수를 호출하는 방식이다.<br>\n서버에서 클라이언트의 함수를 호출하려면 약간 설정해줘야하는게 더 있고, 실행하기가 귀찮아진다-_-</li>\n<li>또한 기본 socket을 이용하여 방화벽 혹은 가상ip로 인한 rmi binding 문제가 안 일어났으면 좋겠고,</li>\n<li>가능하다면 socket proxy를 사용해서 뭐가 날라가는지도 가려보고 싶고</li>\n<li>80 port를 이용, http message로 둔갑하여 netcare같이 packet 내용까지 보는 녀석에게도 안 걸렸으면 좋겠고,</li>\n<li>c, c++ 등의 다른 언어와도 통신이 가능했으면 좋겠다.</li>\n<li>server는 효율적이고 scalable하면 좋겠다.</li>\n</ol>\n<h2>구현</h2>\n<h3>기본 골격, object-portage</h3>\n<ol>\n<li>기본 java socket를 이용하여 서버와 클라이언트 간의 data 통신이 가능한 socket을 얻는다.</li>\n<li>이 socket의 stream에 objectstream을 끼워 쌍방에서 object를 주고 받을 수 있도록 한다.</li>\n<li>서버와 클라이언트가 object를 주고 받는다.</li>\n<li>이 때 각 socket에 대하여</li>\n</ol>\n<h3>요청/분기/반환, request/response dispatcher</h3>\n<ol>\n<li>서버와 클라이언트가 주고 받는 메시지 객체(object)를 class화 하여 주고 받는다.</li>\n<li>보내는 쪽(sender)는 상대방(receiver)에게 메시지(message)를 보내고(request) 답변(response)이 올 때까지 기다린다(wait)</li>\n<li>받는 쪽(receiver)는 상대방(sender)이 보낸(request) 메시지(message)를 적절한 함수가 처리(process)하게 한 뒤, 그 결과를 상대방에게 보낸다(send, response)</li>\n<li>기다리고 있던 보낸 쪽(sender)의 receiving thread는 아까 요청한 메시지에 대한 답변(response)를 받으면, wait하고 있던 send thread에 notify를 해서 lock을 풀어준다. 그리고 받은 response message를 반환받게 한다.</li>\n</ol>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// send part (pseudo)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">stream</span><span class=\"mtk1\">.</span><span class=\"mtk11\">send</span><span class=\"mtk1\">(message);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">responseMap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getId</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// receive part (pseudo)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">message = </span><span class=\"mtk12\">stream</span><span class=\"mtk1\">.</span><span class=\"mtk11\">receive</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">responseMap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">put</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getId</span><span class=\"mtk1\">(), message);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk12\">responseLock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getId</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">notify</span><span class=\"mtk1\">();</span></span></code></pre>\n<h3>함수 호출 메시지, function call message</h3>\n<ol>\n<li>함수 호출을 위한 정보(함수 이름, 함수 인자 타입parameters’ type, 함수 인자arguments)를 담는 call message class 작성</li>\n<li>함수 반환 값 전달 위한 return message class 작성</li>\n<li>수행 도중 예외 담을 exception message class 작성</li>\n</ol>\n<h3>원격객체 연결/호출, binding and call remote-object</h3>\n<ol>\n<li>제공할 함수에 대한 interface class 작성</li>\n<li>제공할 곳(server) 해당 interface를 구현하는 원격객체 작성, 이름(bindname) 부여, map에 등록(여러 원격객체 연결binding 가능)</li>\n<li>호출할 곳(client) 해당 interface에 대한 proxy instance 생성, method가 실행될 때 지정된 bindname과 호출한 method 정보를 call message(2-3)로 만들어서 server로 전달</li>\n<li>call message를 받은 server는 bindname으로 binding된 remote-object를 가져와서 reflection으로 해당 method을 invoke함</li>\n<li>그 결과값을 return message에 담아 client에게 전송</li>\n<li>client에서는 호출한 call message에 대한 return message가 올 때까지 대기(wait, 2-2)</li>\n</ol>\n<h3>호출 간 xml message 사용</h3>\n<ol>\n<li>기존의 방법은 java의 objectstream을 사용하였기 때문에 c, c++ 등과 통신 불가능. 따라서 <code>javax.beans.XMLEncoder</code>/<code>XMLDecoder</code>을 사용</li>\n</ol>\n<h3>http message로 위장</h3>\n<ol>\n<li><code>HTTP Header</code>를 붙임.</li>\n<li>받는 쪽에서 위와 같은 메시지를 받아서 header는 무시하고 body의 xml을 이용, remote message로 사용</li>\n<li>하지만 <code>XMLEncoder</code>/<code>XMLDecoder</code>는 serializable할 class의 기본생성자가 필수여야하고, 딱히 그에 대응되는 다른 언어(c or c++) library가 안 보여서 그냥 <code>XMLEncoder</code>, <code>XMLDecoder</code>를 만드는게 낫지 않을까 고민중(recursive한 object에 대한 serializing 문제를 해결 못함)</li>\n</ol>\n<pre class=\"default-dark vscode-highlight\" data-language=\"ignore\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">POST remote HTTP/1.1</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">Content-Type: xml</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">Content-Length: 1123</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">&lt;?xml...</span></span></code></pre>\n<h3>http message compaction</h3>\n<ol>\n<li>ZipStream을 이용, http body message 부분의 data를 plain/text가 아닌 zip data로 보냄. data 전송량을 줄일 수 있음</li>\n</ol>\n<h3>타언어와의 통신</h3>\n<ol>\n<li>c 계열의 통신을 가정했을 경우, 먼저 code generator를 통해 주고받을 argument들의 대응 객체 생성. 즉 java에서 작성한 bean에 대응되는 c의 구조체를 작성해야함.</li>\n<li>c 계열의 xml-decoder에서 해당 구조체에 값을 올바른 순서로 넣기 위한 RTTI에 버금가는 정보/순서를 구현해야함</li>\n<li>String, List 등 java에서 제공하는 기초 api를 c/c++로 converting하는 library 제작</li>\n<li>한글 등 unicode/multibyte 문자를 적절히 변환해주는 charset library 제작-_-(힘들다)</li>\n</ol>\n<h3>고가용서버</h3>\n<ol>\n<li>SelectableChannel과 Selector을 이용, server단 thread 개수 감소를 통한 프로그램 효율 증가</li>\n<li>ByteBuffer 등 nio를 이용한 stream 성능 향상</li>\n<li>ByteBufferPool, ThreadPool을 이용한 객체 재사용</li>\n</ol>\n<h2>현재 상황</h2>\n<p>일단 object-stream을 이용한 remote lib 구현 완료, 주석까지 달아서 지금 올리는 중.<br>\n성능 개선이 절실히 필요한데, 일단 오늘은 시간이 없으니 여기까지만-_-</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"심심한 상황에서 뭘 코딩할까 고민중에 java rmi app를 만들다가 고생한 기억이 있어서 이걸 좀 쉽게 사용할 수 있는 remote lib를 만들어보자는 생각에 시작하였다.개발 목표기존의 java rmi와 유사한 code로 remote method…","fields":{"date":"February 17, 2010","shortdesc":""},"frontmatter":{"title":"java remotelib 개발","tags":["java","rpc"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2010/02/17/java-remotelib/"}}}