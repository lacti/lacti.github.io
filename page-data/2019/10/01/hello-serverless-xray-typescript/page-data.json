{"componentChunkName":"component---src-templates-page-tsx","path":"/2019/10/01/hello-serverless-xray-typescript/","webpackCompilationHash":"3b8c3c3cfcb69a320067","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p><a href=\"https://aws.amazon.com/ko/xray/\">AWS X-Ray</a>는 AWS가 제공하는 tracing solution이다.</p>\n<blockquote>\n<p>AWS X-Ray는 개발자가 마이크로 서비스 아키텍처를 사용해 구축된 애플리케이션과 같은 프로덕션 분산 애플리케이션을 분석하고 디버그하는 데 도움이 됩니다. X-Ray를 사용해 자신이 개발한 애플리케이션과 기본 서비스가 성능 문제와 오류의 근본 원인 식별과 문제 해결을 올바로 수행하는지 파악할 수 있습니다. X-Ray는 요청이 애플리케이션을 통과함에 따라 요청에 대한 엔드 투 엔드 뷰를 제공하고 애플리케이션의 기본 구성 요소를 맵으로 보여줍니다. X-Ray를 사용하여 간단한 3-티어 애플리케이션에서부터 수천 개의 서비스로 구성된 복잡한 마이크로 서비스 애플리케이션에 이르기까지 개발 중인 애플리케이션과 프로덕션에 적용된 애플리케이션 모두 분석할 수 있습니다.</p>\n</blockquote>\n<p>설명이 기니까 대충 요약하면, 각 실행 segment의 <code>(begin, end, elapsed)</code>를 call tree 형태로 저장하여 시각화 해주고 이것이 여러 AWS component에서 발생할 경우 그에 대한 적절한 Service map을 보여주는 서비스란 뜻이다. 아래의 그림을 보면 좀 더 확실히 와닿는다.</p>\n<table>\n<thead>\n<tr>\n<th>Service map</th>\n<th>Traces</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://d1.awsstatic.com/product-marketing/X-Ray/X-Ray_Screenshot1.b5f74e2132e72c0d180bb2199d20238742753b2f.jpg\" alt=\"Service map\"></td>\n<td><img src=\"https://d1.awsstatic.com/product-marketing/X-Ray/X-Ray_Screenshot2.75f8f7dfe80e70b94f401291d1ae3cb0fc9b4ba3.png\" alt=\"Traces\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><a href=\"https://aws.amazon.com/ko/xray/features/\">https://aws.amazon.com/ko/xray/features/</a></li>\n</ul>\n<p><a href=\"https://serverless.com\">Serverless framework</a>에서는 <a href=\"https://serverless.com/blog/framework-release-v141/\">꽤 예전부터 Serverless stack에 X-Ray 연동을 지원하기 시작했다.</a> 이제 이와 같은 옵션을 <code>serverless.yml</code>에 추가하는 것만으로도 기본적인 API Gateway + Lambda의 Service map과 Traces를 확인할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"yaml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">provider</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">tracing</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">apiGateway</span><span class=\"mtk1\">: </span><span class=\"mtk4\">true</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">lambda</span><span class=\"mtk1\">: </span><span class=\"mtk4\">true</span></span></code></pre>\n<p>하지만 함수 단위로 직접 segment를 만들어서 모니터링을 하고 싶다거나, 연동되는 다른 AWS component간의 측정을 진행하려면 <a href=\"https://github.com/aws/aws-xray-sdk-node\"><code>aws-xray-sdk</code></a>를 사용해야 한다. 이 package는 이미 개발된 <a href=\"https://www.npmjs.com/package/aws-xray-sdk-express\"><code>express</code></a>, <a href=\"https://www.npmjs.com/package/aws-xray-sdk-restify\"><code>restify</code></a>, <a href=\"https://www.npmjs.com/package/aws-xray-sdk-mysql\"><code>mysql</code></a> 등에 대한 추적도 수행할 수 있는 라이브러리를 제공한다. 이에 대한 사용법은 <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-nodejs.html\">공식 문서</a>에서 잘 찾아볼 수 있으므로 이 글에서는 보다 간단한 수준으로 <strong>Serverless framework에서 aws-xray-sdk-core를 TypeScript + Webpack</strong>으로 사용하는 방법에 대해 정리해보려고 한다.</p>\n<p>진행되는 내용에 대한 전체 코드와 간단한 설명은 <a href=\"https://github.com/lacti/hello-serverless-xray-typescript\">GitHub: hello-serverless-xray-typescript</a>에서 확인이 가능하다.</p>\n<h3>프로젝트 시작</h3>\n<p>Serverless framework이 설치되어있다는 가정 하에, 다음과 같이 프로젝트를 시작할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\"># Install Serverless framework, first.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">npm i -g serverless</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\"># Prepare a working directory.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">mkdir hello-serverless-xray-typescript &amp;&amp; \\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">cd</span><span class=\"mtk1\"> hello-serverless-xray-typescript</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\"># Create the scaffold using a create command of Serverless cli.</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">sls create --template aws-nodejs-typescript --name hello-serverless-xray-typescript</span></span></code></pre>\n<p>그럼 이제 template으로부터 여러 파일이 자동으로 생성된다. TypeScript와 Webpack 설정도 기본으로 들어있어서 아주 편하다. 하지만 예전에 만들어진 template이므로 참조 라이브러리들이 오래되었을 수 있으니 모두 최신으로 갱신해준다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">yarn add -D @types/aws-lambda @types/node@10 serverless-webpack ts-loader typescript webpack</span></span></code></pre>\n<h3><code>aws-sdk</code> 추가</h3>\n<p><code>aws-xray-sdk</code>는 <code>aws-sdk</code>를 참조로 가진다. 하지만 <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\"><code>aws-sdk@2.488.0</code>는 AWS Lambda의 runtime에 이미 포함되어있으므로</a> 다음과 같이 <code>optionalDependencies</code>로 추가해주고 <code>webpack.config.js</code>에서는 <code>externals</code>에 넣어 bundle에 포함되지 않도록 해준다. <code>aws-sdk</code>는 너무 크기 때문에 bundle에 들어가면 용량이 급격히 증가하고, 이는 cold start 지연의 원인이 될 수 있다. <em>물론 사용하고자 하는 함수가 AWS Lambda에서 지원하는 <code>aws-sdk</code>보다 최신에만 있다면 어쩔 수 없이 <code>aws-sdk</code>를 포함해서 업로드해야 한다.</em></p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">yarn add -O aws-sdk@2.488.0</span></span></code></pre>\n<p>📄 webpack.config.js</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"diff\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">      filename: &quot;[name].js&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    },</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    target: &quot;node&quot;,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+   externals: [/aws-sdk/],</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    module: {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      rules: [</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        // all files with a &#96;.ts&#96; or &#96;.tsx&#96; extension will be handled by &#96;ts-loader&#96;</span></span></code></pre>\n<h3><code>aws-xray-sdk-core</code> 추가</h3>\n<p><code>aws-xray-sdk</code>는 <code>express</code>, <code>mysql</code> 등의 기반을 쉽게 추적할 수 있는 middleware를 모두 포함하고 있어 package 크기가 꽤 크다. 만약 추적할 대상이 AWS component나 직접 개발한 함수라면 <code>aws-xray-sdk-core</code>를 추가하는 것만으로도 충분하다. 다음과 같이 추가하자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">yarn add aws-xray-sdk-core</span></span></code></pre>\n<p>하지만 슬프게도 이 official package는 type definition을 가지고 있지 않다. 더욱이 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">DefinitelyTyped</a>에도 올라와있지 않다. 예전에 작성된 <a href=\"https://github.com/aws/aws-xray-sdk-node/pull/109\">index.d.ts에 대한 PR</a>이 있지만 작업 중간에 중단되었는지 그 상태로 계속 멈춰있다. 일단 급한대로 이 파일을 가져다가 <a href=\"https://github.com/lacti/hello-serverless-xray-typescript/blob/master/typings/aws-xray-sdk-core/index.d.ts\"><code>typings/aws-xray-sdk-core/index.d.ts</code></a>에 넣어주자.</p>\n<p>단, 이따 사용할 <code>captureFunc</code>, <code>captureAsyncFunc</code>의 경우 return type이 누락되어 있어 이것만 추가로 수정해주면 된다.</p>\n<p>📄 index.d.ts</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"diff\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">   ): SegmentLike | undefined;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">   export function getNamespace(): Namespace;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk8\">-  export function captureFunc(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+  export function captureFunc&lt;R&gt;(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     name: string,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     fcn: (subsegment: Subsegment) =&gt; R,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     parent?: SegmentLike</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk8\">-  ): void;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+  ): R;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk8\">-  export function captureAsyncFunc(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+  export function captureAsyncFunc&lt;R&gt;(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     name: string,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     fcn: (subsegment: Subsegment) =&gt; Promise&lt;R&gt;,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     parent?: SegmentLike</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk8\">-  ): void;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+  ): Promise&lt;R&gt;;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">   export function captureCallbackFunc&lt;A extends any[]&gt;(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">     name: string,</span></span></code></pre>\n<h3>Webpack 경고 해결</h3>\n<p><code>aws-xray-core-sdk</code>는 AWS Lambda의 Node.js runtime에 포함되어있지 않으므로 Webpack으로 함께 bundle을 만들어야 한다. 하지만 다음과 같은 경고가 나온다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">WARNING </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> ./node_modules/aws-xray-sdk-core/lib/patchers/call_capturer.js 41:32-47</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">Critical dependency: the request of a dependency is an expression</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/aws-xray-sdk-core/lib/segments/attributes/aws.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/aws-xray-sdk-core/lib/aws-xray.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/aws-xray-sdk-core/lib/index.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./handler.ts</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">WARNING </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> ./node_modules/colors/lib/colors.js 127:29-43</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">Critical dependency: the request of a dependency is an expression</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/colors/safe.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/winston/lib/winston/config.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/winston/lib/winston.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/aws-xray-sdk-core/lib/logger.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/aws-xray-sdk-core/lib/aws-xray.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./node_modules/aws-xray-sdk-core/lib/index.js</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"> @ ./handler.ts</span></span></code></pre>\n<p>그 이유는,</p>\n<ul>\n<li><code>aws-xray-core-sdk</code>가 사용하는 <code>winston</code>에서 <code>colors</code> 라이브러리를 사용하는데 이 때 <code>color-theme</code>를 동적으로 바꾸는 함수가 있어 runtime <code>require</code>를 하기 때문에 경고가 발생하고</li>\n<li><code>call_capture.js</code>에서는 AWSClient가 주고 받는 요청들의 일부(<code>whitelist</code>)만 capture하게 되는데, 이 값을 <code>json</code>으로 바로받아오는게 아니라 외부 <code>js</code> 파일을 통해 runtime에 <code>require</code>로 가져오는 기능이 <code>appendWhitelist</code>에 구현되어 있기 때문이다.</li>\n</ul>\n<p>때문에 전자의 경우는 쓸 일이 없으니 무시하면 되고, 후자의 경우는 만약 쓰게 된다면 굳이 <code>string</code> type을 넘겨 runtime <code>require</code>를 수행하도록 json을 넘기는 쪽으로 사용하면 문제가 없다. 다만 이 <code>call_capture</code>가 기본적으로 capture하는 attribute의 whitelist가 <a href=\"https://github.com/aws/aws-xray-sdk-node/blob/master/packages/core/lib/resources/aws_whitelist.json\"><code>aws-xray-sdk-core/lib/resources/aws_whitelist.json</code></a>에 있기 때문에 이를 Webpack이 제대로 bundle에 넣어주어야 AWSClient로 통신하는 요청에 대해서도 좀 제대로 capture가 될 수 있다.</p>\n<p>다행히 Webpack은 2버전부터 <code>require</code>하는 JSON 파일을 bundle에 알아서 잘 포함시켜준다. 때문에 별다른 신경을 쓸 필요가 없고, 안심하고 경고를 무시해도 되겠다. 하지만 빌드할 때마다 경고가 계속 나오는 것은 아주 거슬리므로 다음과 같이 정규식을 써서 해당 경고가 더 이상 출력되지 않도록 <code>webpack.config.js</code>를 고치도록 하자.</p>\n<p>📄 webpack.config.js</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"diff\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">  const path = require(&quot;path&quot;);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  const slsw = require(&quot;serverless-webpack&quot;);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+ const ignoreWarnings = [</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+   [/call_capturer.js/, /the request of a dependency is an expression/],</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+   [/colors.js/, /the request of a dependency is an expression/]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+ ];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  module.exports = {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    mode: slsw.lib.webpack.isLocal ? &quot;development&quot; : &quot;production&quot;,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    entry: slsw.lib.entries,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    externals: [/aws-sdk/],</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    module: {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      rules: [{ test: /\\.tsx?$/, loader: &quot;ts-loader&quot; }]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+   },</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+   stats: {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+     warningsFilter: warning =&gt; {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+       return ignoreWarnings.some(regexs =&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+         regexs.every(regex =&gt; regex.test(warning))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+       );</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk7\">+     }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  };</span></span></code></pre>\n<h3>Sleep 함수 측정</h3>\n<p>준비가 끝났으니 간단하게 Sleep 함수를 만들어서 잘 측정되는지 확인해보도록 하자. <code>handler.ts</code>를 다음과 같이 수정한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">APIGatewayProxyHandler</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;aws-lambda&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;source-map-support/register&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">captureAsyncFunc</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;aws-xray-sdk-core&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sleep</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">millis</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">captureAsyncFunc</span><span class=\"mtk1\">(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;sleep&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">seg</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">void</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">resolve</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">setTimeout</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk11\">resolve</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk12\">seg</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }, </span><span class=\"mtk12\">millis</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      )</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  );</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">hello</span><span class=\"mtk1\">: </span><span class=\"mtk10\">APIGatewayProxyHandler</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">10</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sleep</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">statusCode:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">200</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">body:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;OK&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p><code>sleep</code> 함수는 지정된 <code>millis</code>를 쉬는데 이 때 <code>aws-xray-core-sdk</code>의 <code>captureAsyncFunc</code> 함수를 사용해서 <code>segment</code>를 기록한다. 100ms씩 10번 쉬도록 작성하고 다음과 같이 Serverless stack을 배포한다. 물론 AWS credentials이 개발 환경에 설정되어있어야 한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">yarn deploy</span></span></code></pre>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">api keys:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  None</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">endpoints:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  GET - https://0000000000.execute-api.xx-xxxxxx-x.amazonaws.com/dev/hello</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">functions:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  hello: hello-serverless-xray-typescript-dev-hello</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">layers:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  None</span></span></code></pre>\n<p>배포가 끝나면 다음과 같이 보고서가 출력된다. 여기에 나온 Endpoint를 curl 등으로 호출한 뒤 AWS Management console의 X-Ray에 들어가보면 다음과 같은 Service map과 Traces를 볼 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th>Service map</th>\n<th>Traces</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://github.com/lacti/hello-serverless-xray-typescript/raw/master/_doc/service_map.png\" alt=\"Service map\"></td>\n<td><img src=\"https://github.com/lacti/hello-serverless-xray-typescript/raw/master/_doc/traces_detail.png\" alt=\"Traces\"></td>\n</tr>\n</tbody>\n</table>\n<h3>Capture Function</h3>\n<p>기본으로 제공되는 <code>captureFunc</code>와 <code>captureAsyncFunc</code>를 사용하면 이처럼 segment를 만들어서 X-Ray에서 확인할 수 있다. Promise를 포함하는 복잡한 함수의 수행 시간을 확인하거나 오류를 추적할 때 꽤나 도움을 받을 수 있을 것 같다.</p>\n<p>하지만 <code>segment</code>를 매번 close해주어야 하는 것은 매우 번거로운 일이므로 다음과 같은 간단한 helper를 만들어서 사용할 수도 있겠다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">captureSync</span><span class=\"mtk1\"> = &lt;</span><span class=\"mtk10\">Args</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk10\">any</span><span class=\"mtk1\">[], </span><span class=\"mtk10\">ReturnType</span><span class=\"mtk1\">&gt;(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">name</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">target</span><span class=\"mtk1\">: (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Args</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ReturnType</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Args</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">captureFunc</span><span class=\"mtk1\">(</span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">segment</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">target</span><span class=\"mtk1\">(...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">segment</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">segment</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">captureAsync</span><span class=\"mtk1\"> = &lt;</span><span class=\"mtk10\">Args</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk10\">any</span><span class=\"mtk1\">[], </span><span class=\"mtk10\">ReturnType</span><span class=\"mtk1\">&gt;(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">name</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">target</span><span class=\"mtk1\">: (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Args</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ReturnType</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Args</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">ReturnType</span><span class=\"mtk1\">&gt;((</span><span class=\"mtk12\">resolve</span><span class=\"mtk1\">, </span><span class=\"mtk12\">reject</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">captureAsyncFunc</span><span class=\"mtk1\">(</span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk12\">segment</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">target</span><span class=\"mtk1\">(...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">segment</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">resolve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">segment</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk11\">reject</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  );</span></span></code></pre>\n<p>이제 다음과 같이 사용할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">adder</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">a</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">b</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">captureSync</span><span class=\"mtk1\">(</span><span class=\"mtk12\">adder</span><span class=\"mtk1\">)(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk7\">20</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sleep</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">millis</span><span class=\"mtk1\">: </span><span class=\"mtk10\">number</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">void</span><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">resolve</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setTimeout</span><span class=\"mtk1\">(</span><span class=\"mtk12\">resolve</span><span class=\"mtk1\">), </span><span class=\"mtk12\">millis</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">captureAsync</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sleep</span><span class=\"mtk1\">)(</span><span class=\"mtk7\">1000</span><span class=\"mtk1\">);</span></span></code></pre>\n<h3>Capture AWSClient</h3>\n<p><code>S3</code>나 <code>DynamoDB</code> 등의 AWS component와의 통신을 capture하려면 처음 client 객체를 만들 때 한 번 <code>captureAWSClient</code>로 감싸주면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">S3</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;aws-sdk&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">captureAWSClient</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;aws-xray-sdk-core&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">s3</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">captureAWSClient</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">S3</span><span class=\"mtk1\">());</span></span></code></pre>\n<p>만약 AWS namespace 하위의 모든 client를 다 capture하려면 <code>captureAWS</code>를 사용하면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk4\">*</span><span class=\"mtk1\"> </span><span class=\"mtk15\">as</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rawAWS</span><span class=\"mtk1\"> </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;aws-sdk&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">captureAWS</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;aws-xray-sdk-core&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AWS</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">captureAWS</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rawAWS</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">s3</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">AWS</span><span class=\"mtk1\">.</span><span class=\"mtk10\">S3</span><span class=\"mtk1\">();</span></span></code></pre>\n<h3>마무리</h3>\n<p>AWS Serverless 개발을 하면서 복잡한 Lambda를 만드는 일이 별로 없었기 때문에 사실 이 Traces를 봐도 크게 쓸 일이 없었다. 다만 Lambda의 cold start나 최근에 만든 actor model의 성능 테스트를 하면서 이에 대한 metric을 좀 기록할 수 있는 요소가 필요했는데, 마침 X-Ray가 그 역할을 잘 해주어 많은 도움이 되었다. <del>게다가 100K개가 매달 Free-tier에 속하므로 가난뱅이 서버 모델을 만들기에 딱 좋다.</del></p>\n<p>다만 주로 Serverless framework + TypeScript + Webpack 기반을 사용했기 때문에 type definition도 없고 Webpack 경고도 발생하니 최근까지 잘 안 써봤다. 그러다가 우연히 좋은 기회(?)를 얻어 그 추진력으로 내부도 좀 보고 정리도 할 수 있었다. 이전까지는 우선순위가 낮은 선택 요소였는데 앞으로는 필수 기본 요소로 X-Ray를 사용해서 좀 더 측정/추적 가능한 Serverless Stack을 쌓아봐야겠다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"AWS X-Ray는 AWS가 제공하는 tracing solution이다.AWS X-Ray는 개발자가 마이크로 서비스 아키텍처를 사용해 구축된 애플리케이션과 같은 프로덕션 분산 애플리케이션을 분석하고 디버그하는 데 도움이 됩니다. X-Ray…","fields":{"date":"October 01, 2019"},"frontmatter":{"title":"Serverless + X-Ray + TypeScript","tags":["aws","serverless","xray","typescript"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/10/01/hello-serverless-xray-typescript/"}}}