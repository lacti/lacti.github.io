{"componentChunkName":"component---src-templates-page-tsx","path":"/2011/10/08/design-database/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>데이터베이스는 데이터가 모여있는 것이다.</p>\n<p>그 데이터를 보다 효율적으로 관리하기 위해 나온게 관리 시스템이고, 덕분에 데이터베이스라고 하면 데이터베이스 관리 시스템(Database Management System)으로 MSSQL이나 MySQL을 떠오르게 됬다.</p>\n<p>데이터들의 효율적인 관리를 하려다 보니 데이터들의 상관 관계를 고려해서, 중복된 데이터를 없애고 무결성이 깨지는 일이 없도록 제약조건을 걸게 되었다. 그러다가 아직까지 주도권을 잡고 있는 관계형 데이터베이스가 나왔고.</p>\n<p>덕분에 데이터베이스에 뭔가를 저장하기 위해서는 데이터베이스 테이블을 설계해야하고, 각 column들 간의 관계와 제약조건을 잘 설정해서, 중복된 데이터를 없애고 무결성을 지키는게 당연하게 여기게 되었다.</p>\n<p>그런데 사실 데이터베이스 시스템의 목적이 단순히 데이터의 persistence만을 위한 것이라면 데이터를 어떻게 저장하든 크게 상관 없는거잖아?</p>\n<p>게임 서버를 만든다고 할 때, 사용자의 정보를 데이터베이스로 관리한다고 해보자.\n그러면 사용자의 정보의 각 항목에 해당되는 column을 갖는 table을 만들어서 잘 넣어주고 관리할 수도 있고, 아니면 게임 서버에서 쓰는 구조체 binary를 그냥 blob으로 넣어버릴 수도 있겠다.</p>\n<p>당연히 양자간의 장단점이 존재하고(심지어 후자의 방법도 장점이 존재한다: parsing 비용이 안 든다!)\n뭐가 더 좋냐, 라고 하면 당연히 그 상황에서 더 적합한 방법이 더 좋은 방법이라고 할 수 밖에 없다.</p>\n<p>하지만 통상적으로 게임 내 사용자 정보 같은 경우는 column의 개수가 추가되고 변경될 일이 있으니까\nbinary로 넣어버리면 column이 하나 추가될 때마다 기존 사용자들의 데이터를 migration하느라 꽤 시간을 소모하게 될 것이다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","excerpt":"데이터베이스는 데이터가 모여있는 것이다. 그 데이터를 보다 효율적으로 관리하기 위해 나온게 관리 시스템이고, 덕분에 데이터베이스라고 하면 데이터베이스 관리 시스템(Database Management System)으로 MSSQL이나 MySQL…","fields":{"date":"October 08, 2011","shortdesc":"","slug":"/2011/10/08/design-database/"},"frontmatter":{"title":"데이터베이스 설계","tags":["database","design"]}}},"pageContext":{"slug":"/2011/10/08/design-database/","older":{"slug":"/2011/10/03/getter-and-setter-at-java/","title":"Java와 Getter/Setter"},"newer":{"slug":"/2011/11/06/flight-game-with-java-3/","title":"자바로 만드는 비행기 게임 3"}}},"staticQueryHashes":["848695393"]}