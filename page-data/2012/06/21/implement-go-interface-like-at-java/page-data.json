{"componentChunkName":"component---src-templates-blog-js","path":"/2012/06/21/implement-go-interface-like-at-java","webpackCompilationHash":"69d4b35bc62b6069aa17","result":{"data":{"markdownRemark":{"html":"<p>사실 go interface가 어떤 스펙을 가졌는지는 모르겠고\n그냥 [summerlight]님께서 그걸 c++로 구현하면 재미있겠다고 해서 시작을 한건데 대충 내용은 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">A</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">a</span><span class=\"mtk1\">(); </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">b</span><span class=\"mtk1\">(); </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">c</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">X</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">a</span><span class=\"mtk1\">() = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Y</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">b</span><span class=\"mtk1\">() = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Z</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">public </span><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">c</span><span class=\"mtk1\">() = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">A obj;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">X* x = </span><span class=\"mtk3\">/* 어떻게든 obj랑 연결 */</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">x-&gt;</span><span class=\"mtk11\">a</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// A::a() 함수가 호출됨</span></span></code></pre>\n<p>A라는 class는 a, b, c라는 함수를 가지고 있지만, 명시적으로 X, Y, Z interface를 구현하고 있지 않기 때문에 X, Y, Z pointer로 A 객체를 지칭할 수 없다. 하지만 암시적으로라도, 동일한 함수 signature가 존재한다면 interface로 지칭할 수 있게 해주는 것이 목적이다. (template 함수에서 암시적 interface를 요구하는 것을 객체화하여 접근할 수 있게 하였다고 봐도 되겠다)</p>\n<p>reflection을 사용하면 저걸 구현하는건 쉽다. 그렇지만 컴파일 시점에 대입 가능성을 보장해주려면 metaprogramming을 해야 한다.</p>\n<p>이 때 함수 signature를 비교하여 대입가능성을 검사해야 하는데, 문제는 함수 signature에 함수 이름이 포함된다는 것이다. 이름은 string literal이 될 것이고, 이를 compile time에 비교하려면 적어도 constexpr을 쓰거나 char typelist(variadic template)를 써야하는데, constexpr와 variadic template 모두 vs2012에서 지원 안하니 <del>(그렇다고 gcc를 쓸 생각은 없으니)</del> 일단 무시한다.</p>\n<p>결국 reflection을 써서 저 기능을 구현하면 되는데 c++로 reflection부터 만드려면 귀찮으니 java로 예제를 만들어 보자.</p>\n<p>안타깝게도 (혹은 다행스럽게도) java에서는 연산자 overloading이 없으므로, interface 객체에 대상 객체를 대입하기 위한 static 함수를 하나 만들 것이다.</p>\n<p>java reflection 중에는 <code>Proxy</code>라고 하여 해당 interface에 대한 method가 호출될 때, 그 method와 argument 정보를 하나의 함수로 모아주는(<code>InvocationHandler</code>) 좋은 class가 있다. (마치 ruby의 missing method나 php의 <code>__call</code>처럼)</p>\n<p>덕분에 어떤 interface를 넣어도 <code>Proxy</code>를 적절히 써서, 해당 interface의 함수가 호출될 때 이 정보를 대상 객체(target)의 함수로 잘 넘겨서 실행해주면 되겠다.</p>\n<p>이에 대한 코드는 다음과 같다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.lang.reflect.InvocationHandler;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.lang.reflect.Method;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">import</span><span class=\"mtk1\"> java.lang.reflect.Proxy;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">InfOp</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; </span><span class=\"mtk10\">T</span><span class=\"mtk1\"> </span><span class=\"mtk11\">assign</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">infClazz</span><span class=\"mtk1\">, </span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">infClazz</span><span class=\"mtk1\">.</span><span class=\"mtk11\">cast</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Proxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">newProxyInstance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">infClazz</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getClassLoader</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt;[] { infClazz }, new </span><span class=\"mtk11\">InvocImpl</span><span class=\"mtk1\">(</span><span class=\"mtk12\">target</span><span class=\"mtk1\">)));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    private static class </span><span class=\"mtk10\">InvocImpl</span><span class=\"mtk1\"> implements InvocationHandler {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">?</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">targetClazz</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvocImpl</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">super</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">target</span><span class=\"mtk1\"> = target;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">targetClazz</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getClass</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">@Override</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk11\">invoke</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\">, </span><span class=\"mtk10\">Method</span><span class=\"mtk1\"> </span><span class=\"mtk12\">method</span><span class=\"mtk1\">, </span><span class=\"mtk10\">Object</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">args</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                </span><span class=\"mtk4\">throws</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Throwable</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk10\">Method</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetMethod</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">targetClazz</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getMethod</span><span class=\"mtk1\">(</span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getName</span><span class=\"mtk1\">(),</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">method</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getParameterTypes</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetMethod</span><span class=\"mtk1\">.</span><span class=\"mtk11\">invoke</span><span class=\"mtk1\">(target, args);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>핵심은 <code>InvocationHandler::Invoke()</code> 내에 있는 코드이다. interface class에서 호출되는 method의 정보(name, parameter = 결국 signature)를 사용하여 target 객체의 method 정보를 찾는다. 그리고 invoke를 하면서 argument도 넘겨주면 끝이다.</p>\n<p>이제 다음과 같이 사용해볼 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"java\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Test</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">(</span><span class=\"mtk10\">String</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">args</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">Character</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ch</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Character</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">Drawable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dr</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">InfOp</span><span class=\"mtk1\">.</span><span class=\"mtk11\">assign</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Drawable</span><span class=\"mtk1\">.</span><span class=\"mtk12\">class</span><span class=\"mtk1\">, ch);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">dr</span><span class=\"mtk1\">.</span><span class=\"mtk11\">draw</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Drawable</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">draw</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Movable</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">move</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Character</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">draw</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">System</span><span class=\"mtk1\">.</span><span class=\"mtk12\">out</span><span class=\"mtk1\">.</span><span class=\"mtk11\">println</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;draw!&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">move</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">System</span><span class=\"mtk1\">.</span><span class=\"mtk12\">out</span><span class=\"mtk1\">.</span><span class=\"mtk11\">println</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;move!&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p><code>Character</code> class와 <code>Drawable</code> interface는 명시적인 구현 관계(implements)가 없지만, 어쨌든 <code>draw()</code>라는 동일한 함수 signature를 갖는다. 따라서 <code>Character</code> 객체를 적절히 proxy로 감싸서 <code>Drawable</code> interface와 연결하여 위 코드처럼 실행시킬 수 있는 것이다.</p>\n<p><del>조만간 compile time check를 포기한 c++ 버전도 올리도록 하겠다.</del></p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","fields":{"date":"June 21, 2012","path":"/2012/06/21/implement-go-interface-like-at-java"},"frontmatter":{"title":"go interface 구현하기","tags":["java"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}