{"componentChunkName":"component---src-templates-page-tsx","path":"/2019/08/01/api-gateway-custom-authorizer/","webpackCompilationHash":"b0f2540cd746525aebe2","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>API Gateway와 Lambda Proxy를 사용하여 간단한 HTTP/s API나 WebSocket API를 구축할 수 있다. AWS CloudFormation을 직접 사용하여 서비스를 구성할 수도 있고, 최근에 나온 <a href=\"https://docs.aws.amazon.com/cdk/latest/guide/home.html\">aws-cdk</a>을 사용하여 구성할 수도 있다. 물론 <a href=\"https://serverless.com\">Serverless framework</a>과 같이 vendor 종속적이지 않은 framework을 사용할 수도 있다. 어느 쪽을 사용하든 <a href=\"https://github.com/lucpod/aws-lambda-workshop/tree/master/lessons/01-simple-hello-world-api\">각각이</a> <a href=\"https://serverless.com/framework/docs/providers/aws/examples/hello-world/\">제공하는</a> template을 이용하면 <em>Hello world</em> 를 출력하는 HTTP/s API를 만드는데에 많은 시간이 필요하지 않다. <del>물론 처음일 경우, AWS 가입과 <a href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html\">credential</a> 등의 개발 환경의 설정에 많은 시간이 소요될 수 있다.</del></p>\n<p><em>Hello world</em> 를 출력하기 위한 구조, Lambda의 코드가 어디에 올라가서 어떻게 배치되고 API Gateway가 어떤 gateway를 구성하며 그 둘이 어떻게 proxy로 설정되어 HTTP event를 받아 처리할 수 있는지, <del>나중에 기회가 되면 정리해보겠지만</del> 이미 각 시스템마다 훌륭한 글이 많이 있다.</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started-hello-world.html\">AWS Serverless getting started</a></li>\n<li><a href=\"https://github.com/awslabs/serverless-application-model\">AWS Serverless Application Model</a></li>\n<li><a href=\"https://serverless.com/framework/docs/providers/aws/examples/hello-world/\">Hello world from Serverless framework</a></li>\n</ul>\n<p>어쨌든 구조를 간단히 이해하고 그 안에 로직을 추가하여 그럴싸한 서비스를 구축하는 것은 금방이다. 물론 단순히 API Gateway와 Lambda만으로 설명되는 서비스가 아니라 외부 자원이 필요한 서비스인 경우, 예를 들면,</p>\n<ul>\n<li>S3를 사용하여 파일을 보관하거나 교환한다거나</li>\n<li>CloudFront를 사용하여 S3에 저장된 파일을 static web site로 서비스할 수 있어야 한다거나</li>\n<li>SQS에 어떤 요청을 넣고 그 요청을 다른 서비스에서 처리할 수 있게 한다거나</li>\n<li>MySQL이나 DynamoDB 등의 데이터베이스를 사용하는 서비스를 구축한다거나</li>\n</ul>\n<p>할 경우에는 각 자원에 대한 선언을 CloudFormation으로 해준다거나, 혹은 AWS Management console에서 작업한 후 환경 변수나 AWS SSM으로 공급해 사용할 수 있도록 만들어주어야 하므로 조금 더 신경써야 하는 부분이 있다. 하지만 본 내용에서는 <em>그건 이미 다 했거나 혹은 할 필요가 없다고 가정하고</em>, 그렇게 만들어진 서비스의 <strong>인증</strong> 부분을 작성하는 방법을 알아보도록 하겠다.</p>\n<h2>API Gateway의 Authorizer</h2>\n<p>API Gateway로 들어오는 요청에 대한 인증을 처리하기 위한 방법은 3가지가 있다.</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html#api-gateway-lambda-authorizer-token-lambda-function-create\">token 기반의 Lambda authorizer</a></li>\n<li><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html#api-gateway-lambda-authorizer-request-lambda-function-create\">request 기반의 Lambda authorizer</a></li>\n<li><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html\">AWS Cognito user pool을 사용하는 authorizer</a></li>\n</ul>\n<p><a href=\"https://aws.amazon.com/cognito/\">AWS Cognito</a>는 유저 관리와 인증에 대한 많은 부분을 처리해주는 서비스로 기능도 많고 알아야할 것도 많다. 하지만 제대로 된 서비스를 운영하는 것이 아니라 간단한 개인 프로젝트를 진행할 때 사용하기에는 너무 알아야 할 것도 많고 관리할 것도 많아서 차라리 직접 만든다고 해도 좀 더 간단한 무언가를 쓰는 것이 낫다는 생각이 든다. 때문에 Cognito는 잠시 접어두고 Lambda authorizer로 아주 간단한 수준의 authorizer를 만드는 쪽을 선택하게 되었다.</p>\n<p><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\"><img src=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/images/custom-auth-workflow.png\" alt=\"Custom auth workflow\"></a></p>\n<p>AWS 문서의 공식 그림인데 이 그림이 모든 것을 설명해준다.</p>\n<ul>\n<li>API Gateway가 client로부터 요청을 받으면, token이냐 request냐에 따라 <em>적절한 정보를 추려서</em> <code>auth function</code>을 실행해준다.</li>\n<li><code>auth function</code>이 <code>Allow</code>나 <code>Deny</code> 여부를 포함하는 <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-output.html\"><code>policy document</code></a>를 반환하면 <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html\">authorizer 설정에 따라 그것을 cache</a>한다. 이는 동일한 auth 정보에 대해 <code>auth function</code>을 또 실행하지 않도록 해준다. 즉 비용 절감이 된다.</li>\n<li><em>allow</em> 가 되면 API Gateway의 HTTP event를 받을 Lambda나 EC2 endpoint가 호출된다.</li>\n</ul>\n<p>마치 http server framework의 security middleware처럼 router에 의해 request에 대한 handler가 호출되기 전에 미리 request 내의 auth 정보를 보고 요청을 drop하는 (빠르게 4xx로 응답해버리는) 과정과 같다. 재미난 점은 <code>auth function</code>이 만들어진 policy가 cache될 수 있다는 점이고, 덕분에 <code>auth function</code>의 lambda call 비용을 절약할 수 있을 뿐만 아니라, <code>Deny</code> policy가 cache되었을 경우 API Gateway는 <code>auth function</code>도, proxy endpoint도 부르지 않고 응답을 해버리는데 <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-pricing.html\">이 때 비용이 부과되지 않는다는 것이다.</a></p>\n<blockquote>\n<p>Calling methods with the authorization type of <code>AWS_IAM</code>, <code>CUSTOM</code>, and <code>COGNITO_USER_POOLS</code> are not charged for authorization and authentication failures.</p>\n</blockquote>\n<p>이는 비용 최적화 측면에서 꽤 유리한데,</p>\n<ul>\n<li>정상적인 상황에서도 모든 lambda handler가 auth를 수행하기 위한 시간을 소모하지 않고 하나의 <code>auth function</code>을 공유하는 여러 handler에 대해 <code>auth function</code>의 policy가 cache되어 auth cost를 1회로 줄일 수 있고,</li>\n<li>그마저도 <code>auth function</code>에서 JWT의 <code>verify</code> 만 수행한다면 매번 DB 등의 서버 측 state를 확인하는 것에 비해 최소한의 비용으로 인증이 가능할 것이고,</li>\n<li>잘못된 인증을 요구하는 경우에도 1회 수행 이후 cache된 deny policy에 의해 API Gateway 비용조차 부과되지 않으므로 <del>간단한</del> 공격에 대해서는 어느 정도 비용 방어가 될 수 있겠다.</li>\n</ul>\n<p>물론 무작위 인증 토큰을 포함하는 DDoS의 공격은 이 수준으로 방어하기는 어려운데 이 때에는 <a href=\"https://aws.amazon.com/waf/\">WAF</a>를 사용해서 <em>진지한</em> 방어를 고민해야겠다. 그래도 예전처럼 API Gateway + Lambda proxy의 2-tier 모델보다는 공격 상황에서도 어느 정도 비용 방어가 되기 때문에 인증이 필요한 서비스의 구축이 필요하다면 Lambda auhtorizer는 유의미한 선택이라 할 수 있다.</p>\n<h2>Lambda Authorizer</h2>\n<p>token 기반의 인증과 request 기반의 인증의 큰 차이점은 <code>auth function</code>에서 받는 <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-input.html\"><code>event</code>에 포함된 정보</a>이다. 둘 다 어떤 method를 실행하려 했는지는 <code>event.methodArn</code>을 통해 받을 수 있지만 인증에 필요한 정보를 어느 정도로 추려주느냐에서 차이가 있다.</p>\n<ul>\n<li>token 기반은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\">HTTP Authorization</a>으로 전달되는 정보만 <code>event.authorizationToken</code>로 넘어온다.</li>\n<li>request 기반은 <code>HTTP header</code>, <code>queryString</code>, <code>pathParameters</code>, <code>stageVariables</code> 정보를 받을 수 있다. 때문에 token 기반을 사용할 때 받을 수 있는 정보를 포함하여 거의 대부분의 HTTP 요청 정보를 받을 수 있다고 볼 수 있다.</li>\n</ul>\n<p>Basic authentication을 사용하여 인증을 진행할 때에는 <em>token 기반</em> 의 인증으로도 충분하다. <code>HTTP Authorization</code> header에 필요한 정보가 모두 포함되어있기 때문이다. 물론 이 예제는 HTTP/s API를 사용하기 때문에 token과 request 두 방식 모두 사용할 수 있어서 선택이 가능하고, 만약 <strong>WebSocket API를 사용하는 경우는 request 기반만 사용할 수 있으므로 이 점에 주의해야 한다.</strong></p>\n<p>Basic authentication으로 전달되는 id와 password가 올바르다면 이에 대한 session을 유지해야 하는데 이를 위해 따로 서버에서 state를 관리하고 싶지는 않으므로 좀 더 편한 방식인 <a href=\"https://en.wikipedia.org/wiki/JSON_Web_Token\">JWT</a>를 사용할 것이다. 이를 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Secure_and_HttpOnly_cookies\">HttpOnly, Secure Cookie</a>로 전달해서 추후 인증에서도 사용하도록 할 수 있지만 여기서는 token 기반의 인증을 사용하므로 이 JWT 값도 <code>HTTP Authorization</code> header의 <a href=\"https://tools.ietf.org/html/rfc6750\"><code>Bearer</code> scheme</a>으로 전달하도록 한다. 이제</p>\n<ul>\n<li>JWT를 발급할 수 있는 login API와</li>\n<li>그 이후에 접근할 수 있는 간단한 API와</li>\n<li>그 인증을 해줄 수 있는 auth function을</li>\n</ul>\n<p>만들어보도록 하겠다. <a href=\"https://github.com/lacti/serverless-custom-authorizer-example\">전체 예제는 이 쪽에서 확인해볼 수 있다.</a></p>\n<h3>Login API</h3>\n<p><a href=\"https://tools.ietf.org/html/rfc7617\">HTTP Basic authentication</a>을 사용한다고 하면 인증 요청은 다음과 같이 HTTP Header로 전달된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"yaml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">Authorization</span><span class=\"mtk1\">: </span><span class=\"mtk8\">Basic BASE64(&quot;id:password&quot;)</span></span></code></pre>\n<p>이를 위해 <code>delimiter</code>를 기준으로 앞뒤를 나누는 함수와 base64를 decode하는 함수를 먼저 만들어둔다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">splitByDelimiter</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">, </span><span class=\"mtk12\">delim</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pos</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk11\">indexOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">delim</span><span class=\"mtk1\">) : -</span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pos</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> ? [</span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk11\">substr</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pos</span><span class=\"mtk1\">), </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk11\">substr</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pos</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">)] : [</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">decodeBase64</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">input</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">Buffer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">from</span><span class=\"mtk1\">(</span><span class=\"mtk12\">input</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;base64&quot;</span><span class=\"mtk1\">).</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;utf8&quot;</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>이제 <code>login API</code>를 작성할 수 있다. 이 함수는 일반 HTTP/s API이므로 <code>APIGatewayProxyEvent</code>의 <code>headers</code>로부터 <code>Authorization</code> 값을 가져와서 id와 password 부분을 얻어낸 후 비교하고, 기대된 값이면 JWT를 발급하여 반환한다. JWT를 발급하는 것은 <a href=\"https://github.com/auth0/node-jsonwebtoken\">라이브러리</a>를 사용해서 간단하게 수행할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jwtSecret</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;verySecret&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">admin</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">id:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;test&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">password:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;1234&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">login</span><span class=\"mtk1\">: </span><span class=\"mtk10\">APIGatewayProxyHandler</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">splitByDelimiter</span><span class=\"mtk1\">(</span><span class=\"mtk12\">event</span><span class=\"mtk1\">.</span><span class=\"mtk12\">headers</span><span class=\"mtk1\">[</span><span class=\"mtk8\">&quot;Authorization&quot;</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot; &quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pw</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">splitByDelimiter</span><span class=\"mtk1\">(</span><span class=\"mtk11\">decodeBase64</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;:&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">accepted</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">type</span><span class=\"mtk1\"> === </span><span class=\"mtk8\">&quot;Basic&quot;</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">admin</span><span class=\"mtk1\">.</span><span class=\"mtk12\">id</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">pw</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">admin</span><span class=\"mtk1\">.</span><span class=\"mtk12\">password</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">accepted</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">statusCode:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">401</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">body:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;Unauthorized&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">jwt</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sign</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> }, </span><span class=\"mtk12\">jwtSecret</span><span class=\"mtk1\">, { </span><span class=\"mtk12\">expiresIn:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;30m&quot;</span><span class=\"mtk1\"> });</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">statusCode:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">200</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">body:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stringify</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>정상적인 요청이라면 JWT가 반환되고 그렇지 않다면 401 응답이 반환될 것이다.</p>\n<h3>Auth function</h3>\n<p>이제 이후에는 생성된 JWT로만 요청을 하게 될 것이므로 이 토큰의 유효성을 검증하는 <code>auth function</code>은 간단하게 작성할 수 있다. 이 token은 <a href=\"https://tools.ietf.org/html/rfc6750\">Bearer Authorization</a>으로 전달되므로 그 값을 받아 <a href=\"https://github.com/auth0/node-jsonwebtoken\">라이브러리</a>로 유효성을 검사한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">auth</span><span class=\"mtk1\">: </span><span class=\"mtk10\">CustomAuthorizerHandler</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">type</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">splitByDelimiter</span><span class=\"mtk1\">(</span><span class=\"mtk12\">event</span><span class=\"mtk1\">.</span><span class=\"mtk12\">authorizationToken</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot; &quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allow</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">type</span><span class=\"mtk1\"> === </span><span class=\"mtk8\">&quot;Bearer&quot;</span><span class=\"mtk1\"> &amp;&amp; !!</span><span class=\"mtk12\">jwt</span><span class=\"mtk1\">.</span><span class=\"mtk11\">verify</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">jwtSecret</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">principalId:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;user&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">policyDocument:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">Version:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;2012-10-17&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">Statement:</span><span class=\"mtk1\"> [</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk12\">Action:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;execute-api:Invoke&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk12\">Effect:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allow</span><span class=\"mtk1\"> ? </span><span class=\"mtk8\">&quot;Allow&quot;</span><span class=\"mtk1\"> : </span><span class=\"mtk8\">&quot;Deny&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk12\">Resource:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">event</span><span class=\"mtk1\">.</span><span class=\"mtk12\">methodArn</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      ]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>token의 유효성 여부에 따라 허가 여부를 결정해서 Policy를 만들어주면 된다. 이 때 Resource에 범위를 적절히 설정해주어야 하는데, <strong>이 예제는 간단해서 요청한 <code>methodArn</code>을 그대로</strong> 전달한다. 물론 API가 여러 개일 경우 단일 Resource를 포함하는 allow policy가 여러 개 생성되거나 범위 Resource를 포함하는 allow policy가 생성되어야 한다. 그렇지 않으면 <strong>X API를 요청할 때 만들어져 cache된 policy로 Y API를 요청할 때에도 사용하게 되므로 <code>Resource</code>가 맞지 않아 제대로 허용되지 않을 수 있다.</strong></p>\n<p>이를 위해 간단히 policy의 cache를 끄는 방법도 있지만 이 경우 <code>auth</code> handler가 매번 실행되므로 비용이나 성능 최적화 측면에서 손해를 보게 된다. 때문에 <code>event.methodArn</code>을 적절히 사용하여 범위로 허용해 줄 수 있도록 사용해야 한다.</p>\n<h4>Allow many functions</h4>\n<p><code>methodArn</code>의 규격은 다음과 같으므로 <code>stage</code>와 <code>httpVerb</code>를 적당히 <code>*</code>로 정해주면 되겠다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"yaml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk8\">arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]</span></span></code></pre>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> [, , , </span><span class=\"mtk12\">region</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">apiId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">stage</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">event</span><span class=\"mtk1\">.</span><span class=\"mtk12\">methodArn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">split</span><span class=\"mtk1\">(</span><span class=\"mtk5\">/</span><span class=\"mtk8\">[</span><span class=\"mtk5\">:/</span><span class=\"mtk8\">]</span><span class=\"mtk5\">/</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">scopedMethodArn</span><span class=\"mtk1\"> =</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  [</span><span class=\"mtk8\">&quot;arn&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;aws&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;execute-api&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">region</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">apiId</span><span class=\"mtk1\">].</span><span class=\"mtk11\">join</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;:&quot;</span><span class=\"mtk1\">) +</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk8\">&quot;/&quot;</span><span class=\"mtk1\"> +</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  [</span><span class=\"mtk12\">stage</span><span class=\"mtk1\">, </span><span class=\"mtk3\">/* method= */</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;*&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk3\">/* function= */</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;*&quot;</span><span class=\"mtk1\">].</span><span class=\"mtk11\">join</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;/&quot;</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>새롭게 만들어진 <code>methodArn</code>은 이번 요청에 수행될 Lambda function 뿐만 아니라 다른 httpVerb의 resource도 실행 가능하도록 <code>*</code>으로 넓게 지정되었다. 이제 이 policy가 cache될 것이고 다른 httpEndpoint가 호출되어도 범위로 지정된 <code>methodArn</code>에 의해 Lambda 수행 허가가 문제 없이 이루어질 것이다.</p>\n<p>물론 이렇게 간단히 <code>*</code>로 지정하기 어렵고 매번 <code>auth function</code>이 판단을 해야 하는 경우도 있다. 이 경우는 오히려 policy cache를 사용하지 않도록 설정해야 하는데 <code>Serverless framework</code>에서는 <code>resultTtlInSeconds</code>를 <code>0</code>으로 지정하면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"yaml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">authorizer</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">name</span><span class=\"mtk1\">: </span><span class=\"mtk8\">auth</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">resultTtlInSeconds</span><span class=\"mtk1\">: </span><span class=\"mtk7\">0</span></span></code></pre>\n<h3>Hello API</h3>\n<p>이제 테스트를 위해 사용할 간단한 GET API를 만들어둔다. 이 함수는 <code>auth function</code>이 <code>allow policy</code>를 반환할 경우 불리게 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">hello</span><span class=\"mtk1\">: </span><span class=\"mtk10\">APIGatewayProxyHandler</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">statusCode:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">200</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">body:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stringify</span><span class=\"mtk1\">(</span><span class=\"mtk12\">event</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<h3>serverless.yml</h3>\n<p>이제 작성한 함수들을 배포될 수 있도록 <code>serverless.yml</code>에 등록한다. <code>login API</code>는 <code>auth</code> 없이 늘 하던대로 등록하면 되고, <code>auth function</code>로 Lambda로 배포될 수 있도록 <code>functions</code>에 추가해준 뒤, <code>hello API</code>의 <code>http.authorizer</code>에 <code>auth</code>를 연결해주면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"yaml\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">service</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">name</span><span class=\"mtk1\">: </span><span class=\"mtk8\">hello-custom-authorizer</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">plugins</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  - </span><span class=\"mtk8\">serverless-webpack</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">provider</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">name</span><span class=\"mtk1\">: </span><span class=\"mtk8\">aws</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">runtime</span><span class=\"mtk1\">: </span><span class=\"mtk8\">nodejs10.x</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">region</span><span class=\"mtk1\">: </span><span class=\"mtk8\">ap-northeast-2</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">functions</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">login</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">handler</span><span class=\"mtk1\">: </span><span class=\"mtk8\">handler.login</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">events</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      - </span><span class=\"mtk4\">http</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk4\">method</span><span class=\"mtk1\">: </span><span class=\"mtk8\">post</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk4\">path</span><span class=\"mtk1\">: </span><span class=\"mtk8\">login</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">auth</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">handler</span><span class=\"mtk1\">: </span><span class=\"mtk8\">handler.auth</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">hello</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">handler</span><span class=\"mtk1\">: </span><span class=\"mtk8\">handler.hello</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">events</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      - </span><span class=\"mtk4\">http</span><span class=\"mtk1\">:</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk4\">method</span><span class=\"mtk1\">: </span><span class=\"mtk8\">get</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk4\">path</span><span class=\"mtk1\">: </span><span class=\"mtk8\">hello</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          </span><span class=\"mtk4\">authorizer</span><span class=\"mtk1\">: </span><span class=\"mtk8\">auth</span></span></code></pre>\n<h2>테스트</h2>\n<p>배포하면 <code>https://API-ID.execute-api.REGION.amazonaws.com/dev/</code> 하위에 <code>login</code>과 <code>hello</code> API를 얻을 수 있다. 이제 로그인을 수행하려면 다음과 같이 curl을 사용할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ curl -XPOST </span><span class=\"mtk8\">&quot;https://test:1234@API-ID.execute-api.REGION.amazonaws.com/dev/login&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span><span class=\"mtk8\">&quot;token&quot;</span><span class=\"mtk1\">:</span><span class=\"mtk8\">&quot;JWT&quot;</span><span class=\"mtk1\">}</span></span></code></pre>\n<p>이제 얻어낸 JWT 값을 사용하여 <code>hello API</code>를 요청할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ curl -XGET -H </span><span class=\"mtk8\">&quot;Authorization: Bearer JWT-FROM-RESPONSE&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;https://API-ID.execute-id.REGION.amazonaws.com/dev/hello&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span><span class=\"mtk8\">&quot;resource&quot;</span><span class=\"mtk1\">:</span><span class=\"mtk8\">&quot;/hello&quot;</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;path&quot;</span><span class=\"mtk1\">:</span><span class=\"mtk8\">&quot;/hello&quot;</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;httpMethod&quot;</span><span class=\"mtk1\">:</span><span class=\"mtk8\">&quot;GET&quot;</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;headers&quot;</span><span class=\"mtk1\">:{</span><span class=\"mtk8\">&quot;Accept&quot;</span><span class=\"mtk1\">:</span><span class=\"mtk8\">&quot;*/*&quot;</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;Authorization&quot;</span><span class=\"mtk1\">:</span><span class=\"mtk8\">&quot;Bearer TOKEN-FROM-RESPONSE&quot;</span><span class=\"mtk1\">,...},...}</span></span></code></pre>\n<p>만약 token 없이 요청한다면 <em>401 Unauthorized</em> 응답을 받게 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ curl -v -XGET </span><span class=\"mtk8\">&quot;https://API-ID.execute-id.REGION.amazonaws.com/dev/hello&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">...</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">&lt; HTTP/2 401</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">&lt; content-type: application/json</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">&lt; content-length: 26</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">...</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{</span><span class=\"mtk8\">&quot;message&quot;</span><span class=\"mtk1\">:</span><span class=\"mtk8\">&quot;Unauthorized&quot;</span><span class=\"mtk1\">}</span></span></code></pre>\n<h2>정리</h2>\n<ul>\n<li>Basic authentication으로 요청된 id와 password로부터 JWT를 생성하는 <code>login API</code>와</li>\n<li>발급된 JWT를 verify해서 적절한 resource 범위의 policy를 생성하는 <code>auth function</code>을 만들면,</li>\n<li>인증이 필요한 API를 구성할 때 위 <code>auth function</code>을 <code>authorizer</code>로 연결해서 사용할 수 있게 된다.</li>\n</ul>\n<p>Serverless로 구성된 간단한 데이터베이스 등 개인 프로젝트를 진행할 때에도 API들을 인증으로 보호해야 하는 경우가 있는데 이제 위 방법을 사용해서 간단한 인증 체계를 구성할 수 있다. id나 password, 혹은 token을 환경 변수로 관리해서 특정 유저만 허용해도 좋고 필요하다면 S3에 인증 정보를 넣어두고 불러와서 사용해도 되겠다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"API Gateway와 Lambda Proxy를 사용하여 간단한 HTTP/s API나 WebSocket API를 구축할 수 있다. AWS CloudFormation을 직접 사용하여 서비스를 구성할 수도 있고, 최근에 나온 aws-cdk…","fields":{"date":"August 01, 2019","shortdesc":""},"frontmatter":{"title":"API Gateway의 인증을 위한 Custom Authroizer 사용하기","tags":["aws","serverless","auth"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/08/01/api-gateway-custom-authorizer/"}}}