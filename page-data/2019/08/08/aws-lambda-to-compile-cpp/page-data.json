{"componentChunkName":"component---src-templates-page-tsx","path":"/2019/08/08/aws-lambda-to-compile-cpp/","webpackCompilationHash":"cdfa71eb19fc14d91b48","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>프로그래밍 동아리에 있던 대학교 시절, 으레 남들 하는 것처럼 동아리 내 문제풀이 채점 서버를 만든다고 나섰던 적이 있다. 그 당시 내가 알고 있는 지식을 최대한 사용해서 만들었지만 잘못된 가정과 부족한 지식으로 인해 서버는 금새 응답 불가 상태가 되었고 덕분에 운영을 맡았던 친구들이 제출된 코드를 손으로 채점해서 결과를 알려주는 슬픈 일이 발생했었다. 잘못 가정한 것은, 어찌보면 너무나 당연한 잘못인데, <em>컴파일과 실행/채점이 충분히 빨리 끝난다</em> 는 것이었다. 당시 채점 서버를 하나만 두었기 때문에 이 가정을 조금이라도 어기는 좋지 않은 코드가 제출되면 다른 사람들의 제출조차 막혀버리는 문제가 발생했던 것이다.</p>\n<p><a href=\"https://startlink.blog/category/%EC%8A%A4%ED%83%80%ED%8A%B8%EB%A7%81%ED%81%AC/baekjoon-online-judge/boj-10-years/\">백준 온라인의 저지의 10년 개발 이야기</a> 글에 나와있는 구조처럼, 적어도 queue를 두어 시스템을 분리하고 throttling을 할 수 있어야 하고, 서버가 분산될 수 있으므로 적절한 storage를 두어 state를 공유할 수 있어야 하겠다. 어쨌든 이것저것 좀 많이 경험해본 지금이야 좀 더 나은 구조로 서비스를 구축할 수 있을 것 같은데 그럴 기회도 명분도 다시오지 않아 가끔 이 주제가 생각날 때마다 씁쓸함이 있다.</p>\n<p>하지만 최근 잉여하면서 남는게 시간이고, 절제된 요금의 서버리스 영업을 한창 하는 중이니, <code>queue + storage + worker-pool</code>의 정상적인 방법 말고, 서버리스로 이 구조를 설계해보고 그 중 핵심(?)에 속하는 컴파일 부분을 AWS Lambda를 통해 실행하는 방법을 정리해보도록 하겠다. 물론 서버리스는 AWS의 것을 쓸 것이다.</p>\n<h3>채점 시스템 구조</h3>\n<p>간단한 유저 시나리오를 적어보면, 유저는,</p>\n<ul>\n<li><code>GET /{problemId}</code>해서 문제를 얻어가고,</li>\n<li>\n<p><code>PUT /{problemId}?language=&#x3C;language></code>의 Body로 소스코드를 제출할 것이다.</p>\n<ul>\n<li>제출된 소스코드를 지정된 언어 런타임으로 빌드해서</li>\n<li>해당 문제의 입출력을 대입하여 결과를 확인하고</li>\n<li>그 결과, 성공 실패 혹은 metric 정보를 적절한 방법으로 유저에게 전달한다.</li>\n</ul>\n</li>\n</ul>\n<p>이를 위해 적어도 시스템은,</p>\n<ol>\n<li><em>문제</em> 와 <em>채점을 위한 입출력</em> 데이터를 보관하는 저장소와</li>\n<li>만약 필요하다면 <em>채점 결과</em> 를 잠시 보관하는 저장소</li>\n<li>그리고 문제를 유저에게 전달하기 위한 웹 서버와 로직</li>\n<li>그리고 제출된 코드를 받아서 빌드와 채점을 수행하기 위한 웹 서버와 처리기가 필요하다.</li>\n</ol>\n<p>잘 알고 있는 종래의 방법을 사용한다면, 1) 2)를 위해 적당히 <code>MySQL</code> 같은걸 쓰고 3) 4)를 위해 적당히 <code>nginx</code>에 <code>nodejs</code>, 그리고 queueing과 임시 값 저장을 위해 <code>Redis</code> 등을 사용해볼 수 있을 것이다. <del>그리고 이를 위한 서버를 요청이 없을 때에도 계속 켜놓기 위해 지속적으로 요금을 지불하게 될 것이다.</del></p>\n<p>서버리스로 생각해보자. 1)은 잘 변경되지 않는 static 데이터이니 <code>S3</code>를 사용하고 3)은 <code>API Gateway</code>와 <code>AWS Lambda</code> proxy로 간단히 할 수 있겠다. 2)와 4)는 사실 한통속인데, 만약 <em>문제의 수행시간 제약을 강하게 주어서</em> 모든 입출력 경우에 대해 <em>20초 내에</em> 채점이 가능하다면 2)를 고민하지 않고 4) 역시 <code>API Gateway</code>와 <code>AWS Lambda</code> proxy로 처리할 수 있다.</p>\n<p><code>API Gateway</code>의 이벤트를 처리하는 <code>AWS Lambda</code>의 경우 Timeout Limit가 30초인데, 이 중 10초를 빌드를 위한 외부 런타임 설정과 실제 코드 빌드에 사용한다고 치고, 남은 20초 동안 열심히 채점을 하면 임시 state를 고민하지도 않고 단순히 WebAPI로 빌드와 채점을 처리할 수 있다는 것이다.</p>\n<p>이 글에서는 이 부분에 초점을 맞추어, <strong>AWS Lambda에서 단일 cpp 파일을 빌드하기 위해 외부 런타임을 같이 배포하고 사용하는 방법에 대해서 정리할 것이다.</strong></p>\n<h3>외부 런타임을 로컬에서 테스트하기</h3>\n<p>Lambda는 <a href=\"https://github.com/firecracker-microvm/firecracker\">firecracker-microvm</a>으로 관리되는 vm으로 <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-%EB%9F%B0%ED%83%80%EC%9E%84s.html\">각 런타임에 따라 Java, Python, go, NodeJS 등의 language 런타임이 포함</a>되어 있다. 이는 <a href=\"https://hub.docker.com/_/amazonlinux\">amazonlinux</a> 기반으로 만들어진 것으로 만약 local에서 테스트할 필요가 있다면 <a href=\"https://github.com/lambci/docker-lambda\">lambci/lambda</a>로 적절한 런타임을 골라서 docker로 테스트해볼 수도 있다.</p>\n<p>가끔 풀어야 하는 문제가 특정 언어의 런타임으로는 부족할 때가 있다. 예를 들면 <a href=\"http://eunjeon.blogspot.com/\">은전한닢</a>을 사용해서 간단한 tokenizing을 수행한다거나 아니면 이 글처럼 cpp를 빌드하기 위해 gcc를 실행한다거나 할 때다. 만약 실행할 외부 런타임이 간단한 구조라면, 예를 들어 golang으로 작성된 것이라면 추가로 필요한 so 파일 등의 의존성이 없도록 static build를 해서 깔끔하게 그 binary를 Lambda code zip에 같이 배포해서, NodeJS의 경우 <code>child_process</code>를 사용해서 실행하면 된다. 하지만 수많은 데이터 파일과 심지어 <code>.so</code> 파일에 의존하고 있는 경우에는 이 모든 의존하는 파일들을 잘 찾을 수 있도록 위치를 잘 정리해준뒤 모두 같이 code zip에 포함시켜서 Lambda에 올려주어야 한다.</p>\n<p>정리해보면,</p>\n<ul>\n<li>가급적이면 static build를 해서 의존성이 없도록 만들고: 주로 <a href=\"https://intoli.com/blog/transcoding-on-aws-lambda/\">ffmpeg on AWS Lambda</a>로 많이 찾아볼 수 있다. 물론 ffmpeg의 경우 static build를 제공하기 때문에 몇몇 libav를 제외하면 간단하게 Lambda에서 사용할 수 있다. NodeJS의 경우 <a href=\"https://www.npmjs.com/package/ffbinaries\">ffbinaries</a>를 쓰면 아주 간단하다.</li>\n<li>만약 필요하면 의존 파일들을 모두 적절한 위치에 구성해서 잘 실행될 수 있도록 묶어주고: 이 때 사용하면 아주 좋은 도구로 <a href=\"https://github.com/intoli/exodus\">exodus</a>가 있다. <a href=\"https://www.musl-libc.org/\">musl-gcc</a>라도 쓰지 않는한 아무리 static build를 해도 몇몇 <code>.so</code>는 의존성이 남는 경우가 있는데 이 도구를 사용하면 그런 의존 파일들을 모두 잘 추려서 <strong>symlink</strong> 로 적절히 실행될 수 있는 구조를 만들어준다.</li>\n<li>데이터 파일들도 상대 경로로 잘 찾아질 수 있도록 구성해야 한다: 만약 배포하려는 프로그램이 무조건 절대 경로를 사용한다면 문제가 크다. Lambda에서 writable한 storage는 오로지 <code>/tmp</code> 뿐이기 때문이다.</li>\n</ul>\n<p>이렇게 만들어진 외부 런타임 파일이 AWS Lambda 환경에서도 정상적으로 실행 가능한지 확인해보려면 <a href=\"https://hub.docker.com/_/amazonlinux\">amazonlinux</a>을 사용하면 된다. 예를 들어 <a href=\"https://www.musl-libc.org\"><code>musl-gcc</code></a>를 확인해보고 싶다면 미리 <a href=\"https://musl.cc\"><code>x86_64-linux-musl-native.tgz</code></a>를 받아 압축을 풀고 다음과 같이 확인해 볼 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ docker run -it -v </span><span class=\"mtk12\">$PWD</span><span class=\"mtk1\">/x86_64-linux-musl-native:/opt amazonlinux:2 /bin/sh</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ cat &gt; hello.c &lt;&lt; EOF</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">#include &lt;stdio.h&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">int main(int argc, char **argv)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">{ printf(</span><span class=\"mtk8\">&quot;hello %d\\n&quot;</span><span class=\"mtk1\">, argc); }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">EOF</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ musl-gcc -static -Os hello.c</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ ./a.out</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">hello 1</span></span></code></pre>\n<p>만약 무언가 에러가 발생한다면</p>\n<ul>\n<li>경로가 잘못되었거나</li>\n<li>필요한 파일이 누락되었거나</li>\n<li>아니면 있는데 찾을 수 없게 환경 변수가 누락되었거나</li>\n<li>혹은 target platform이 적절하지 않은 파일을 가져왔을 때이다.</li>\n</ul>\n<p>native 개발하던 경험을 살려서 문제를 차근차근 해결해보자.</p>\n<h3>AWS Lambda에서 외부 런타임을 실행하기</h3>\n<p>외부 런타임이 <code>amazonlinux</code> docker에서 잘 실행이 된다면 반은 성공한 것이다. AWS Lambda에서도 그게 올바르게 실행되기 위해서는 적어도 3가지를 조심해야 하는데,</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/lambda/latest/dg/limits.html\">AWS Lambda의 용량 제한은 얼마인가</a></li>\n<li>이 외부 런타임을 실행하기 위한 플랫폼이 일치하는가</li>\n<li>container의 제약 조건이 충분히 너그러워서 외부 런타임을 실행할 수 있는가</li>\n</ul>\n<p>용량 제한은</p>\n<ul>\n<li>Lambda 배포 시 올리는 code zip으로 부터 생성되는 readonly storage인 <code>/var/task</code>는 최대 250MB,</li>\n<li>임시 공간으로 사용할 수 있는 <code>/tmp</code>는 최대 512MB이다.</li>\n</ul>\n<p>때문에 일반적으로 <code>/var/task</code>에 실행 관련 파일을 올리고, 추가로 필요하면 <code>/tmp</code> 등에 라이브러리를 올려서 사용할 수 있도록 구성하고, <code>/tmp</code>에 임시 파일이나 데이터 파일을 두고 사용하게 된다. <code>/tmp</code>는 Lambda instance가 재사용되면 예전에 썼던 파일이 남아있게 된다.</p>\n<p>numpy나 TensorFlow처럼 라이브러리의 용량 자체가 어마무시한 경우에는 <code>/var/task</code>만의 용량으로는 한계가 있어 <code>/tmp</code> 밑에 일부 라이브러리를 넣은 후 <code>sys.path</code>에 추가해서 사용하는 경우가 있다. 이 때 <code>/tmp</code>에 필요한 파일을 넣어두는 데에도 꽤나 큰 시간이 필요하기 때문에 이를 단축시키기 위한 방법을 고민해야 할 수도 있다. 물론 대부분의 경우 <code>/tmp</code>가 재사용될 수 있다는 점에 착안하여 Lambda를 <code>warmUp</code>하는 방법을 사용하고, 이를 위한 Serverless 플러그인으로 <code>serverless-plugin-warmup</code>이 있다.</p>\n<p>용량처럼 구체적인 제약은 문제가 발생할 때 눈치채기 쉬운 편이다. 정확히 명시되지 않은 제약 조건으로 인해 문제를 로컬의 <code>amazonlinux</code> 테스트는 문제 없었는데 <code>Lambda</code>에 올린 이후에 실행이 되지 않을 수 있다. <code>amazonlinux</code>는 docker image로 제공되는 것이므로 Lambda의 몇 가지 플랫폼 이슈를 사전에 확인할 수 없는 문제가 있는데 예를 들어 대표적으로 <a href=\"https://forums.aws.amazon.com/thread.jspa?threadID=219962\"><code>/dev/shm</code>을 사용할 수 없는</a> 문제가 있다. 이 때문에 로컬 테스트를 하고 나서도 반드시 간단한 Lambda를 만들어 배포해서 실제 환경에서도 정상 동작하는지 확인해야 한다. 모든 시스템을 다 구성한 후에 외부 런타임이 제대로 실행될 수 없다는 것을 깨달으면 너무나도 슬프다.</p>\n<h3>musl-gcc</h3>\n<p>cpp 파일을 컴파일하기 위해 제일 먼저 생각해볼 수 있는 것은 <code>gcc</code>일 것이다. 하지만 이는 용량이 너무 크기 때문에 Lambda에 올리기는 어려워 보인다. 필요한 파일만 <code>inotifywait</code> 등으로 추려서 올리는 것도 방법이겠지만 다행히 그보다는 좀 더 쉬운 방법이 있다. golang에서 주로 사용한다고 알려진 <a href=\"https://www.musl-libc.org\"><code>musl-gcc</code></a>를 이용하는 것이다. 게다가 이 툴은 <a href=\"https://musl.cc\">커뮤니티에서</a> <a href=\"https://musl.cc/x86_64-linux-musl-native.tgz\">package로 잘 구성된 170MB의 cc toolset</a>을 제공하므로 따로 static build를 만든다고 고생할 필요가 없다. 물론 그래도 잘 동작하는지 위에서 이야기한 것처럼 <code>amazonlinux</code> docker container를 하나 띄워서 사용해보면 된다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ docker run -it -v </span><span class=\"mtk12\">$PWD</span><span class=\"mtk1\">/x86_64-linux-musl-native:/opt amazonlinux:2 /bin/sh</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\"># ... 동일한 내용 생략 ...</span></span></code></pre>\n<p>이 글을 쓰는 당시 <code>x86_64-linux-musl-native.tgz</code> 내의 <code>lib/libc.so</code>의 symlink가 잘못 만들어져 static build가 아닐 경우 <code>libc</code>를 찾지 못해서 실행이 안 되는 문제가 있었다. 이 위치를 제대로 수정해주면 굳이 static build를 수행하지 않아도 되겠지만 설명의 단계를 줄이기 위해서 이 글에서는 Lambda 내에서 빌드를 할 때에는 계속 static build를 가정하도록 하겠다.</p>\n<h3>초기 기동 시간 고찰</h3>\n<p>그럼 이 파일을 Lambda로 배포해서 사용하려면 어떻게 해야 할까?</p>\n<p>a. Lambda가 처음 실행될 때 <code>/tmp</code>에 <code>x86_64-linux-musl-native.tgz</code> 파일을 다운로드하고, 압축을 풀어서 사용한다.\nb. <code>x86_64-linux-musl-native.tgz</code> 파일을 code와 함께 압축해서 <code>/var/task</code>에 풀릴 수 있도록 해놓고, Lambda가 처음 실행될 때 <code>/var/task</code>에서 가져다가 <code>/tmp</code>에 압축을 풀어서 사용한다.\nc. <code>x86_64-linux-musl-native.tgz</code> 압축을 풀어서 code와 잘 섞고, 잘 실행할 수 있도록 구성한 후, code와 함께 압축해서 <code>/var/task</code>에 풀릴 수 있도록 해놓고 handler에서는 <code>/var/task</code>에 위치한 <code>musl-gcc</code>를 사용하도록 한다. 물론 위에서 이야기했던 것처럼 <code>/var/task</code>는 readonly storage이므로 이렇게 풀린 파일들에게 executable permission을 줄 수 없다. 때문에 symlink는 어떻게 처리할 수 있어도 실행할 수가 없다.\nd. c)의 방법과 비슷하지만 <code>/var/task</code>에 풀린 <code>musl-gcc</code> 파일들을 <code>/tmp</code>에 복사한 후, executable permission만 주어서 사용한다.</p>\n<p>복잡도로 보면 a)가 제일 간단하고, d)가 제일 복잡하다. 그리고 당연하게도 d)의 속도가 제일 빠르다. 일단 걸린 시간을 정리해보면 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th>실험</th>\n<th>방법</th>\n<th>총 시간</th>\n<th>준비 시간</th>\n<th>메모리 크기</th>\n<th>비고</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>가</td>\n<td>a)</td>\n<td>-</td>\n<td>-</td>\n<td>1G</td>\n<td><code>musl.cc</code> 다운로드 사이트가 너무 느리다.</td>\n</tr>\n<tr>\n<td>나</td>\n<td>b)</td>\n<td>9초</td>\n<td>7초</td>\n<td>1G</td>\n<td></td>\n</tr>\n<tr>\n<td>다</td>\n<td>d)</td>\n<td>6초</td>\n<td>4초</td>\n<td>1G</td>\n<td><code>usr</code>에 대한 symlink를 제거하고 <code>include</code>를 <code>usr/include</code>로 복사</td>\n</tr>\n<tr>\n<td>라</td>\n<td>d)</td>\n<td>5초</td>\n<td>3초</td>\n<td>1G</td>\n<td><code>include</code> 디렉토리의 중복된 파일 제거</td>\n</tr>\n<tr>\n<td>마</td>\n<td>d)</td>\n<td>4초</td>\n<td>2초</td>\n<td>2G</td>\n<td>파일 복사만 하고 <code>chmod 755</code>만 하는데 메모리가 크면 빨리진다 (?)</td>\n</tr>\n</tbody>\n</table>\n<p>Lambda가 처음 실행되면 다음의 과정을 겪는다.</p>\n<ol>\n<li><code>microvm</code>을 할당하고,</li>\n<li><a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Code\"><code>Code</code></a>에 명시된 s3의 <code>zip</code> 파일을 가져와서 <code>/var/task</code>에 압축을 푼다.</li>\n<li>NodeJS 런타임이므로 <code>node handler.js</code>가 실행된다.</li>\n<li><a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Handler\"><code>Handler</code></a>로 지정된 함수가 실행되면서 <code>tgz</code>를 다운로드 받거나 압축을 풀거나, 파일을 복사하고 권한을 부여하는 작업들이 수행된다.</li>\n</ol>\n<p>위 표에서 <em>준비 시간</em> 은 4번 항목에 대한 부분을 측정한 것이고 <em>총 시간</em> 은 해당 Lambda가 API Gateway event로부터 시작되어 결과가 반환될 때까지 소요된 총 시간을 측정한 것이다. 이 시간을 정밀하게 측정하는 것이 본 글의 목표가 아니므로 대략적으로 우위를 비교할 수 있는 수준으로만 측정하였고, 상술한 것처럼 4)의 방법이 제일 빨랐다. 대충 분석해보면 실험 <code>나</code>의 경우 <em>총 시간</em> 이 <em>9초</em> 인데 <em>준비 시간</em> 이 <em>7초</em> 라는 것은 2) 과정에서 <code>/var/task</code>로 압축을 푸는데 2초, 4) 과정에서 <code>tgz</code>를 <code>/tmp</code>로 푸는데 7초가 걸린다고 생각하면 된다. 물론 이는 추후 <code>AWS X-Ray</code>를 사용해서 좀 더 정확하게 확인해볼 수 있다.</p>\n<p>아무튼 재밌는 점을 정리해보면,</p>\n<ul>\n<li>똑같은 압축을 푼다고 해도 2) 과정에 의해 <code>/var/task</code>에 푸는 것이 4) 과정에 의해 <code>/tmp</code>로 푸는 것보다 더 빠르다. (실험 <code>나</code>, <code>다</code>)</li>\n<li><code>/var/task</code>나 <code>/tmp</code>에 써야할 파일의 수를 최대한 줄이면 기동 시간이 더 빨라진다. (실험 <code>다</code>, <code>라</code>)</li>\n<li>실제 consumption memory size는 1G를 넘지 않지만, 그냥 메모리를 더 크게 주면 기동 시간이 더 빨라진다. (실험 <code>라</code>, <code>마</code>)</li>\n<li>Lambda에 업로드되는 코드는 Zip 형식으로 대부분의 툴들이 Symlink 옵션을 빼놓았다. 때문에 Zip으로 올려야 하는 실험에서 어떻게 해야 고민하고 있었는데, 귀찮아서 so에 대한 모든 symlink 파일들을 제거하고, <code>usr</code>은 <code>include</code>만 한 벌 더 복제해서 올렸는데도 정상 동작하는 것을 확인했고 이렇게 구성된 파일을 실험에 사용했다.</li>\n<li>다른 작업에서 확인한 내용이지만, 실험 a)에서 <code>musl.cc</code> 대신 S3에 올려둔 파일을 받는다고 해도 별다른 성능을 기대할 수 없다. S3와 Lambda의 통신도 생각보다 느리기 때문이다.</li>\n</ul>\n<p>각 실험에서 사용한 모든 코드를 예쁘게 정리해두지는 않았지만 <a href=\"https://github.com/lacti/serverless-single-cpp-compiler\">이곳에서 전체 코드를 확인할 수 있다.</a> 나름 유의미했던 b), d) 두 개의 실험만 좀 자세히 보자.</p>\n<h4>압축 풀어 사용하는 방법 (b)</h4>\n<p>먼저 압축 파일을 Serverless framework의 deploy 과정에서 같이 포함할 수 있도록 설정해준다. Python이나 Webpack을 사용하지 않는 NodeJS의 경우 <code>serverless.yml</code>의 <code>package.include</code>를 사용하면 되겠지만 Webpack을 사용하는 경우 다음과 같이 <code>CopyWebpackPlugin</code>을 사용하도록 <code>webpack.config.js</code> 파일을 수정한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"javascript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CopyWebpackPlugin</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;copy-webpack-plugin&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">module</span><span class=\"mtk1\">.</span><span class=\"mtk10\">exports</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// ...</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">plugins:</span><span class=\"mtk1\"> [</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">CopyWebpackPlugin</span><span class=\"mtk1\">([</span><span class=\"mtk8\">&quot;x86_64-linux-musl-native.tgz&quot;</span><span class=\"mtk1\">])]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// ...</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>그리고 handler가 시작될 때 다음과 같이 <code>/tmp</code> 밑에 적당한 디렉토리를 하나 만들고 압축을 풀어둔다. 만약 Lambda instance 재사용 등에 의해 이미 <code>/tmp</code> 내의 그 디렉토리가 존재한다면 굳이 다시 압축을 풀지는 않는다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tmpDir</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">os</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tmpdir</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ccVersion</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;x86_64-linux-musl-native&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ccPath</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">path</span><span class=\"mtk1\">.</span><span class=\"mtk11\">join</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tmpDir</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ccVersion</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">fs</span><span class=\"mtk1\">.</span><span class=\"mtk11\">existsSync</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ccPath</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">void</span><span class=\"mtk1\">&gt;((</span><span class=\"mtk12\">resolve</span><span class=\"mtk1\">, </span><span class=\"mtk12\">reject</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">decompress</span><span class=\"mtk1\">(</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">src:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#96;</span><span class=\"mtk4\">${</span><span class=\"mtk12\">ccVersion</span><span class=\"mtk4\">}</span><span class=\"mtk8\">.tgz&#96;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">dest:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tmpDir</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      },</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">error</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\"> ? </span><span class=\"mtk11\">reject</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">) : </span><span class=\"mtk11\">resolve</span><span class=\"mtk1\">())</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    )</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  );</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>그리고 <code>event.body</code>로부터 소스 코드를 받아서 이 <code>musl-gcc</code>로 빌드하도록 코드를 작성해준다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">extern</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">file</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk4\">readonly</span><span class=\"mtk1\"> </span><span class=\"mtk10\">string</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Promise</span><span class=\"mtk1\">&lt;{</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">stdout</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> | </span><span class=\"mtk10\">Buffer</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">stderr</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> | </span><span class=\"mtk10\">Buffer</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }&gt;((</span><span class=\"mtk12\">resolve</span><span class=\"mtk1\">, </span><span class=\"mtk12\">reject</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk11\">execFile</span><span class=\"mtk1\">(</span><span class=\"mtk12\">file</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">, { </span><span class=\"mtk12\">encoding:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;utf-8&quot;</span><span class=\"mtk1\"> }, (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">, </span><span class=\"mtk12\">stdout</span><span class=\"mtk1\">, </span><span class=\"mtk12\">stderr</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">error</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        ? </span><span class=\"mtk11\">reject</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">resolve</span><span class=\"mtk1\">({</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">stdout</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">            </span><span class=\"mtk12\">stderr</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">          })</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    )</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  );</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">compile</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">sourceFile</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">, </span><span class=\"mtk12\">executeFile</span><span class=\"mtk1\">: </span><span class=\"mtk10\">string</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">extern</span><span class=\"mtk1\">(</span><span class=\"mtk12\">path</span><span class=\"mtk1\">.</span><span class=\"mtk11\">join</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ccPath</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#96;bin&#96;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#96;g++&#96;</span><span class=\"mtk1\">), [</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;-static&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;-O3&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">sourceFile</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;-o&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">executeFile</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  ]);</span></span></code></pre>\n<p>물론 <code>sourceFile</code>과 <code>executeFile</code>은 모두 writable storage인 <code>/tmp</code> 밑에서 생성될 것이다. 실행해서 결과를 가져오는 부분은 <code>extern</code> 함수를 <code>executeFile</code>에 대해 사용하면 될 것이다.</p>\n<p>어쨌든 조심해야 할 것은, 이렇게 임시로 만들어 놓은 파일들은 Lambda instance 재사용에 의해 다음 요청 때에도 여전히 남아있을 수 있고, 이로 인해 가용 용량이 점차 소진될 수 있으므로 반드시 이런 임시 파일은 꼭 깨끗하게 정리를 해주어야 한다는 것이다. 물론 Lambda instance가 timeout 등 uncaught error에 의해 중단될 수도 있으므로 이는 단순히 <code>try-finally</code>에 의해 지우는 것이 아니라 아예 위치를 지정해놓고 작업을 수행하기 전에도 쓰레기가 있는지 검사해서 치우고 진행할 수 있도록 해야 의도치 않은 문제 없이 시스템을 잘 사용할 수 있을 것이다.</p>\n<h4>Lambda와 같이 배포해서 복사 (d)</h4>\n<p>어쨌든 위 방법은 <code>tgz</code> 라는 압축을 풀어야 하고, 이는 Lambda의 CPU와 Memory의 영향을 받기 때문에 준비를 위해 소모하기에는 좋은 방법이 아니다. 게다가 warmUp 역시 concurrent request가 1 이상을 고려해야 하는 경우에는 사용하기 애매한 방법이므로 가급적이면 조금 번거롭더라도 초기 실행 시간을 최대한 줄이는 편이 좋다.</p>\n<p>때문에 압축을 푸는 과정을 생략하기 위한 방법을 알아보자.</p>\n<p>먼저 <code>x86_64-linux-musl-native.tgz</code> 압축을 적당한 위치에 풀어둔다. 예제에서는 <code>cc</code>라는 디렉토리를 사용했다. 그리고 위에서 잠깐 언급한 것과 같이 Serverless framework은 Lambda에 올리는 codezip을 만들 때 symlink를 허용하지 않으므로,</p>\n<ul>\n<li><code>usr</code> 디렉토리를 제외한 모든 symlink를 제거하고,</li>\n<li><code>usr</code> 디텍로티를 만들고 <code>include</code> 디렉토리를 그 안에 넣고</li>\n<li><code>usr/include/c++</code> 디렉토리만 <code>include/c++</code>로 남겨두었다.</li>\n</ul>\n<p>이 과정은 <a href=\"https://github.com/lacti/serverless-single-cpp-compiler/blob/master/.postinstall.sh\">.postinstall.sh</a> 에 자세히 나와있다. <code>include</code> 디렉토리를 저렇게 만드는 이유는 조금이라도 파일 수를 줄이기 위함인데 이는 잠시 후 다시 자세히 이야기하겠다.</p>\n<p>이제 준비된 <code>cc</code> 디렉토리를 배포에 포함할 수 있도록 <code>webpack.config.js</code> 파일을 수정한다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"javascript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CopyWebpackPlugin</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;copy-webpack-plugin&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk10\">module</span><span class=\"mtk1\">.</span><span class=\"mtk10\">exports</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// ...</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">plugins:</span><span class=\"mtk1\"> [</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">CopyWebpackPlugin</span><span class=\"mtk1\">([{ </span><span class=\"mtk12\">from:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;cc&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;cc&quot;</span><span class=\"mtk1\"> }])]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// ...</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>이제 handler가 시작될 때 이 파일을 <code>/tmp/cc</code>에 복사해주자. 그리고 필요한 파일들에게 실행 권한을 주어야 하는데 이 목록은 간단히 <code>cc</code> 디렉토리에서 <code>find . -type f -executable</code> 등으로 쉽게 가져올 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"typescript\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ccPath</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">path</span><span class=\"mtk1\">.</span><span class=\"mtk11\">join</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tmpDir</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;cc&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">fs</span><span class=\"mtk1\">.</span><span class=\"mtk11\">existsSync</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ccPath</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">fs</span><span class=\"mtk1\">.</span><span class=\"mtk11\">copySync</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;cc&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ccPath</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">exe</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">exes</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">fs</span><span class=\"mtk1\">.</span><span class=\"mtk11\">chmodSync</span><span class=\"mtk1\">(</span><span class=\"mtk12\">path</span><span class=\"mtk1\">.</span><span class=\"mtk11\">join</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ccPath</span><span class=\"mtk1\">, </span><span class=\"mtk12\">exe</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;755&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#96;Cannot give a permission&#96;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">error</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이제 <code>musl-gcc</code>가 준비되었으므로 아까 봤던 코드와 동일한 방법으로 <code>event.body</code>로 전달된 코드를 컴파일하고 실행해볼 수 있겠다.</p>\n<p>압축 해제에 비해 computing power를 사용할 일이 줄었기 때문에 생각보다 시작 시간이 꽤 단출되었다. 하지만 꽤 많은 수의 파일을 써야 한다는 점은 여전하기 때문에 만약 실행 시간을 더 줄이려면 정말 필요한 파일만 추려서 올리는 것이 더 좋다.</p>\n<p>하지만 <code>musl-gcc</code>의 파일 구조를 잘 모르기 때문에, 그리고 워낙 파일이 많기 때문에 이걸 한땀한땀 추리는 것은 꽤나 어려운, 혹은 불가능한 일일 것이다. 때문에 조금의 위험 부담을 감수하면서 좀 더 편리한 방법을 사용해보자.</p>\n<p>이 때 사용할 수 있는 것이 바로 <code>inotifywait</code> 툴이다. Ubuntu의 경우 <code>inotify-tools</code> package를 통해 설치할 수 있다. 이 툴은 파일 시스템의 이벤트를 감지하는 것으로 이걸 켜놓고 gcc를 수행하면 내게 필요한 파일만 딱 확인할 수 있다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"bash\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ inotifywait \\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  -m </span><span class=\"mtk6\">\\ </span><span class=\"mtk1\">                  </span><span class=\"mtk3\"># Watch multiple events</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  -e access </span><span class=\"mtk6\">\\ </span><span class=\"mtk1\">           </span><span class=\"mtk3\"># Listen access event only</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  -o dependencies.log </span><span class=\"mtk6\">\\ </span><span class=\"mtk1\"> </span><span class=\"mtk3\"># Write this result to &quot;dependencies.log&quot;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  --format </span><span class=\"mtk8\">&quot;%w%f&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk6\">\\ </span><span class=\"mtk1\">     </span><span class=\"mtk3\"># Watch files only</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  -r </span><span class=\"mtk6\">\\ </span><span class=\"mtk1\">                  </span><span class=\"mtk3\"># Watch recursively</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk8\">&quot;cc&quot;</span><span class=\"mtk1\"> &amp;                 </span><span class=\"mtk3\"># Watch &quot;cc&quot; directory</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ ./cc/bin/g++ hello.cpp -o hello</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ </span><span class=\"mtk11\">kill</span><span class=\"mtk1\"> %1</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">$ sort -u depenencies.log | less</span></span></code></pre>\n<p>이렇게 딱 필요한 파일만 잘 추리면 원래 <code>musl-gcc</code> 파일들에 비해 반 이상 줄일 수 있으므로 초기 기동 시간을 확실히 줄일 수 있다. 물론 대부분의 파일들은 header고 그에 비해 executable은 많지 않기 때문에 약간의 관대함을 보여 executable은 모두 올리는 것도 방법이겠다. 물론 어떤 header가 언제 불릴지 모르는 점도 조금은 불안하지만, <em>대회 채점 서버를 만든다</em> 는 도메인으로 다시 돌아와본다면 사용할만한 header를 모두 포함하는 간단한 cpp 파일을 하나 작성해서 빌드하는 동안 얻어낸 결과만 추리는 것도 좋은 방법이라고 생각한다.</p>\n<p>물론 이렇게까지 구성한 후에도 혹시나 싶어 단순 파일 복사 밖에 없는 이 실험에서도 Lambda의 <code>memorySize</code>를 늘려봤다. <code>1G</code>에서 <code>2G</code>로 늘렸고, 두 경우 모두 <code>memoryConsumption</code>이 <code>200MB</code> 수준인데도 <code>2G</code>인 경우에 초기 기동 시간이 단축되는 것을 확인했다(…) Undocumented의 영역이지만 참으로 알 수 없는 내용이 많다.</p>\n<h3>정리</h3>\n<p><code>musl-gcc</code>를 AWS Lambda에서 사용하는 에제를 통해 AWS Lambda에서 외부 런타임을 실행하기 위한 방법에 대해 알아보았다. 정리해보면,</p>\n<ul>\n<li>용량 등의 제약조건이 있으므로 사전에 잘 확인하고 간단한 것부터 잘 테스트해야 하며</li>\n<li>최대한 static build로 구성된 외부 런타임을 사용하고 <code>amazonlinux</code>로 로컬에서 테스트도 충분히 수행해야 한다.</li>\n<li>그리고 초기 기동 시간이 너무 느려 곤란할 경우 필요한 파일만 잘 추려서 올릴 수 있도록 하고, 가급적이면 모든 것을 <code>/tmp</code>에 다 올려서 사용하는 것보다 <code>/var/task</code>도 적절히 사용해주는 것이 효율을 더 좋게 할 수 있겠다.</li>\n<li>마지막으로 이유는 모르겠지만 <code>memorySize</code>에 의해 초기 기동 시간이 달라지는 경우가 있으므로 이 값도 적절히 바꿔가며 실험해보자.</li>\n</ul>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"…","fields":{"date":"August 08, 2019","shortdesc":""},"frontmatter":{"title":"AWS Lambda로 cpp 파일 컴파일","tags":["aws","serverless","lambda"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/08/08/aws-lambda-to-compile-cpp/"}}}