{"componentChunkName":"component---src-templates-page-tsx","path":"/2014/06/30/dumpable-analysis/","webpackCompilationHash":"86a6406c6b4e5482e871","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>하재승님께서 <a href=\"https://lacti.github.io/2014/05/29/ndc14-dungeon-and-fighter-loader-optimization/\">던전 앤 파이터 클라이언트 로딩 속도 최적화</a>에서 언급하신 <a href=\"https://github.com/ipkn/dumpable\">dumpable</a> 라이브러리에 대한 이야기를 해보자. 이 라이브러리는 serializable memory가 가능한 dynamic container와 <code>operator =</code>를 사용하여 dumpable한 struct를 만들어준다.</p>\n<p>다만 몇 가지 아쉬운 점이 있었다.</p>\n<ul>\n<li><code>dptr::alloc()</code> 함수가 thread safe하지 않다는 점</li>\n<li>dstring, dvector가 custom allocator를 지원하지 않는다는 점</li>\n<li>container의 type이 많지 않다는 점</li>\n</ul>\n<p>때문에 <a href=\"https://github.com/lacti/dumpable\">dumpable을 fork해서</a> 문제를 고쳐보기로 했다.</p>\n<ul>\n<li>일단 <code>dptr:alloc()</code> 내의 static 변수를 thread<em>local로 변경해서 local</em>pool이 겹치지는 않도록 했다. 하나의 thread가 dumping을 하는 도중에는 다른 copy가 불가능하기 때문에 대충은 thread safe해졌다.</li>\n<li>custom allocator를 넣어보려고 이리저리 뜯어보니 상당히 고쳐줘야 한다. 일단 type부터 다시 재정의를 해야 할 것 같다.</li>\n</ul>\n<p>고민을 좀 해보다보니 뭔가 기존 stl container에 allocator만을 가지고 tmp를 잘 해보면 되지 않을까라는 생각이 들었다. 뭔가 복사할 때에만 serialize를 위한 allocator로 교체해서 그 쪽의 메모리를 할당해주면 되지 않을까!</p>\n<ol>\n<li>data type을 정의한다. 이 data type은 serializable할 것인지 말 것인지 template param으로 bool 값을 갖는다.</li>\n<li>data type에서 사용하는 stl container는 위 bool 값에 의해 <code>std::allocator</code>를 쓸지 <code>serializble_allocator</code>를 쓸지 <code>std::conditional</code>로 결정한다.</li>\n<li>data type은 자신의 bool 값을 rebind하여 serializable 가능한 type을 갖는다.</li>\n<li><code>write</code> 함수에서는 rebind된 type의 객체를 만든 후, 원본 객체로부터 복사를 유도하여 dumpable처럼 <code>operator =</code>에 의한 복사를 유도해보도록 하자.</li>\n</ol>\n<p>결론부터 이야기하자면 성공할 수 없는 삽질이다. 좀 더 자세한 설명을 위해 코드를 보자.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">namespace</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ser</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">, </span><span class=\"mtk4\">bool </span><span class=\"mtk10\">do_serialize</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">vector</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::conditional&lt;do_serialize, allocator&lt;T&gt;, </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::allocator&lt;T&gt;&gt; allocator_type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">::vector&lt;T, allocator_type&gt; type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;template &lt;</span><span class=\"mtk4\">bool</span><span class=\"mtk1\">&gt; </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Base</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk10\">make_serializable</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> Base&lt;</span><span class=\"mtk4\">true</span><span class=\"mtk1\">&gt; serializable_type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<ul>\n<li>간단히 vector만 다시 정의해봤다. <code>do_serialize</code> 값에 따라 allocator만 바꿔주는 녀석이다.</li>\n<li><code>make_serializable</code> 역시 별거 없고 그냥 Base type에 대해 serializable 값만 바꿔준다.(rebind)</li>\n</ul>\n<p>그리고 다음과 같이 data를 쓰려고 했다.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#define</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SERIALIZABLE</span><span class=\"mtk4\">(</span><span class=\"mtk12\">name</span><span class=\"mtk4\">) </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    template &lt;bool </span><span class=\"mtk10\">do_serialize</span><span class=\"mtk4\"> </span><span class=\"mtk1\">=</span><span class=\"mtk4\"> false&gt; </span><span class=\"mtk6\">\\</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">    struct </span><span class=\"mtk10\">name</span><span class=\"mtk4\"> : </span><span class=\"mtk10\">ser</span><span class=\"mtk4\">::</span><span class=\"mtk10\">make_serializable</span><span class=\"mtk4\">&lt;</span><span class=\"mtk10\">name</span><span class=\"mtk4\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk11\">SERIALIZABLE</span><span class=\"mtk1\">(data) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">ser</span><span class=\"mtk1\">::vector&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">, do_serialize&gt; values;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>위와 같이 정의하고,</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"cpp\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">template</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test</span><span class=\"mtk1\">(</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk4\">&amp;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">t</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">typedef</span><span class=\"mtk1\"> </span><span class=\"mtk4\">typename</span><span class=\"mtk1\"> </span><span class=\"mtk10\">T</span><span class=\"mtk1\">::</span><span class=\"mtk10\">serializable_type</span><span class=\"mtk1\"> serializable_type;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    serializable_type ser_obj;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    ser_obj = t;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>이런 식으로 테스트를 진행하려고 했다. 당연하지만 <code>data&#x3C;true></code>와 <code>data&#x3C;false></code>는 다른 type이기 때문에 <code>operator =</code>를 바로 호출할 수가 없다. <code>operator =</code> trick을 못 쓴다면 각 멤버에 대한 serialize 코드를 작성해주어야 한다는 것이므로 당초 목적을 달성할 수가 없다.</p>\n<p>뿐만 아니라 allocator를 사용하는 방법 자체는 잘못되었다.</p>\n<ul>\n<li>container 내에는 pointer type이 많이 있는데 이는 allocator를 통해 할당 공간만 어떻게 하나로 합친다고 해서 될 수 있는 내용이 아니다.</li>\n<li>프로그램 구동 시 처음 한 번 loading된 이후 변경이 없는 데이터의 경우 loading memory address를 강제로 고정해서 위 문제를 해결할 수 있을지는 모르겠지만, 그렇게 되면 범용적으로 사용할 수가 없다.</li>\n</ul>\n<p>따라서 dumpable처럼 container도 따로 구현해야만 한다. 많은 container가 없다는 점이 조금 아쉽기는 하지만 일단 custom allocator를 사용할 수 있는 수준까지 고쳐보고 다시 고민을 더 해봐야겠다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","excerpt":"하재승님께서 던전 앤 파이터 클라이언트 로딩 속도 최적화에서 언급하신 dumpable 라이브러리에 대한 이야기를 해보자. 이 라이브러리는 serializable memory가 가능한 dynamic container와 operator…","fields":{"date":"June 30, 2014","shortdesc":""},"frontmatter":{"title":"dumpable 고찰","tags":["c++","template"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2014/06/30/dumpable-analysis/"}}}