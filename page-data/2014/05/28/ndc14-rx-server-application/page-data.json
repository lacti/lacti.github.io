{"componentChunkName":"component---src-templates-page-tsx","path":"/2014/05/28/ndc14-rx-server-application/","webpackCompilationHash":"551181b12e79e57a3ef2","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p><a href=\"https://www.slideshare.net/jongwookkim/ndc14-rx-functional-reactive-programming\">https://www.slideshare.net/jongwookkim/ndc14-rx-functional-reactive-programming</a></p>\n<ul>\n<li><a href=\"https://jongwook.kim/home\">김종욱</a></li>\n</ul>\n<h3>요약</h3>\n<ul>\n<li>대세는 병렬처리, 이를 Reactive functional programming으로 풀어보자. <del>근데 functional 이야기 안 함</del></li>\n<li>Reactive가 왜 나왔는지 알아보자, 그러면서 MONAD 잠깐 이야기</li>\n<li>그러면서 Rx.NET 조금 소개 <del>고성능 이야기 안 함</del></li>\n</ul>\n<h3>내용</h3>\n<ul>\n<li>\n<p>ControlFlow</p>\n<ul>\n<li>Turning machine, Intel Arch</li>\n<li>Imperative Programming</li>\n</ul>\n</li>\n<li>\n<p>DataFlow</p>\n<ul>\n<li>병렬처리</li>\n<li>Compiler 발전으로 최적화 잘 해줌</li>\n<li>The Future of Programming</li>\n<li>Actor Model</li>\n<li>Massively Parallel model</li>\n</ul>\n</li>\n<li>\n<p>Reactive Programming</p>\n<ul>\n<li>DataFlow 설명을 위한 Excel cell 예시 A + B -> C</li>\n<li>독립적 작업 단위 + 데이터 흐름 예시) Gate 조합</li>\n<li>기존 명령형 언어는 병렬처리가 어렵다?</li>\n<li>선언적, DataFlow, Functional Programming, Reactive</li>\n</ul>\n</li>\n<li>\n<p>Reactive Manifesto</p>\n<ul>\n<li>Responsible</li>\n<li>Scalable</li>\n<li><strong>Event-driven</strong></li>\n<li>Resilient</li>\n</ul>\n</li>\n<li>\n<p>시간 이야기</p>\n<ul>\n<li>뭔가 이야기를 많이 했지만 결국 <strong>switch 비용을 줄이자</strong></li>\n<li>tasklet이 작고 빨라야 함.</li>\n</ul>\n</li>\n<li>\n<p>event driven</p>\n<ul>\n<li>사실상 microthread 이야기를 함</li>\n<li>관련 framework 이야기를 하면서 callback hell 같은 문제를 언급</li>\n</ul>\n</li>\n<li>\n<p>MONAD</p>\n<ul>\n<li><code>INPUT => M&#x3C;OUTPUT></code></li>\n<li>MONAD = Unit + FlatMap</li>\n<li>Maybe, Try, Iterable, Future</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>하나</th>\n<th>다수</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>동기</td>\n<td>Try</td>\n<td>Iterable</td>\n</tr>\n<tr>\n<td>비동기</td>\n<td>Future</td>\n<td>Rx</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>Reactive</p>\n<ul>\n<li>Rx = Observable + LINQ + Scheduler</li>\n<li>Observable = Reactive Stream</li>\n<li>Iterable (pull) -> Observable (push) [duality]</li>\n<li>Map: Synchronous Continuation</li>\n<li>FlatMap: Asynchronous Continuation</li>\n<li>기타 operation들 소개</li>\n</ul>\n</li>\n<li>\n<p>LE Platform</p>\n<ul>\n<li>TCP -&#x26;gt; Dispatch -&#x26;gt; [Handlers…] -&#x26;gt; Database</li>\n</ul>\n</li>\n<li>\n<p>기타</p>\n<ul>\n<li><a href=\"https://reactive-streams.org\">https://reactive-streams.org</a></li>\n<li>java: play, akka, reactor</li>\n<li><a href=\"https://reactconf.org\">https://reactconf.org</a></li>\n<li>coursera principles of Reactive programming</li>\n</ul>\n</li>\n<li>\n<p>debugging</p>\n<ul>\n<li>data flow 기반 분석</li>\n<li>data flow를 database처럼 기록(?)해서 추적</li>\n</ul>\n</li>\n<li>\n<p>기타 청중 건의</p>\n<ul>\n<li>async lock이나 async enumerable을 쓰는 것도 고려해보세요.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>발표 내용은 잘 정리되어 흥미로웠지만 정작 Reactive Programming으로 어떻게 고성능 서버를 구현하는 지에 대한 언급이 미흡</p>\n<ul>\n<li>병렬 처리에 있어서 stateless한 functional programming이 유리한건 사실이나 이게 reactive programming과 어떻게 연결된다는 지에 대한 설명이 부족</li>\n<li>event driven으로 microthread나 async io를 설명하는건 좋고, 이게 sync io나 blocking에 비해 성능이 좋은 것은 맞는데 reactive programming과의 연결성이 모호</li>\n<li>reactive programming으로 소개된 rx.net은 표현력이 좋은 것이지 성능적 이점을 얻기 위한 것이 아님</li>\n<li>lineage eternal이 저걸 어떻게 사용했는지에 대한 부분을 너무 대충 다루고 넘어감</li>\n</ul>\n</li>\n<li>재미는 있었으나 내용면에서 좀 아쉬운 발표였음</li>\n</ul>","excerpt":"https://www.slideshare.net/jongwookkim/ndc14-rx-functional-reactive-programming 김종욱 요약 대세는 병렬처리, 이를 Reactive functional programming…","fields":{"date":"May 28, 2014","shortdesc":""},"frontmatter":{"title":"Rx와 Functional Reactive Programming으로 고성능 서버 어플리케이션 만들기","tags":["ndc14","server"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2014/05/28/ndc14-rx-server-application/"}}}