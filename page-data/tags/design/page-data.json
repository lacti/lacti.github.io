{"componentChunkName":"component---src-templates-tags-js","path":"/tags/design/","webpackCompilationHash":"69d4b35bc62b6069aa17","result":{"data":{"allMarkdownRemark":{"totalCount":9,"edges":[{"node":{"excerpt":"IT 아키텍트가 하지 말아야 할 128가지 누구도 알려주지 않았던 시스템 개발 현장의 128가지 해결책 ... 위 링크 들어가서 목차를 보면 알겠지만 정말 자극적이고 재밌는 내용으로 가득차있다. 내 관심 분야에는 설계, 구축, 방법론이 포함되어 있다. 열심히는 아니지만 나름 지식을 쌓았다고 생각했...으나 이 책을 보니 아는게 하나도 없다는 것을 배웠다. 그러한 점에서는 강력 추천. 요새 PaaS/IaaS…","fields":{"date":"June 02, 2014","path":"/2014/06/02/128-things-that-it-architect-doesn-t-do"},"frontmatter":{"title":"IT 아키텍트가 하지 말아야 할 128가지","tags":["book","design"]}}},{"node":{"excerpt":"https://www.slideshare.net/khalbora/the-npcmsterpublicfinal-35354617 강근영 요약 게임 기획자는 게임 플레이의 수단으로 스토리텔링을 사용하자. 저비용 고퀄리티를 위해 캐릭터에 집중, 게임 플레이와 밀착된 캐릭터를 만들자. 도입 스토리텔링은 하나의 세계를 구축/구현하는 작업이다. M…","fields":{"date":"May 29, 2014","path":"/2014/05/29/ndc14-the-npc-master"},"frontmatter":{"title":"THE NPCM@STER - 라이브 게임에 어울리는 스토리 텔링의 접근법","tags":["ndc14","design","live"]}}},{"node":{"excerpt":"https://www.slideshare.net/iFunFactory/20140524-ndc-sharing 문대경 요약 가정/목표를 정하고 할 수 있는 것/없는 것을 구분하여 시스템을 설계한다. Comm=JSON, Mgmt=RestAPI, Obj=Json CodeGen/STM, Dist=RPC인 GameServer를 설계한다. System Design System = interface + Architecture…","fields":{"date":"May 28, 2014","path":"/2014/05/28/ndc14-design-generic-game-server"},"frontmatter":{"title":"범용 게임 서버 프레임워크 디자인 및 테크닉","tags":["ndc14","design","server"]}}},{"node":{"excerpt":"설계 동기화 수준과 성능(규모) 수준을 고려해서 작성한다. 완전 비동기나 느슨한 비동기 수준으로 괜찮다면 웹 서버를 사용해도 좋다. 실시간 비동기가 필요하면서 성능이 중요할 경우 직접 서버를 구현하는 편이 좋다. morpg나 fps 정도의 서버라면 stmp(single thread multiple process) 구조로 가도 좋다. mmorpg나 그 이상의 성능을 요구하는 서버라면 task parallelism…","fields":{"date":"December 22, 2013","path":"/2013/12/22/server-programming"},"frontmatter":{"title":"서버 프로그래밍","tags":["design","server"]}}},{"node":{"excerpt":"위 이야기에 이어, async 작업과 then 작업 간의 상태 공유에 대해서 알아보자. async에서 then으로 상태를 전달하는 가장 기본적인 방법은 반환값을 사용하는 방법이다. 다른 방법으로는 lambda function에 의한 variable capture가 있겠다. 반환 값으로 모든 context를 전달하는 것에는 한계가 있기 때문에 capture를 통한 방법이 더 편할 수 있다. 하지만 capture…","fields":{"date":"November 19, 2013","path":"/2013/11/19/asynchronous-programming-pattern-2"},"frontmatter":{"title":"비동기 프로그래밍 패턴 2","tags":["async","design"]}}},{"node":{"excerpt":"일련의 순서로 호출되어야 하는 비동기 함수들이 있다. 이 때 사용되는 method chaining을 사용한 async/then 패턴과 수행할 비동기 context를 갖고 직접 비동기 수행을 연쇄적으로 진행하는 async_worker 패턴을 알아보자. 연속적인 비동기 작업을 처리할 때에는 동기적 프로그래밍과는 다르게 코드를 순차적으로 서술할 수 없다. 만약 아래와 같이 작성된다면, async_work2나 async_work…","fields":{"date":"October 09, 2013","path":"/2013/10/09/asynchronous-programming-pattern-1"},"frontmatter":{"title":"비동기 프로그래밍 패턴 1","tags":["async","design"]}}},{"node":{"excerpt":"…","fields":{"date":"July 25, 2013","path":"/2013/07/25/write-game-data"},"frontmatter":{"title":"게임 데이터 작성하기 1","tags":["design","game","data"]}}},{"node":{"excerpt":"데이터베이스는 데이터가 모여있는 것이다. 그 데이터를 보다 효율적으로 관리하기 위해 나온게 관리 시스템이고, 덕분에 데이터베이스라고 하면 데이터베이스 관리 시스템(Database Management System)으로 MSSQL이나 MySQL…","fields":{"date":"October 08, 2011","path":"/2011/10/08/design-database"},"frontmatter":{"title":"데이터베이스 설계","tags":["database","design"]}}},{"node":{"excerpt":"프로그램이 Client, Server의 2-tier 모델에서 Server가 Data의 persistence를 위해 database를 사용한다. 이 때 client가 요청한 정보를 server가 database로부터 반환받아 client에게 넘겨주는 framework를 작성해보자. 설계 일단 Client와 Server가 주고 받을 데이터를 담는 객체를 설계한다. 기본(primitive) type과 String, Date…","fields":{"date":"February 22, 2011","path":"/2011/02/22/object-database-and-value-object"},"frontmatter":{"title":"Object Database와 Value Object","tags":["design","database"]}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tag":"design"}}}