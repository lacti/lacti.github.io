{"componentChunkName":"component---src-templates-page-tsx","path":"/2012/03/01/c-sharp-ui-cross-thread-problem/","result":{"data":{"site":{"siteMetadata":{"title":"Lacti's Archive","description":"All about I learned","author":{"name":"Jaeyoung, Choi","url":"https://twitter.com/lacti"}}},"markdownRemark":{"html":"<p>다른 Thread에서 UI component에 접근하려면 문제가 발생한다. (cross thread)\n동기화 이슈에서보면 당연한 이야기니 바로 해결책을 보자.</p>\n<p><code>System.Windows.Forms.Control</code>에는 <code>Invoke</code>라는 UI thread로 작업을 delegate하는 method가 있다.이 녀석은 Delegate 를 받아서 그걸 내부에서 수행해주는데, C#에서는 어차피 외부 변수 capture를 자동으로 해주므로 간단히 다음과 같이 쓰면 된다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"csharp\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">Invoke</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MethodInvoker</span><span class=\"mtk1\">(</span><span class=\"mtk4\">delegate</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// code for running in ui thread</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}));</span></span></span></code></pre>\n<p>그러면 delegate 내부의 내용은 UI thread에서 수행되므로 문제가 없다.</p>\n<p>더 예전 버전의 C#은 직접 method를 만들어서 등록해주어야했지만 2.0이후부터는 delegate로 익명 함수자 생성이 가능하므로 문법이 좀 간단해졌다. (C# 4.0부터는 lambda를 지원하니까 문법이 더 간단해지지 않았나?)</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"다른 Thread에서 UI component에 접근하려면 문제가 발생한다. (cross thread)\n동기화 이슈에서보면 당연한 이야기니 바로 해결책을 보자. System.Windows.Forms.Control에는 Invoke라는 UI thread…","fields":{"date":"March 01, 2012","shortdesc":"","slug":"/2012/03/01/c-sharp-ui-cross-thread-problem/"},"frontmatter":{"title":"C# UI Cross thread problem 해결","tags":["c#"]}}},"pageContext":{"slug":"/2012/03/01/c-sharp-ui-cross-thread-problem/","older":{"slug":"/2012/02/23/thread-unsafety-problem-in-circular-queue/","title":"환형큐의 thread unsafety 문제"},"newer":{"slug":"/2012/03/18/asynchronous-programming-and-async-await/","title":"asynchronous programming과 async, await"}}},"staticQueryHashes":["848695393"]}